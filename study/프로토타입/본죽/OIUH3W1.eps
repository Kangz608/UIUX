%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1410.i029.019.S.m005.c13.people avatars black and white.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Даша
%%CreationDate: 10/17/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 22457 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFFD2EA8FFFD54A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%7DA87DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD2CA87D2727F827
%27FD4FA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0727FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFD2BA87DFD072752FFFD4CA8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FF
%A8A8FD0627F852A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD14A8FFA8FD047DFD
%0FA852527DFF7D27F827272752FD04A8FFFD13A8FF7D5252FD047DFD19A8
%7D7D7DFD13A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D52FD0527A8A8
%FFA8FFA8FFA8FFA8FFA8FF522727527D7DFD0427527DA87D277D7DFFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA852F8FD0627527DFFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA87D52FD0427527DFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFD11A8FD0827F852FD0AA87D272727F8FD0727F827F827F8
%2752FD13A8FD0A277DFFFD0FA8FFA852F8FD0527F82752FFFD10A8FFA8A8
%A8FFA8A8A8FFA8A8A8FF7DFD0927F87DA8A8A8FFA8A8A8FFA87DFD12277D
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF7DFD0B27A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A87DFD0A2752FFA8A8A8FFA8A8A8FFA8A8A8FFFD10A87D
%F827F8FD0827FD08A8FF7D27F827F8FD0D27F852FD11A87DF827F8FD0527
%F827F87DFD10A8FD0C277DFD0DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF52
%FD0A2752A8FFA8FFA8FFA8FFFF7DF8277D7DFD0F27A8A8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FF522727A8FFFFA8FFFFA827277DFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF7DFD0C277DA8FFA8FFA8FFA8FFA8FFA8FFFD10A85252FF7D
%522727F8FD0427FD08A8FF52F852FFA87DF8FD062752F8FD05277DFD10A8
%7DF8FD08FFA8F87DFD0FA852F8272727F8FD072752FFFD0CA8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8277DFD04FFA87D52272727A8FFA8A8A8FFA8A852
%2727A8A8FFA8A87D522727F87DFF52F8FD0427FD04A8FFA8A8A8FFA8A8A8
%FFA8A8A8FF527DFD09FF7D7DFFA8FFA8A8A8FFA8A8A8FFFD04A8FD04277D
%7DFD07277DA8FFA8A8A8FFA8A8A8FFFD12A8277DFD07FFA85227FD08A87D
%277DFD05A8FF2727277DFFFFFF7DF827F827FD11A87D7DFD09FF7D7DFD0E
%A87D27272752FFFFA87DA85227F8277DFD0DA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FF52A8FD08FFA852A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D27
%A8FD06FF7D2752FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD09FFA8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF272727FD07FF522727A8A8FFA8FF
%A8FFA8FFA8FFA8FFFD10A8FF7DFD09FFA8FFFD0FA8FF7D7DFD08FF7D7DFD
%11A8FF7DFD09FF7DFFFD0FA852F852FD07FFA827277DFFFD0EA8FFA8A8A8
%FFA8A8A8FFA8A8A8FD0DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8
%FD0BFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8A8FD09FFA8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8FF7D2752FD08FF52F87DA8A8A8FFA8A8A8FFA8A8
%A8FFFD10A8FD0BFFFD13A8FD0BFFFD12A87DFD09FF7DFD11A82727A8FD06
%FFA8F8277DFD0DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA87DA8FFFFFF7DFFFFFFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA85227FD07FF52277DFFA8FFA8FFA8FFA8FFA8FFA8FFFD12A8FD09
%FFFD15A8FD07FFFD14A87D52FFA8527D52A8FF527DFD11A82752FD07FF52
%52FFFD0EA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FD09FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD07FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8FF525252FFFFFF52527DFFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8277DFD07FF527DA8A8A8FFA8A8A8FFA8A8A8FFFD16A8FD
%05FFFD19A8FFFFFFFD17A8FF52FD052752FFFD12A8277DA8FD05FFA87D27
%FFFD0EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D5252527DFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA87D7DFFA8FD05FF527DA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFFD10A8FFA8A8527D7DA87D52A8FFFD16A8FD04FFFD15A8FFA8A827
%272752272752A8A8FFFD0FA8FF7DA8A8FD05FFA87DA8FFFD10A8FFA8A8A8
%FFA8A8A8FFFD04A87D7DFD07275252A87DA8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8FFA8FD07FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DA8
%FFA8527D527D7DA8FFA87DA8A8FFA8FFA8A8A8FFA8A8A8FFA8FFA8A87D7D
%FD06FF7DA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD0DA8FFA82727F8FD0927
%F8277DFFFD0EA8FD0CFF7DFD0DA852FD0427FD09FF2727275252FD0AA8FF
%7D522727F852A8FFFF7D2727F82752FD0DA8FFA8FFA8FFA8FFA8FFA8FD04
%FF52FD0D27FFFFFFA8FFA8FFA8FFA8FFA8FFA87D27FD057D52FD067D2752
%FFA8FFA8FFA8FFA8FFA8FF52FD052752FD07FFFD062752FFA8FFA8FFA8FF
%A8FFA852FD0427F852FFA8FD062752FFA8FFA8FFA8FFA8FFA8FFFD0CA8FF
%FFFF52FD0B27F87DFD04FFFD0AA82727F852527D527D527D527DFD04277D
%FFFD09A852F8FD052752FD05FFFD072752FD09A87DF8FD0527F852FD0827
%FD0CA8FFA8A8A8FFA8A8A8FFA8FD04FFA8F8FD0B277DFFFFFFFD05A8FFA8
%A8A8FF7DFD0527527DA8A87D7DFD05277DA8FFA8A8A8FFFD04A8FD082752
%FFFFFF52FD0827A8A8FFA8A8A8FFA8FF52FD1027FD04A8FFA8A8A8FFFD0E
%A8FFFFFF7D27F827F827F827F827F827F87DFD04FFFD09A87DF827F827F8
%FD0527F827F827F82752FFFD08A87D27F827F8272727F82752FF52272727
%F8272727F827FD09A852F827F827F827F827F827F827F827F8277DFFFD0A
%A8FFA8FFA8FFA8FFA8FFA8FD04FFA8275252522752525227522752A8FFFF
%FFA8FFA8FFA8FFA8FFA8FF7D522752525227522752275252522752277DA8
%FFA8FFA8FFA8FFA8A82727275227522752FD05275227522752275227A8A8
%FFA8FFA8FFA8FF7D7D527D527D527D527D527D527D527D52A8A8FFA8FFA8
%FFA8FFA8FFFD66A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0EA8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFFD81A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFFD14A8FFA8A8A8FFFD18A85252277D7DFD16A8
%FF7D522752527DA8FFFD2CA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%7D5252275252FD04A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A852FD0527F8
%2727527DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A852FD0827A8A8FF
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FD07FFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFFD13A87D52F827F827F82727FD13A8FD0A27F87DFD12A82727F8
%FD0727F87DFD11A8FD09FFFD10A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%52FD0927A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD0B2752FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FF52FD0C277DA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FD0BFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD10A852F8FD0A27FD10
%A87DF8272727F827F8272727F852FD0FA8FF7DFD0E27FD10A8FD0BFFFD10
%A8FFA8A8A8FFA8A8A8FFFD04A8FD0C277DFFA8FFA8A8A8FFA8A8A8FFA8A8
%A8FF522752FFFF7D527DA8FF7D2727A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A852F8FD0D277DFFA8FFA8A8A8FFA8A8A8FFA8A8A8FD0BFFA8FFA8A8A8FF
%A8A8A8FFA8A8A8FFFD0EA8FF52272727F8272727F8272727F852FD0FA87D
%27FD09FF5227FD10A8FD0627F8275227F8272727F87DFD0FA8FD0BFFFD0E
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DFD0627F852FD0527A8A8FFA8FFA8
%FFA8FFA8FFA8FFA8FF7D7DFD09FF7D52FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FD0527F852A8FFA8FD05277DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0D
%FFA8FFA8FFA8FFA8FFA8FFA8FFFD0FA8FD0427527D527D7D7DFD04277DFD
%0EA87D52FD09FF7D52FD10A8FD0427527DA8FFFFFF52272727F87DFD0FA8
%FD0BFFFD0EA8FFA8A8A8FFA8A8A8FFA8A8A8FFA827272752FD06FFA82727
%27FD04A8FFA8A8A8FFA8A8A8FFA8FFA87DFD09FFA87DFFA8A8A8FFA8A8A8
%FFA8A8A8FFA8FF7D2727277DFD07FFFD04277DFFA8A8A8FFA8A8A8FFA8A8
%A8FFA8FD0DFFA8FFA8A8A8FFA8A8A8FFFD11A82727F87DFD06FF7D272727
%7DFFFD0DA8FFA8FD09FFA8FFFD10A8272727FD08FF7DF82727FD0EA8FFA8
%FD09FFA8FFFD0EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA82727277DFD06FFA8
%2727277DA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0EFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA852277DFD08FFA8522752A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%FFA8A8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0FA82727F87DFD06FF
%7D2727277DFFFD0EA8FD0CFFFD10A827277DFD09FF272752FFFD0DA8FF7D
%A8FD08FF7DFD11A8FFA8A8A8FFA8A8A8FFA8FF7D27272752FD06FF7DF827
%277DA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD0BFFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA87DF8A8FD09FF52F8FD04A8FFA8A8A8FFA8A8A8FFFD04A8
%52FFFFFF527DA8FFA852A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD0EA87DF827
%F852FD06FF7D2727277DFFFD0FA8FD09FFFD11A8FF7D2752FD09FF2727FD
%11A827275252A87D52522727FD0FA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD
%0427FD06FF522727277DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD07FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A82752FD08FFA82752FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D27F87DA8FF522727A8A8FFA8FFA8
%FFA8FFA8FFA8FFA8FFFD0EA87DFD0527FD04FF52F82727277DFFFD11A8FD
%05FFFD13A8FF7D2727A8A8FD05FFA852F852FD11A8FF5227F8272727F8FD
%11A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DFD0527A8FFFFFFFD0527FD04A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8FD06FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A87D272752FD06FFA8272752FFA8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FF52FD0427A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD11A8FD05
%27FD04FF52F82727277DFFFD11A8FD05FFFD15A852F827A8FD05FF5227F8
%FD10A8FFA8A8A8FFA8A87DFFFFA8A8FFFD0EA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FD0427A8FD04FFA8FD0427A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8
%FD0BFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8277DFD06FFA8277D
%FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D7D52FD07FF7D7D7DA8A8FFA8FF
%A8FFA8FFA8FFA8FFFD0FA82727F82752A8A8FFA87DF82727277DFFFD0AA8
%52522727A8FD0AFF52F82752FD0FA852A8FD07FFA87DFFFD0DA8FF5227F8
%2727A8FD04FF7D27F827F8A8FFFFFD0CA8FFA8A8A8FFA8A8A8FFA8FFA852
%2752FD0B27FFA8FFA8A8A8FFA8A8A8FF7DFD05277DFD07FF7D52FD042752
%FFA8FFA8A8A8FFA8A8A8FFA87D2727277D7DA8A8A87D7D522727FD04A8FF
%A8A8A8FFA8A8A8FFFF7DF8FD0427527D7DFD0627A8FFFFFFA8A8A8FFA8A8
%A8FFFD0EA8FFA8FFFF7DF8272727F82752A87DA8FFFFFD09A852F8FD0627
%5252FF52272727F8272727F827FD0BA87DF827F827F827F827F827F82727
%27F87DFD09A8FFFFFF7DFD0527F827F8FD0527F8A8FFFFFD0AA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD06FFA8FD04277DFD05FFA8FFA8FFA8FFA8FFA8FF52
%FD09277D52FD0927A8A8FFA8FFA8FFA8FFA8FF5227275227522752272727
%522752272752FFA8FFA8FFA8FFA8A8FFFFFFA8FD0E27A8FFFFFFA8FFA8FF
%A8FFA8FFFD0EA8FD06FFA827277DFD07FFFD09A852F827F8272727F827F8
%FD0527F8272727F8277DFD0AA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FD09A8FFFFFF7D27F8272727F8272727F8FD0427FFFFFFFD0AA8FFA8A8A8
%FFA8A8A8FFA8A8A8FD09FFA8FD07FFA8A8A8FFA8A8A8FFA8A82752275227
%52275227522752275227522752275227FD04A8FFA8A8A8FFA8A8FD11FFFD
%04A8FFA8A8A8FD04FFA8FD0E52A8FFFFFFA8FFA8A8A8FFFD18A8FFFD33A8
%FFA8FFA8FFA8FFA8FFA8FFA8FFFD2AA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD14A8FFA8FFFD
%1BA8FF7DA87DFFFD17A8FFA8A8A8FFFD15A8FFA8A87D7D7DFD15A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8FFA8A87D7D7DA8A8FFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8FF5227272752FD04A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A87DA8A8A87DFFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FF7D52FD05275252A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD
%10A8FF7D522727F827F8527DFD16A8FF7D27F8FD0427FD15A82727275227
%27277DFD12A82727F827F8272727F827F87DFD0EA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF7DFD092752FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A87D52FD0627A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0927
%7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD052752FD07277DA8FFA8FFA8
%FFA8FFA8FFA8FFFD10A852F8FD09277DFFFD11A87D2727F8FD0627FD12A8
%7DFD0A27F87DFD0DA8FF52FD0427A8A8FFA8A852272727F8FD0DA8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8FD0B2752A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A87DFD092752A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A8FD0D27A8A8
%FFA8A8A8FFA8A8A8FFA8FFA827272752FD07FFA852272752FFA8A8A8FFA8
%A8A8FFFD10A8FF52FD0C27FD11A8F8FD0927F852FD10A87DFD0727F8FD06
%27FD0CA87DF82752FFFFFFA8A8A8FFFFFFA82727277DFD0BA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA87DF8FD0627A852272752A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FF52FD0C27A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD062752
%52FD062752FFA8FFA8FFA8FFA8FFA8FF522727A8FFA852522727277DFFFF
%5227277DA8FFA8FFA8FFA8FFA8FFFD0EA8FF5227F827F85252FFFFFF5227
%27FD10A852F8FD0B277DFFFD0EA852272727F82752FFA852FD06277DFFFD
%09A852F827FFA8F8277D7D2727F852FF7DF82752FFFD0CA8FFA8A8A8FFA8
%A8A8FFFD04A8275252A8FD06FF277DA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FF52FD0527F852A87DF82727A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DFD04
%2752A8FD04FFA8FD05277DA8FFA8A8A8FFA8A8A8FF272727FF272752FFFF
%FF2727F87D7D27277DA8FFA8A8A8FFA8A8A8FFFD10A852A8FD08FF277DFF
%FD0FA852F827F8272752A8FFFF52F8277DFD0EA87DF827F87DFD07FFA827
%27F8277DFD0AA852F8527D2752FD04FFA85227277DF82752FFFD0AA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FF7DFD09FF52FFFFA8A8FFA8FFA8FFA8FFA8
%FFA8FFA8FF5227527DA8FD06FF7D27A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%7D272752FD09FF7D272752FFA8FFA8FFA8FFA8FFA8FF5227275252FD07FF
%7DFD04277DA8FFA8FFA8FFA8FFA8FFFD10A8FD0AFFA8A8FFFD0FA87D7DFD
%09FFA852FD0FA87D272752FD09FFA827F8FD0CA87DF85227A8FD08FF5252
%27277DFD0BA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD0DFFA8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FD0DFFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA82727
%A8FD0AFF5252A8FFA8A8A8FFA8A8A8FFA8FFA8277DFFA8FD0AFF5227FFA8
%A8A8FFA8A8A8FFFD12A8FD0BFFFD12A8FD0CFFFD10A85227A8FD09FFA827
%52FD0DA85252FD0BFFA827FD0DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8
%FFFFFFA8A87DFD04FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD09
%FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF277DFD04FFA8FD04FF7D
%F87DA8FFA8FFA8FFA8FFA8FFA8FFA8FF52A8FD0AFF527DA8FFA8FFA8FFA8
%FFA8FFA8FFFD12A8FFA87DA8A87DFFFD14A87DA8FD08FF7DFD13A827A8FF
%A8527D52A8FFA8F8277DFFFD0DA8FF527DFD08FF277DFD10A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FD06FFA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8FFA8FD07FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%7D27FF7DFFFFA87DFF27277DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%FD07FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD13A8FD06FFFD17A8FD05
%FFFD17A85227FF272727FF2752FD15A8FD05FFFD12A8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA87DFFA852A8FF7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8A8A8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD10A8FF7D2727
%7D7D7D27277DFD16A8FD05FFFD13A8FFFD04A827272752272752FD04A8FF
%FD12A8FD04FFFD12A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFFF7DF827F827
%2727F852FFFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A827527D7D
%277DA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8527D5252FD092752527D
%52FD04A8FFA8A8A8FFA8A8A8FFA8FFA8FD07FFA8FFA8A8A8FFA8A8A8FFA8
%A8A8FFFD0CA8FF5252FD04FFA852F8272727F827A8FD04FF7D27FD0CA87D
%5252A852F85227527D7D527DA8FFFD0BA87DF827F8FD0B27F827F827F87D
%FD0BA8FF7DA8FD08FF52FD0FA8FFA8FFA8FFA8FFA8FFA85227FD05FFA852
%F82727277DFD05FF27277DFFA8FFA8FFA8FFA8FFA87D2727277DFD06FF27
%272752A8FFA8FFA8FFA8FFA8FFA8FF52FD132752FFA8FFA8FFA8FFA8FFA8
%FFFF5252FD08FF27A8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0BA827277DFD05
%FFA8522752A8FD05FFA827F87DFD09A87DF8272727F852FFFFFFA8FD0427
%F852FD0BA8FD1327F852FD0AA8FFFF7D52FD07FFA827FFFFFFFD0EA8FFA8
%A8A8FFA8FF7D27277DFD0FFF7DF8277DFFA8FFA8A8A8FFA8FF52FD06277D
%FFFFFD0727FD04A8FFA8A8A8FFA8A8FD1527FD04A8FFA8A8A8FD04FFA827
%A8A8FFFFFFA8FF5252FD04FFA8FFA8A8A8FFA8A8A8FFFD0AA87DF82727FD
%05FFA8FFFFFFA8FD05FF52F8F87DFD09A852F8272727F827F87DFD0427F8
%2727277DFD09A87D27F827F827F827F827F8272727F827F827F827F827FD
%09A8FFFFFF5227F827277D5227F82727A8FFFFFD0CA8FFA8FFA8FFA8FFA8
%FFA87D7D7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D7DA8FFA8FFA8FFA8
%FFA8FF52FD1027A8A8FFA8FFA8FFA8FFA8A8FD157DFFA8FFA8FFA8FFA8FD
%04FF7DF8272727F8FD0527A8FFFFFFA8FFA8FFA8FFA8FFA8FFFD0CA8FFFD
%11A8FFA8FFFD0AA87DA87D7D7DA87D7D7DA87D7D7DA87D7DFD0BA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD09A8FFA8FFFD0B7DA8A8FF
%FD0CA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF
%A8A8A8FFA8A8A8FFFD18A8FFFD1BA8FFFD4EA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFD04A87D7D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8A87D7D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8A87DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8A87DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD11A85252
%27522727F827277DFD14A85227F8FD04277DFD16A87D52272727527DFD15
%A87D522727275252FD13A8FFA8A8A8FFA8A8A8FFA8A8A8FF52FD0927F87D
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FD0827F87DA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFFD04A852FD0827A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FF52FD08277DA8FFA8A8A8FFA8A8A8FFA8A8A8FFFD0FA852FD0B
%27F87DFD10A8FD0A27F87DFD12A8FD0B27FD11A852FD0927F87DFD0EA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA852FD0D27FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FF7DFD0B2752FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF52FD0C27FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA852FD0A2752FFA8FFA8FFA8FFA8FFA8FF
%A8FFFD0FA8FD0E277DFD0EA87DF82752A85252277D7D27F852FD0FA8FF7D
%FD06277DFD062752FFFD0EA8FD0627F8FD042752FD0EA8FFA8A8A8FFA8A8
%A8FFA8A8A8FF7DFD0427527DFD08277DA8A8A8FFA8A8A8FFA8A8A8FFA8FF
%7D277DFD07FFA82727FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A852FD0527FF
%FFFFFD052752A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD06277DA87DF82727
%A8A8FFA8A8A8FFA8A8A8FFFD10A87DF82727277DFF7D27F827F827272752
%FFFD0DA87D27FD09FF7D52FD10A8FD0527FD05FFFD0527FD0FA82727F852
%7DFD04FF52F852FD0EA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D27272752FD04
%FFA852FD04277DA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DFD09FFA852FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA852272727A8FD05FFA8FD0427A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA85252FD08FF5252FFA8FFA8FFA8FFA8FFA8FFA8
%FFFD0FA82727F87DFD06FF5227272752FFFD0EA87DFD09FFFD12A82727F8
%52FD07FF52F82727FD0EA8FF52A8FD08FF7D7DFD10A8FFA8A8A8FFA8A8A8
%FFA8FFA8522727A8FD07FF2727277DA8FFA8A8A8FFA8A8A8FFA8A8A8FD0F
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA82727277DFD07FFA8272727A8FFA8
%FFA8A8A8FFA8A8A8FFA8A8FFA8A8FD08FFA8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFFD0FA8522727FD08FF52F8277DFD0EA8FFA8FD09FFA8FFFD10A82727
%F8A8FD08FF272727FD0EA8FFA8FD09FFA8FFFD0EA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8A82752FD08FF272752FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0D
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8522752A8FD07FFA8272752A8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFFD10A87D27FD07FFA827F87DFD0FA8FF7DFD09FF7DFD10A8FF522727A8
%FD08FF272752FFFD0FA8FD0AFFFD0FA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%FFA87D7DFD06FF7DF87DA8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A87DFD07
%FFA87DA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A87D27277DFD07FF7D2727
%7DA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FD0AFFA8A8A8FFA8A8A8FFA8A8
%A8FFFD15A8FD05FF7DF87DFD13A87D7DFFFFA8A8FFA87DFD12A87D27F827
%7DFD05FF7D27F8277DFD12A8FD07FFFD10A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FD05FF52A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA87D52FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF52
%272727A8FFFFFFA827272752FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD14A8FD04FFFD19A8527D
%527DFD16A827277DFD05FF7D27F8FD14A8FD05FFFD14A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FD05FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8FFA8A87DA8A8A87DA8A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A87DF87D7DA8A8A87DA8277DA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF
%A8FFA8FD07FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFD13A87DA8FFFFFD
%05A8FFFD11A87D272727A85227277D7DFD14A87D275227522752277DFD12
%A87D7DA8FD06FFA8527D7DFD0DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05
%FF7D7D7DA8FFFFFF7D7DFFA8FFA8FFA8FFA8FFA8FFA87D5252FD052752A8
%7DFD052752527DA8FFA8FFA8FFA8FFA8FFA8FFA8FD04FFA8A8FFFFFFA8A8
%FD04FFA8FFA8FFA8FFA8FFA8FFA87DFD0527527DA8A8FF7D7DFD0527527D
%FFA8FFA8FFA8FFA8FFFD0EA8FD07FF7D7DFFFFA852F82752FD0AA87DF827
%F8FD0627A852FD0727F852FD0BA8FD11FFFD09A87DF8FD0727F8272727F8
%FD0527F827A8FFFD08A8FFA8A8A8FFA8A8A8FFA8A8A8FD0AFFA852FD0527
%A8FFA8FFA8A8A8FFA8FF52FD082752FF7DF8FD0827FD04A8FFA8A8A8FFA8
%A8FD12FFA8A8A8FFA8A8A8FF7DFD1427A8A8FFA8A8A8FFFD10A8FFFFFFA8
%FFA87D5252F827F8272727F87DFD09A852F8FD0827FF7DFD09277DFFFD09
%A87D7DFD04A8FFA8A8A8FFA8A87DA87DFD0AA852F8FD13277DFD09A8FFA8
%FFA8FFA8FFA8FFA8FFA8A8FD04522727F8FD09277DFFA8FFA8FFA8FFA8FF
%52FD0727F87DFFA8FD0927A8A8FFA8FFA8FFA8FFA8FFFD1127FFA8FFA8FF
%A8FFA8FF52FD14277DA8FFA8FFA8FFA8FFFD0CA8FF52FD0F27F87DFD09A8
%52FD082752FF7DFD09277DFFFD07A8FFA852FD0F2752FD09A87D27522752
%275227522752275227522752275227527DFD0BA8FFA8A8A8FFA8A8A8FFA8
%A87DA8A8A87DA8A8A87DA8A8A87DFD04A8FFA8A8A8FFA8A8A8FFA8A87DA8
%A8A87DFD07A87DA8A8A87DFD04A8FFA8A8A8FFA8A8A8FFFD13A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFFD81A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFFD81A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD82A8A8
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-10-17T15:12:09+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-10-17T15:12:09+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-10-17T15:12:08+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7nirsVdirsVdirsVdirs&#xA;VdirsVUbu7tbO1lurqVYLaBS80zkKqqoqSScVYK/55/l4s5iF3Myg09ZYJOB99wGp9GKsy0fWtK1&#xA;mwS/0u5S7tJNlljPcdQwNCpHgRXFUdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiqnNcW8Cc55UiT+Z2Cjb3OKoS31/Qrm4FtbajazXBqBDHNG7mnX4QxOKo/FXYq7FUs1&#xA;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&#xA;q7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:3FB5658DEF55E411BD78B8848F2118E9</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3FB5658DEF55E411BD78B8848F2118E9</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:6CA7F8E81355E411BD78B8848F2118E9</stRef:instanceID>
            <stRef:documentID>xmp.did:6CA7F8E81355E411BD78B8848F2118E9</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:382E38814C52E4119FB49D8DA2C234E7</stEvt:instanceID>
                  <stEvt:when>2014-10-12T23:15:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3A2E38814C52E4119FB49D8DA2C234E7</stEvt:instanceID>
                  <stEvt:when>2014-10-13T01:02:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:115A627AC252E411A28CAB00F8438029</stEvt:instanceID>
                  <stEvt:when>2014-10-13T13:19:55+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6CA7F8E81355E411BD78B8848F2118E9</stEvt:instanceID>
                  <stEvt:when>2014-10-16T12:07:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3FB5658DEF55E411BD78B8848F2118E9</stEvt:instanceID>
                  <stEvt:when>2014-10-17T15:12:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
[1 0 0 1 0 0 ]ct
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.839216 .839216 .839216 rgb
f
160.156 286.547 mo
160.156 286.547 157.961 284.569 157.743 283.624 cv
159.343 282.97 li
160.156 286.547 li
cp
.2 .2 .2 rgb
f
189.436 286.547 mo
189.436 286.547 191.631 284.569 191.851 283.624 cv
190.25 282.97 li
189.436 286.547 li
cp
f
171.785 237.884 mo
170.228 244.07 174.686 246.839 180.667 248.345 cv
186.649 249.853 191.889 249.524 193.446 243.339 cv
194.98 237.246 190.706 233.739 184.726 232.233 cv
178.744 230.728 173.37 231.585 171.785 237.884 cv
cp
f
146.141 316.909 mo
147.014 311.164 151.93 308.939 154.841 308.067 cv
157.75 307.194 162.578 306.873 165.633 305.128 cv
168.687 303.383 168.2 294.654 168.2 294.654 cv
174.797 294.654 li
181.392 294.654 li
181.392 294.654 180.905 303.383 183.96 305.128 cv
187.015 306.873 191.842 307.194 194.751 308.067 cv
197.661 308.939 202.577 311.164 203.45 316.909 cv
204.149 321.514 204.178 327.673 204.178 327.673 cv
174.797 327.673 li
145.414 327.673 li
145.414 327.673 145.441 321.514 146.141 316.909 cv
cp
1 1 1 rgb
f
181.969 301.759 mo
181.969 301.759 181.969 301.761 181.969 301.763 cv
178.423 301.099 171.559 298.908 168.225 296.406 cv
168.229 296.146 168.229 295.907 168.227 295.694 cv
168.227 295.688 168.227 295.683 168.227 295.677 cv
168.227 295.582 168.225 295.493 168.223 295.409 cv
168.223 295.391 168.223 295.374 168.223 295.355 cv
168.223 295.284 168.221 295.219 168.219 295.158 cv
168.219 295.142 168.217 295.128 168.217 295.112 cv
168.215 295.054 168.215 295.001 168.213 294.952 cv
168.211 294.94 168.211 294.929 168.211 294.915 cv
168.21 294.871 168.208 294.83 168.206 294.797 cv
168.206 294.788 168.206 294.78 168.206 294.773 cv
168.204 294.743 168.202 294.722 168.202 294.703 cv
168.202 294.674 168.2 294.654 168.2 294.654 cv
174.797 294.654 li
181.392 294.654 li
181.392 294.654 181.172 298.636 181.969 301.759 cv
cp
f
156.014 272.863 mo
156.014 272.863 153.23 260.976 156.469 254.364 cv
159.959 247.237 165.196 243.164 174.797 243.164 cv
184.396 243.164 189.634 247.237 193.124 254.364 cv
196.362 260.976 193.578 272.863 193.578 272.863 cv
197.94 271.99 197.123 276.765 195.759 278.923 cv
194.628 280.713 194.605 280.905 193.923 282.873 cv
192.94 285.709 190.687 283.746 190.687 283.746 cv
189.378 287.383 188.449 288.242 183.232 293.055 cv
178.688 297.248 177.093 297.2 174.797 297.2 cv
172.499 297.2 170.941 297.248 166.36 293.055 cv
161.124 288.263 160.214 287.383 158.904 283.746 cv
158.904 283.746 156.652 285.709 155.67 282.873 cv
154.987 280.905 154.963 280.713 153.833 278.923 cv
152.468 276.765 151.65 271.99 156.014 272.863 cv
cp
f
162.293 243.164 mo
172.979 237.58 181.969 243.164 181.969 243.164 cv
204.122 245.613 196.369 273.55 196.369 273.55 cv
196.358 273.548 li
195.88 272.906 195.012 272.576 193.578 272.863 cv
193.883 270.829 191.381 268.352 187.453 265.443 cv
183.525 262.534 181.969 258.315 181.969 258.315 cv
181.969 258.315 178.04 265.733 168.2 267.697 cv
158.361 269.66 156.286 271.048 156.014 272.863 cv
154.58 272.576 153.713 272.906 153.234 273.548 cv
153.223 273.55 li
153.223 273.55 147.272 251.014 162.293 243.164 cv
cp
.2 .2 .2 rgb
f
183.96 305.128 mo
187.015 306.873 191.842 307.194 194.751 308.067 cv
197.661 308.939 202.577 311.164 203.45 316.909 cv
204.149 321.514 204.178 327.673 204.178 327.673 cv
174.797 327.673 li
145.414 327.673 li
145.414 327.673 145.441 321.514 146.141 316.909 cv
147.014 311.164 151.93 308.939 154.841 308.067 cv
157.75 307.194 162.578 306.873 165.633 305.128 cv
165.765 305.053 165.887 304.96 166.005 304.86 cv
183.588 304.86 li
183.707 304.96 183.829 305.053 183.96 305.128 cv
cp
f
165.783 305.128 mo
165.914 305.053 166.038 304.96 166.156 304.86 cv
174.871 304.86 li
183.588 304.86 li
183.707 304.96 183.829 305.053 183.96 305.128 cv
185.339 305.916 187.081 306.406 188.843 306.796 cv
188.844 306.802 li
174.871 322.133 li
160.9 306.802 li
160.9 306.796 li
162.663 306.406 164.405 305.916 165.783 305.128 cv
cp
1 1 1 rgb
f
182.198 302.539 mo
174.797 304.933 li
176.908 310.205 li
186.361 306.144 li
182.198 302.539 li
cp
.2 .2 .2 rgb
f
167.394 302.539 mo
174.797 304.933 li
172.684 310.205 li
163.23 306.148 li
167.394 302.539 li
cp
f
156.38 284.114 mo
156.38 284.667 156.827 285.115 157.381 285.115 cv
157.932 285.115 158.379 284.667 158.379 284.114 cv
158.379 283.563 157.932 283.115 157.381 283.115 cv
156.827 283.115 156.38 283.563 156.38 284.114 cv
cp
f
193.213 284.114 mo
193.213 284.667 192.765 285.115 192.213 285.115 cv
191.661 285.115 191.213 284.667 191.213 284.114 cv
191.213 283.563 191.661 283.115 192.213 283.115 cv
192.765 283.115 193.213 283.563 193.213 284.114 cv
cp
f
250.731 212.966 mo
251.604 207.219 256.52 204.994 259.43 204.121 cv
262.339 203.25 267.167 202.928 270.223 201.184 cv
273.277 199.438 272.79 190.71 272.79 190.71 cv
279.387 190.71 li
285.98 190.71 li
285.98 190.71 285.495 199.438 288.55 201.184 cv
291.604 202.928 296.432 203.25 299.341 204.121 cv
302.251 204.994 307.166 207.219 308.039 212.966 cv
308.739 217.569 308.767 223.728 308.767 223.728 cv
279.387 223.728 li
250.004 223.728 li
250.004 223.728 250.031 217.569 250.731 212.966 cv
cp
1 1 1 rgb
f
286.559 197.813 mo
286.559 197.814 286.559 197.816 286.559 197.816 cv
283.013 197.154 276.149 194.966 272.814 192.463 cv
272.818 192.201 272.818 191.964 272.816 191.751 cv
272.816 191.744 272.816 191.739 272.816 191.731 cv
272.814 191.639 272.814 191.55 272.813 191.465 cv
272.813 191.446 272.813 191.43 272.813 191.411 cv
272.813 191.339 272.811 191.274 272.809 191.213 cv
272.809 191.199 272.807 191.182 272.807 191.167 cv
272.805 191.11 272.804 191.056 272.802 191.008 cv
272.802 190.995 272.802 190.984 272.802 190.971 cv
272.8 190.925 272.798 190.886 272.797 190.853 cv
272.797 190.843 272.797 190.838 272.795 190.829 cv
272.795 190.799 272.793 190.777 272.791 190.758 cv
272.791 190.73 272.79 190.71 272.79 190.71 cv
279.387 190.71 li
285.98 190.71 li
285.98 190.71 285.762 194.69 286.559 197.813 cv
cp
f
260.604 168.917 mo
260.604 168.917 257.819 157.03 261.058 150.418 cv
264.55 143.292 269.786 139.219 279.387 139.219 cv
288.985 139.219 294.223 143.292 297.713 150.418 cv
300.952 157.03 298.167 168.917 298.167 168.917 cv
302.53 168.045 301.712 172.819 300.348 174.978 cv
299.218 176.768 299.193 176.96 298.513 178.929 cv
297.53 181.766 295.275 179.802 295.275 179.802 cv
293.967 183.438 293.038 184.298 287.822 189.11 cv
283.275 193.303 281.683 193.255 279.387 193.255 cv
277.088 193.255 275.531 193.303 270.948 189.11 cv
265.715 184.318 264.804 183.438 263.495 179.802 cv
263.495 179.802 261.24 181.766 260.259 178.929 cv
259.577 176.96 259.553 176.768 258.423 174.978 cv
257.059 172.819 256.24 168.045 260.604 168.917 cv
cp
f
283.317 151.56 mo
283.317 151.56 300.418 167.486 295.458 183.972 cv
300.117 183.972 li
300.117 183.972 312.554 159.397 305.354 145.628 cv
298.153 131.858 286.559 133.551 286.559 133.551 cv
283.317 151.56 li
cp
.2 .2 .2 rgb
f
283.317 151.56 mo
283.317 151.56 278.735 158.127 269.79 160.245 cv
260.845 162.364 260.481 179.17 261.791 183.408 cv
256.706 183.907 li
256.706 183.907 249.281 163.423 254.736 149.017 cv
260.191 134.611 276.272 126.562 286.559 133.551 cv
283.317 151.56 li
cp
f
279.387 223.728 mo
250.004 223.728 li
250.004 223.728 250.031 217.569 250.731 212.966 cv
251.604 207.219 256.52 204.994 259.43 204.121 cv
260.302 203.86 261.354 203.647 262.473 203.431 cv
271.344 206.794 279.674 207.219 279.674 207.219 cv
279.674 207.219 287.882 206.799 296.682 203.505 cv
297.656 203.696 298.568 203.89 299.341 204.121 cv
302.251 204.994 307.166 207.219 308.039 212.966 cv
308.739 217.569 308.767 223.728 308.767 223.728 cv
279.387 223.728 li
cp
f
250.512 214.647 mo
308.26 214.647 li
308.745 218.936 308.767 223.728 308.767 223.728 cv
279.387 223.728 li
250.004 223.728 li
250.004 223.728 250.026 218.936 250.512 214.647 cv
cp
1 1 1 rgb
f
299.374 183.714 mo
299.374 183.714 303.968 189.574 299.443 194.755 cv
294.921 199.937 295.711 200.799 296.878 203.102 cv
296.878 203.102 287.376 197.442 291.741 190.822 cv
295.49 185.139 295.59 183.403 295.59 183.403 cv
299.374 183.714 li
cp
.2 .2 .2 rgb
f
257.668 183.714 mo
257.668 183.714 253.074 189.574 257.599 194.755 cv
262.121 199.937 261.331 200.799 260.164 203.102 cv
260.164 203.102 269.666 197.442 265.301 190.822 cv
261.551 185.139 261.452 183.403 261.452 183.403 cv
257.668 183.714 li
cp
f
255.611 183.896 mo
255.701 184.813 256.715 185.464 257.876 185.35 cv
260.645 185.08 li
261.805 184.967 262.674 184.131 262.585 183.215 cv
262.585 183.215 li
262.495 182.298 261.481 181.649 260.319 181.763 cv
257.553 182.033 li
256.391 182.146 255.522 182.98 255.611 183.896 cv
255.611 183.896 li
cp
f
294.444 183.247 mo
294.363 184.162 295.239 184.991 296.401 185.093 cv
299.172 185.338 li
300.333 185.444 301.342 184.784 301.424 183.866 cv
301.424 183.866 li
301.505 182.949 300.629 182.122 299.467 182.019 cv
296.697 181.772 li
295.534 181.669 294.526 182.329 294.444 183.247 cv
294.444 183.247 li
cp
f
348.794 262.141 mo
348.262 278.274 361.445 291.802 378.237 292.354 cv
395.03 292.91 409.074 280.277 409.604 264.144 cv
410.138 248.007 401.198 231.31 380.162 231.31 cv
356.86 231.31 349.325 246.004 348.794 262.141 cv
cp
f
350.258 317.19 mo
351.13 311.445 356.046 309.223 358.956 308.35 cv
361.865 307.477 366.694 307.154 369.748 305.409 cv
372.801 303.665 372.314 294.937 372.314 294.937 cv
378.912 294.937 li
385.505 294.937 li
385.505 294.937 385.021 303.665 388.074 305.409 cv
391.13 307.154 395.957 307.477 398.866 308.35 cv
401.775 309.223 406.691 311.445 407.564 317.19 cv
408.266 321.796 408.291 327.954 408.291 327.954 cv
378.912 327.954 li
349.53 327.954 li
349.53 327.954 349.557 321.796 350.258 317.19 cv
cp
1 1 1 rgb
f
386.084 302.041 mo
386.084 302.041 386.084 302.043 386.084 302.045 cv
382.537 301.381 375.676 299.19 372.341 296.69 cv
372.345 296.428 372.345 296.19 372.343 295.977 cv
372.343 295.971 372.343 295.965 372.343 295.96 cv
372.341 295.863 372.341 295.776 372.339 295.691 cv
372.339 295.673 372.339 295.656 372.337 295.638 cv
372.337 295.567 372.335 295.501 372.333 295.439 cv
372.333 295.425 372.333 295.41 372.331 295.396 cv
372.331 295.336 372.33 295.282 372.328 295.234 cv
372.328 295.224 372.328 295.211 372.328 295.197 cv
372.326 295.153 372.324 295.114 372.322 295.079 cv
372.322 295.072 372.322 295.063 372.32 295.055 cv
372.32 295.025 372.318 295.003 372.316 294.984 cv
372.316 294.957 372.314 294.937 372.314 294.937 cv
378.912 294.937 li
385.505 294.937 li
385.505 294.937 385.285 298.919 386.084 302.041 cv
cp
f
360.13 273.146 mo
360.13 273.146 357.345 261.259 360.583 254.646 cv
364.075 247.521 369.312 243.447 378.912 243.447 cv
388.511 243.447 393.747 247.521 397.238 254.646 cv
400.478 261.259 397.691 273.146 397.691 273.146 cv
402.055 272.272 401.237 277.046 399.874 279.205 cv
398.744 280.995 398.72 281.188 398.038 283.155 cv
397.056 285.992 394.801 284.028 394.801 284.028 cv
393.491 287.664 392.563 288.524 387.348 293.337 cv
382.801 297.53 381.207 297.481 378.912 297.481 cv
376.615 297.481 375.058 297.53 370.475 293.337 cv
365.238 288.545 364.328 287.664 363.021 284.028 cv
363.021 284.028 360.767 285.992 359.784 283.155 cv
359.102 281.188 359.08 280.995 357.949 279.205 cv
356.585 277.046 355.767 272.272 360.13 273.146 cv
cp
f
374.708 252.383 mo
374.708 252.383 373.97 259.539 371.569 261.84 cv
371.569 261.84 372.006 260.432 371.569 259.487 cv
371.569 259.487 370.46 263.669 366.696 266.833 cv
366.696 266.833 367.787 264.613 367.787 263.669 cv
367.787 263.669 367.152 265.254 364.928 267.95 cv
362.703 270.646 362.947 269.883 362.137 273.994 cv
357.169 269.524 li
357.169 269.524 359.267 259.807 359.346 258.774 cv
359.424 257.743 364.928 251.487 364.928 251.487 cv
374.708 252.383 li
cp
.2 .2 .2 rgb
f
373.772 252.549 mo
373.772 252.549 375.008 256.85 379.202 258.869 cv
383.508 260.942 385.581 263.56 385.581 265.96 cv
385.581 265.96 387 264.65 386.026 262.509 cv
386.026 262.509 389.036 266.942 392.672 269.123 cv
392.672 269.123 391.362 267.232 391.362 265.633 cv
391.362 265.633 391.803 267.749 397.691 273.146 cv
403.581 265.742 li
403.581 265.742 397.325 251.76 396.599 250.605 cv
395.872 249.451 376.816 243.045 376.816 243.045 cv
373.772 252.549 li
cp
f
378.912 243.05 mo
378.912 243.05 403.96 241.955 398.195 270.466 cv
398.195 270.466 397.971 251.822 378.912 252.109 cv
359.851 251.822 359.627 270.466 359.627 270.466 cv
353.862 241.955 378.912 243.05 378.912 243.05 cv
cp
1 1 1 rgb
f
396.151 277.089 mo
396.151 277.089 395.531 271.395 392.75 267.95 cv
395.06 267.488 li
398.332 271.198 li
398.332 271.198 396.731 275.053 396.151 277.089 cv
cp
.2 .2 .2 rgb
f
361.526 277.089 mo
361.526 277.089 362.146 271.395 364.928 267.95 cv
362.618 267.488 li
359.346 271.198 li
359.346 271.198 360.945 275.053 361.526 277.089 cv
cp
f
396.17 321.435 mo
392.604 320.943 li
394.47 307.396 li
395.735 307.643 396.948 307.869 398.006 308.124 cv
396.17 321.435 li
cp
f
359.817 308.124 mo
360.874 307.869 362.087 307.643 363.352 307.396 cv
365.218 320.943 li
361.652 321.435 li
359.817 308.124 li
cp
f
360.498 327.954 mo
359.842 321.161 li
359.842 321.161 361.767 319.783 362.747 319.443 cv
366.365 318.191 370.987 319.388 378.912 322.121 cv
386.837 319.388 391.457 318.191 395.074 319.443 cv
396.057 319.783 397.982 321.161 397.982 321.161 cv
397.325 327.954 li
378.912 327.954 li
360.498 327.954 li
cp
f
342.989 209.218 mo
343.898 203.231 344.657 200.968 352.96 200.008 cv
356.104 199.644 364.656 198.763 367.838 196.945 cv
371.021 195.127 370.515 186.037 370.515 186.037 cv
379.201 186.037 li
387.892 186.037 li
387.892 186.037 387.383 195.127 390.565 196.945 cv
393.747 198.763 402.3 199.644 405.442 200.008 cv
413.747 200.968 414.505 203.231 415.413 209.218 cv
416.143 214.014 416.172 220.429 416.172 220.429 cv
379.201 220.429 li
342.233 220.429 li
342.233 220.429 342.261 214.014 342.989 209.218 cv
cp
1 1 1 rgb
f
389.803 196.298 mo
389.803 196.298 li
384.051 196.435 374.353 195.059 370.424 190.25 cv
370.424 190.242 370.424 190.235 370.426 190.228 cv
370.498 189.386 370.528 188.591 370.538 187.923 cv
370.538 187.921 370.538 187.919 370.538 187.917 cv
370.542 187.697 370.542 187.492 370.542 187.303 cv
370.542 187.296 370.542 187.289 370.542 187.281 cv
370.542 187.096 370.54 186.93 370.536 186.78 cv
370.536 186.772 370.536 186.765 370.536 186.76 cv
370.534 186.612 370.53 186.482 370.526 186.378 cv
370.526 186.375 370.526 186.373 370.526 186.371 cv
370.522 186.266 370.519 186.183 370.517 186.127 cv
370.517 186.116 370.517 186.118 370.517 186.108 cv
370.515 186.064 370.515 186.037 370.515 186.037 cv
379.201 186.037 li
387.892 186.037 li
387.892 186.037 387.471 193.581 389.803 196.298 cv
cp
f
359.639 163.337 mo
360.023 163.337 li
359.861 162.008 359.695 160.699 359.533 159.461 cv
358.696 153.044 357.783 134.292 379.201 134.292 cv
398.596 134.292 399.707 153.044 398.871 159.461 cv
398.709 160.699 398.543 162.008 398.379 163.337 cv
398.767 163.337 li
402.172 160.817 402.459 167.4 401.039 169.648 cv
399.86 171.513 399.835 171.713 399.127 173.764 cv
398.602 175.277 397.731 175.476 397.005 175.313 cv
396.913 176.207 396.835 176.989 396.779 177.611 cv
396.465 181.07 388.148 188.002 386.265 190.172 cv
384.498 192.201 381.553 191.411 380.61 191.367 cv
379.656 191.322 379.201 191.298 379.201 191.298 cv
379.201 191.298 378.748 191.322 377.795 191.367 cv
376.851 191.411 373.905 192.201 372.14 190.172 cv
370.255 188.002 361.939 181.07 361.625 177.611 cv
361.569 176.989 361.492 176.207 361.398 175.312 cv
360.674 175.476 359.802 175.278 359.278 173.764 cv
358.568 171.713 358.543 171.513 357.366 169.648 cv
355.943 167.4 356.231 160.817 359.639 163.337 cv
cp
f
373.689 182.511 mo
375.052 180.405 379.201 180.234 379.201 180.234 cv
379.201 180.234 383.351 180.405 384.715 182.511 cv
384.732 182.55 385.679 184.659 383.459 185.53 cv
382.952 185.711 382.065 185.833 381.043 185.898 cv
380.661 185.848 380.323 185.741 380.114 185.539 cv
379.331 184.781 379.201 184.905 379.201 184.905 cv
379.201 184.905 379.074 184.781 378.291 185.539 cv
378.082 185.741 377.742 185.848 377.36 185.898 cv
376.338 185.833 375.451 185.711 374.945 185.53 cv
372.727 184.659 373.671 182.55 373.689 182.511 cv
cp
360.451 166.337 mo
360.523 166.908 360.595 167.484 360.666 168.068 cv
360.666 168.068 361.083 173.098 361.398 175.313 cv
361.49 176.207 361.55 176.991 361.625 177.611 cv
362.042 181.054 362.977 182.143 363.81 183.421 cv
366.494 186.743 369.934 190.496 371.231 191.99 cv
372.996 194.019 376.851 194.139 377.795 194.095 cv
378.748 194.05 379.201 194.026 379.201 194.026 cv
379.201 194.026 379.656 194.05 380.61 194.095 cv
381.553 194.139 385.406 194.019 387.174 191.99 cv
388.472 190.496 391.91 186.743 394.595 183.421 cv
395.427 182.143 396.362 181.054 396.779 177.611 cv
396.854 176.991 396.913 176.207 397.005 175.313 cv
397.321 173.098 397.737 168.068 397.737 168.068 cv
397.81 167.484 397.881 166.908 397.953 166.337 cv
397.762 165.592 395.744 173.746 395.744 173.746 cv
392.782 182.826 386.694 180.366 383.712 179.217 cv
381.927 177.909 380.519 177.508 379.201 177.508 cv
377.886 177.508 376.477 177.909 374.693 179.217 cv
371.711 180.366 365.621 182.826 362.66 173.746 cv
362.66 173.746 360.643 165.592 360.451 166.337 cv
cp
.2 .2 .2 rgb
f
365.06 198.012 mo
365.064 198.012 li
365.064 198.012 368.432 205.471 379.201 205.471 cv
389.973 205.471 393.339 198.012 393.339 198.012 cv
393.344 198.012 li
397.262 199.124 402.992 199.723 405.442 200.008 cv
404 220.429 li
379.201 220.429 li
354.404 220.429 li
352.96 200.008 li
355.411 199.723 361.143 199.124 365.06 198.012 cv
cp
f
35.3525 313.04 mo
36.2891 306.874 37.0703 304.541 45.625 303.551 cv
48.8623 303.177 57.6738 302.27 60.9512 300.396 cv
64.2285 298.524 63.7061 289.16 63.7061 289.16 cv
72.6563 289.16 li
81.6064 289.16 li
81.6064 289.16 81.0859 298.524 84.3613 300.396 cv
87.6396 302.27 96.4502 303.177 99.6885 303.551 cv
108.242 304.541 109.023 306.874 109.961 313.04 cv
110.71 317.98 110.74 324.59 110.74 324.59 cv
72.6563 324.59 li
34.5723 324.59 li
34.5723 324.59 34.6035 317.98 35.3525 313.04 cv
cp
1 1 1 rgb
f
83.5791 299.73 mo
83.5791 299.73 li
77.6523 299.871 67.6621 298.453 63.6143 293.501 cv
63.6143 293.492 63.6143 293.486 63.6162 293.477 cv
63.6895 292.611 63.7217 291.791 63.7334 291.104 cv
63.7334 291.102 63.7334 291.1 63.7334 291.098 cv
63.7363 290.871 63.7363 290.66 63.7363 290.467 cv
63.7363 290.457 63.7363 290.449 63.7363 290.441 cv
63.7344 290.252 63.7334 290.08 63.7314 289.926 cv
63.7314 289.919 63.7314 289.912 63.7314 289.904 cv
63.7266 289.752 63.7236 289.62 63.7197 289.512 cv
63.7197 289.51 63.7197 289.508 63.7197 289.505 cv
63.7158 289.395 63.7119 289.31 63.71 289.254 cv
63.71 289.242 63.71 289.244 63.709 289.235 cv
63.707 289.189 63.7061 289.16 63.7061 289.16 cv
72.6563 289.16 li
81.6064 289.16 li
81.6064 289.16 81.1758 296.933 83.5791 299.73 cv
cp
f
52.502 265.776 mo
52.9004 265.776 li
52.7324 264.406 52.5605 263.059 52.3936 261.783 cv
51.5322 255.172 49.5918 235.854 72.6563 235.854 cv
95.7197 235.854 93.7803 255.172 92.917 261.783 cv
92.751 263.059 92.5801 264.406 92.4111 265.776 cv
92.8096 265.776 li
96.3184 263.181 96.6143 269.961 95.1504 272.277 cv
93.9375 274.199 93.9121 274.405 93.1816 276.518 cv
92.6406 278.077 91.7432 278.281 90.9951 278.113 cv
90.9004 279.034 90.8203 279.84 90.7627 280.48 cv
90.4385 284.045 81.874 291.184 79.9307 293.42 cv
78.1133 295.512 75.0781 294.697 74.1055 294.652 cv
73.123 294.606 72.6563 294.581 72.6563 294.581 cv
72.6563 294.581 72.1885 294.606 71.2061 294.652 cv
70.2344 294.697 67.2002 295.512 65.3809 293.42 cv
63.4395 291.184 54.8721 284.045 54.5508 280.48 cv
54.4922 279.84 54.4121 279.034 54.3164 278.112 cv
53.5684 278.281 52.6709 278.078 52.1309 276.518 cv
51.4004 274.405 51.375 274.199 50.1602 272.277 cv
48.6973 269.961 48.9932 263.181 52.502 265.776 cv
cp
f
90.6074 274.008 mo
90.6074 274.008 88.2002 264.277 88.1094 262.459 cv
87.9482 259.211 80.9297 254.811 80.1494 251.377 cv
79.6553 249.197 83.5771 237.863 83.5771 237.863 cv
83.5771 237.863 94.3066 237.863 94.2949 254.922 cv
94.293 257.979 92.4111 265.776 92.4111 265.776 cv
92.4111 265.776 91.0762 270.576 90.6074 274.008 cv
cp
.2 .2 .2 rgb
f
54.7041 274.008 mo
54.7041 274.008 55.1768 264.218 57.2031 262.459 cv
60.9463 259.211 79.3701 254.811 80.1494 251.377 cv
80.6465 249.197 83.5771 237.863 83.5771 237.863 cv
83.5771 237.863 81.7979 235.477 76.7148 234.832 cv
65.6348 233.428 51.7813 236.652 51.0166 254.922 cv
50.8887 257.977 52.9004 265.776 52.9004 265.776 cv
52.9004 265.776 54.2363 270.576 54.7041 274.008 cv
cp
f
80.1494 251.377 mo
80.1494 251.377 80.7344 255.625 69.1436 260.018 cv
69.1436 260.018 70.7803 256.555 71.248 254.275 cv
71.248 254.275 71.7158 260.112 57.2012 264.015 cv
57.2012 264.015 62.1963 259.525 62.0391 257.459 cv
61.8828 255.393 74.5254 245.285 74.5254 245.285 cv
80.1494 251.377 li
cp
f
72.6563 283.815 mo
72.6563 283.815 73.6318 283.191 74.958 283.543 cv
75.8906 283.789 78.9072 286.264 80.1484 286.118 cv
80.1484 286.118 78.5488 287.172 76.4023 285.728 cv
75.209 284.924 73.8652 284.873 73.3584 284.832 cv
72.8506 284.791 72.2676 284.556 72.6563 283.815 cv
cp
f
72.6563 283.815 mo
72.6563 283.815 71.6816 283.191 70.3535 283.543 cv
69.4219 283.789 66.4072 286.264 65.165 286.118 cv
65.165 286.118 66.7656 287.172 68.9102 285.728 cv
70.1035 284.924 71.4463 284.873 71.9541 284.832 cv
72.4609 284.791 73.0459 284.556 72.6563 283.815 cv
cp
f
35.2227 313.105 mo
36.1602 306.939 36.9414 304.606 45.4951 303.616 cv
48.7334 303.242 57.5439 302.336 60.8213 300.463 cv
61.6777 299.975 62.2715 298.975 62.6846 297.764 cv
62.6846 297.764 67.29 300.766 72.5117 300.741 cv
78.1221 300.715 82.3672 297.758 82.3672 297.758 cv
82.3672 297.758 li
82.7832 298.971 83.377 299.974 84.2334 300.463 cv
87.5107 302.336 96.3223 303.242 99.5605 303.616 cv
108.113 304.606 108.896 306.939 109.832 313.105 cv
110.581 318.045 110.612 324.654 110.612 324.654 cv
72.5283 324.654 li
34.4453 324.654 li
34.4453 324.654 34.4736 318.045 35.2227 313.105 cv
cp
f
88.2197 301.857 mo
92.1611 302.815 97.2617 303.351 99.5605 303.616 cv
102.255 303.929 104.176 304.373 105.574 305.03 cv
101.626 307.32 99.6914 320.088 99.1191 324.654 cv
72.5283 324.654 li
71.8467 316.529 li
82.0566 316.529 87.5234 303.985 88.2197 301.857 cv
cp
1 1 1 rgb
f
56.8369 301.857 mo
52.8955 302.815 47.7939 303.351 45.4951 303.616 cv
42.8018 303.929 40.8809 304.373 39.4805 305.03 cv
43.4297 307.32 45.3652 320.088 45.9365 324.654 cv
72.5283 324.654 li
73.209 316.529 li
63 316.529 57.5322 303.985 56.8369 301.857 cv
cp
f
279.385 238.349 mo
279.385 238.349 276.92 233.495 271.693 235.104 cv
266.466 236.716 265.784 239.896 263.284 241.489 cv
260.784 243.08 257.998 243.761 256.549 248.989 cv
255.102 254.216 256.084 257.473 254.42 258.987 cv
251.674 261.488 250.794 268.446 253.512 276.487 cv
256.124 284.227 260.557 283.305 262.106 289.185 cv
262.785 291.756 267.836 293.413 265.328 296.716 cv
265.328 296.716 270.272 296.716 272.323 294.229 cv
275.009 290.968 279.385 238.349 279.385 238.349 cv
cp
.2 .2 .2 rgb
f
279.385 241.715 mo
279.385 241.715 277.76 238.988 279.385 236.716 cv
281.011 234.442 291.238 232.852 300.328 244.442 cv
309.42 256.034 311.692 261.943 309.192 265.579 cv
306.692 269.216 303.821 279.216 304.348 282.852 cv
304.875 286.488 300.102 290.807 295.556 292.397 cv
291.011 293.988 293.057 296.714 293.057 296.714 cv
293.057 296.714 288.465 296.896 287.237 293.396 cv
286.012 289.896 279.385 241.715 279.385 241.715 cv
cp
f
243.173 313.274 mo
244.081 307.29 244.839 305.024 253.144 304.064 cv
256.286 303.7 264.839 302.819 268.021 301.001 cv
271.203 299.184 270.697 290.093 270.697 290.093 cv
279.385 290.093 li
288.073 290.093 li
288.073 290.093 287.565 299.184 290.748 301.001 cv
293.93 302.819 302.482 303.7 305.626 304.064 cv
313.93 305.024 314.688 307.29 315.597 313.274 cv
316.325 318.07 316.354 324.486 316.354 324.486 cv
279.385 324.486 li
242.416 324.486 li
242.416 324.486 242.443 318.07 243.173 313.274 cv
cp
1 1 1 rgb
f
259.822 267.394 mo
260.207 267.394 li
260.044 266.063 259.878 264.756 259.717 263.517 cv
258.879 257.101 256.995 238.349 279.385 238.349 cv
301.773 238.349 299.891 257.101 299.054 263.517 cv
298.893 264.756 298.726 266.063 298.563 267.394 cv
298.949 267.394 li
302.354 264.875 302.643 271.457 301.222 273.706 cv
300.043 275.57 300.018 275.771 299.31 277.821 cv
298.784 279.334 297.914 279.532 297.188 279.369 cv
297.096 280.265 297.018 281.045 296.962 281.668 cv
296.647 285.127 288.331 292.059 286.448 294.229 cv
284.681 296.259 281.735 295.468 280.793 295.423 cv
279.84 295.379 279.385 295.356 279.385 295.356 cv
279.385 295.356 278.932 295.379 277.978 295.423 cv
277.033 295.468 274.088 296.259 272.323 294.229 cv
270.438 292.059 262.123 285.127 261.809 281.668 cv
261.751 281.045 261.675 280.265 261.581 279.369 cv
260.856 279.532 259.984 279.334 259.461 277.821 cv
258.751 275.771 258.727 275.57 257.549 273.706 cv
256.127 271.457 256.414 264.875 259.822 267.394 cv
cp
f
279.385 250.125 mo
279.385 250.125 280.102 256.941 286.466 258.987 cv
292.829 261.033 295.799 265.86 297.829 269.67 cv
299.858 273.479 300.615 277.405 299.874 279.443 cv
299.132 281.479 310.819 262.852 304.348 254.896 cv
301.323 251.179 296.488 243.006 291.867 239.896 cv
286.603 236.358 279.385 238.349 279.385 238.349 cv
279.385 250.125 li
cp
.2 .2 .2 rgb
f
279.557 251.055 mo
279.557 251.055 280.622 256.126 275.93 258.693 cv
271.238 261.261 264.42 264.441 263.057 268.761 cv
261.692 273.079 261.775 276.425 259.461 277.821 cv
257.147 279.216 253.739 267.834 254.874 265.91 cv
256.011 263.988 257.2 253.272 258.284 251.055 cv
266.24 234.777 279.385 238.349 279.385 238.349 cv
279.557 251.055 li
cp
f
273.569 290.722 mo
272.464 286.732 279.385 286.187 279.385 286.187 cv
279.385 286.187 286.304 286.732 285.201 290.72 cv
285.132 290.818 282.805 294.047 279.385 291.682 cv
275.978 294.038 273.652 290.838 273.569 290.722 cv
cp
273.443 292.397 mo
275.639 297.169 279.385 296.972 279.385 296.972 cv
279.385 296.972 283.131 297.169 285.325 292.397 cv
285.325 292.397 287.829 288.711 285.325 286.662 cv
282.822 284.614 279.385 284.82 279.385 284.82 cv
279.385 284.82 275.947 284.614 273.443 286.662 cv
270.939 288.711 273.443 292.397 273.443 292.397 cv
cp
f
243.173 313.274 mo
244.081 307.29 244.839 305.024 253.144 304.064 cv
256.286 303.7 264.839 302.819 268.021 301.001 cv
268.846 300.529 269.421 299.57 269.823 298.406 cv
269.823 298.406 273.048 299.784 279.385 299.575 cv
285.723 299.784 288.946 298.406 288.946 298.406 cv
289.349 299.57 289.924 300.529 290.748 301.001 cv
293.93 302.819 302.482 303.7 305.626 304.064 cv
313.93 305.024 314.688 307.29 315.597 313.274 cv
316.325 318.07 316.354 324.486 316.354 324.486 cv
279.385 324.486 li
242.416 324.486 li
242.416 324.486 242.443 318.07 243.173 313.274 cv
cp
f
291.057 301.156 mo
291.05 301.162 li
291.05 301.162 287.162 302.777 279.385 302.777 cv
279.385 299.575 li
285.723 299.784 288.946 298.406 288.946 298.406 cv
289.349 299.57 289.924 300.529 290.748 301.001 cv
290.842 301.055 290.955 301.104 291.057 301.156 cv
cp
f
267.713 301.156 mo
267.721 301.162 li
267.721 301.162 271.607 302.777 279.385 302.777 cv
279.385 299.575 li
273.048 299.784 269.823 298.406 269.823 298.406 cv
269.421 299.57 268.846 300.529 268.021 301.001 cv
267.928 301.055 267.814 301.104 267.713 301.156 cv
cp
f
278.703 304.747 mo
278.703 305.124 279.008 305.429 279.385 305.429 cv
279.761 305.429 280.066 305.124 280.066 304.747 cv
280.066 304.371 279.761 304.066 279.385 304.066 cv
279.008 304.066 278.703 304.371 278.703 304.747 cv
cp
f
278.703 307.365 mo
278.703 307.743 279.008 308.048 279.385 308.048 cv
279.761 308.048 280.066 307.743 280.066 307.365 cv
280.066 306.99 279.761 306.685 279.385 306.685 cv
279.008 306.685 278.703 306.99 278.703 307.365 cv
cp
1 1 1 rgb
f
278.703 309.984 mo
278.703 310.362 279.008 310.667 279.385 310.667 cv
279.761 310.667 280.066 310.362 280.066 309.984 cv
280.066 309.609 279.761 309.304 279.385 309.304 cv
279.008 309.304 278.703 309.609 278.703 309.984 cv
cp
.2 .2 .2 rgb
f
278.703 312.604 mo
278.703 312.98 279.008 313.286 279.385 313.286 cv
279.761 313.286 280.066 312.98 280.066 312.604 cv
280.066 312.229 279.761 311.923 279.385 311.923 cv
279.008 311.923 278.703 312.229 278.703 312.604 cv
cp
1 1 1 rgb
f
278.703 315.223 mo
278.703 315.6 279.008 315.905 279.385 315.905 cv
279.761 315.905 280.066 315.6 280.066 315.223 cv
280.066 314.847 279.761 314.542 279.385 314.542 cv
279.008 314.542 278.703 314.847 278.703 315.223 cv
cp
.2 .2 .2 rgb
f
278.703 317.842 mo
278.703 318.219 279.008 318.523 279.385 318.523 cv
279.761 318.523 280.066 318.219 280.066 317.842 cv
280.066 317.466 279.761 317.161 279.385 317.161 cv
279.008 317.161 278.703 317.466 278.703 317.842 cv
cp
1 1 1 rgb
f
278.703 320.46 mo
278.703 320.838 279.008 321.143 279.385 321.143 cv
279.761 321.143 280.066 320.838 280.066 320.46 cv
280.066 320.085 279.761 319.779 279.385 319.779 cv
279.008 319.779 278.703 320.085 278.703 320.46 cv
cp
.2 .2 .2 rgb
f
278.703 323.079 mo
278.703 323.456 279.008 323.762 279.385 323.762 cv
279.761 323.762 280.066 323.456 280.066 323.079 cv
280.066 322.704 279.761 322.398 279.385 322.398 cv
279.008 322.398 278.703 322.704 278.703 323.079 cv
cp
1 1 1 rgb
f
73.5947 180.91 mo
73.9102 181.121 74.2246 186.427 74.4668 191.87 cv
74.71 186.427 75.0244 181.121 75.3398 180.91 cv
75.9951 180.473 97.8125 181.564 97.8125 181.564 cv
97.8125 202.819 li
97.8125 202.819 88.8477 203.84 74.4668 203.734 cv
60.0859 203.84 51.1211 202.819 51.1211 202.819 cv
51.1211 181.564 li
51.1211 181.564 72.9404 180.473 73.5947 180.91 cv
cp
.2 .2 .2 rgb
f
45.377 210.175 mo
46.25 204.428 51.166 202.205 54.0771 201.332 cv
56.9863 200.459 61.8135 200.137 64.8672 198.393 cv
67.9229 196.647 67.4365 187.919 67.4365 187.919 cv
74.0303 187.919 li
80.626 187.919 li
80.626 187.919 80.1396 196.647 83.1953 198.393 cv
86.249 200.137 91.0781 200.459 93.9873 201.332 cv
96.8965 202.205 101.813 204.428 102.686 210.175 cv
103.385 214.778 103.412 220.937 103.412 220.937 cv
74.0303 220.937 li
44.6504 220.937 li
44.6504 220.937 44.6777 214.778 45.377 210.175 cv
cp
1 1 1 rgb
f
55.25 166.127 mo
55.25 166.127 52.4658 154.241 55.7051 147.629 cv
59.1943 140.502 64.4307 136.429 74.0303 136.429 cv
83.6318 136.429 88.8672 140.502 92.3574 147.629 cv
95.5967 154.241 92.8125 166.127 92.8125 166.127 cv
97.1758 165.256 96.3584 170.029 94.9932 172.188 cv
93.8633 173.978 93.8389 174.169 93.1582 176.138 cv
92.1768 178.975 89.9219 177.01 89.9219 177.01 cv
88.6123 180.647 87.6836 181.507 82.4668 186.321 cv
77.9219 190.514 76.3281 190.466 74.0303 190.466 cv
71.7344 190.466 70.1777 190.514 65.5957 186.321 cv
60.3604 181.527 59.4482 180.647 58.1406 177.01 cv
58.1406 177.01 55.8877 178.975 54.9053 176.138 cv
54.2236 174.169 54.1992 173.978 53.0693 172.188 cv
51.7041 170.029 50.8867 165.256 55.25 166.127 cv
cp
f
44.6504 220.937 mo
44.6504 220.937 44.6777 214.778 45.377 210.175 cv
46.25 204.428 51.166 202.205 54.0771 201.332 cv
55.1348 201.014 56.4502 200.77 57.8389 200.503 cv
67.8564 203.999 74.0303 203.742 74.0303 203.742 cv
74.0303 203.742 80.2061 203.999 90.2236 200.503 cv
91.6123 200.77 92.9277 201.014 93.9873 201.332 cv
96.8965 202.205 101.813 204.428 102.686 210.175 cv
103.385 214.778 103.412 220.937 103.412 220.937 cv
74.0303 220.937 li
44.6504 220.937 li
cp
f
90.2236 200.503 mo
91.6123 200.77 92.9277 201.014 93.9873 201.332 cv
94.4258 201.463 94.9121 201.632 95.4229 201.832 cv
95.4229 201.832 li
74.0303 219.191 li
74.0303 203.742 li
74.0303 203.742 80.2061 203.999 90.2236 200.503 cv
cp
.2 .2 .2 rgb
f
57.8389 200.503 mo
56.4502 200.77 55.1348 201.014 54.0771 201.332 cv
53.6367 201.463 53.1504 201.632 52.6396 201.832 cv
52.6396 201.832 li
74.0303 219.191 li
74.0303 203.742 li
74.0303 203.742 67.8564 203.999 57.8389 200.503 cv
cp
f
51.458 152.735 mo
57.1396 133.783 74.3193 133.783 74.3193 133.783 cv
74.3193 133.783 91.5 133.783 97.1816 152.735 cv
101.746 167.962 98.3574 207.565 98.3574 207.565 cv
97.7402 207.772 96.7637 208.05 96.083 208.144 cv
95.876 206.99 95.7031 204.983 95.7031 204.983 cv
95.3467 208.072 li
94.4404 208.127 93.2158 208.183 92.2852 208.107 cv
92.249 203.742 li
91.4941 207.928 li
90.6338 207.818 88.6406 207.605 87.8281 207.438 cv
87.917 205.429 li
87.1221 207.31 li
83.9668 206.564 82.4668 205.564 82.4668 205.564 cv
87.0498 190.165 86.9033 161.055 86.9033 161.055 cv
86.9033 161.055 85.7197 160.917 84.0518 160.742 cv
84.0537 160.742 li
83.4131 158.219 li
82.792 160.61 li
82.0654 160.537 81.29 160.459 80.5059 160.385 cv
79.2666 154.292 li
78.3936 160.182 li
77.1006 160.084 75.0928 159.965 74.3193 159.965 cv
74.3135 159.965 74.3096 159.965 74.3047 159.965 cv
73.8125 156.473 li
73.0332 160.004 li
71.2939 160.09 68.8516 160.31 66.6777 160.527 cv
66.1768 154.619 li
65.3574 160.661 li
63.2988 160.875 61.7363 161.055 61.7363 161.055 cv
61.7363 161.055 60.8682 190.301 65.4502 205.703 cv
65.4502 205.703 63.6191 206.259 61.0479 206.738 cv
59.4131 201.491 li
60.168 206.896 li
59.043 207.082 57.8154 207.245 56.5537 207.337 cv
55.5586 204.11 li
55.2168 207.406 li
53.1416 207.467 51.0605 207.3 49.3057 206.708 cv
49.3057 206.708 46.8955 167.962 51.458 152.735 cv
cp
f
293.836 398.273 mo
293.836 398.273 285.254 396.673 279.146 396.527 cv
273.572 396.395 265.437 398.273 265.437 398.273 cv
265.327 398.273 li
262.127 392.164 li
262.127 383.857 li
269.399 378.883 li
291.217 382.273 li
296.308 380.091 li
293.836 398.273 li
cp
f
250.73 418.119 mo
251.604 412.373 256.52 410.149 259.429 409.276 cv
262.338 408.404 267.167 408.084 270.221 406.338 cv
273.276 404.592 272.79 395.865 272.79 395.865 cv
279.386 395.865 li
285.981 395.865 li
285.981 395.865 285.495 404.592 288.549 406.338 cv
291.604 408.084 296.431 408.404 299.341 409.276 cv
302.25 410.149 307.168 412.373 308.04 418.119 cv
308.739 422.724 308.768 428.884 308.768 428.884 cv
279.386 428.884 li
250.004 428.884 li
250.004 428.884 250.031 422.724 250.73 418.119 cv
cp
1 1 1 rgb
f
260.604 374.073 mo
260.604 374.073 257.82 362.187 261.059 355.575 cv
264.549 348.447 269.784 344.375 279.386 344.375 cv
288.985 344.375 294.221 348.447 297.713 355.575 cv
300.951 362.187 298.167 374.073 298.167 374.073 cv
302.53 373.2 301.713 377.975 300.349 380.134 cv
299.218 381.922 299.194 382.115 298.513 384.084 cv
297.531 386.92 295.276 384.956 295.276 384.956 cv
293.968 388.593 293.038 389.453 287.821 394.266 cv
283.276 398.459 281.682 398.41 279.386 398.41 cv
277.088 398.41 275.531 398.459 270.949 394.266 cv
265.714 389.474 264.804 388.593 263.494 384.956 cv
263.494 384.956 261.239 386.92 260.258 384.084 cv
259.577 382.115 259.553 381.922 258.423 380.134 cv
257.058 377.975 256.24 373.2 260.604 374.073 cv
cp
f
271.044 403.291 mo
271.354 402.675 272.213 402.972 272.213 402.972 cv
274.836 403.599 279.386 403.582 279.386 403.582 cv
279.386 403.582 283.935 403.599 286.559 402.972 cv
286.559 402.972 287.416 402.675 287.728 403.291 cv
288.146 404.122 289.312 406.168 288.92 406.533 cv
288.294 407.12 283.48 407.764 279.386 407.764 cv
275.29 407.764 270.477 407.12 269.851 406.533 cv
269.459 406.168 270.624 404.122 271.044 403.291 cv
cp
.2 .2 .2 rgb
f
250.73 418.119 mo
251.604 412.373 256.52 410.149 259.429 409.276 cv
262.228 408.438 266.782 408.096 269.846 406.521 cv
269.848 406.522 269.848 406.531 269.851 406.533 cv
270.477 407.12 275.29 407.764 279.386 407.764 cv
283.48 407.764 288.294 407.12 288.92 406.533 cv
288.924 406.531 288.922 406.522 288.926 406.521 cv
291.988 408.096 296.544 408.438 299.341 409.276 cv
302.25 410.149 307.168 412.373 308.04 418.119 cv
308.739 422.724 308.768 428.884 308.768 428.884 cv
279.386 428.884 li
250.004 428.884 li
250.004 428.884 250.031 422.724 250.73 418.119 cv
cp
1 1 1 rgb
f
250.004 428.884 mo
250.004 428.884 250.026 424.448 250.459 420.292 cv
261.624 422.062 297.121 422.064 308.321 420.379 cv
308.745 424.511 308.768 428.884 308.768 428.884 cv
279.386 428.884 li
250.004 428.884 li
cp
.2 .2 .2 rgb
f
279.675 356.156 mo
279.675 356.156 296.173 365.13 295.29 382.375 cv
294.417 399.419 289.181 407.873 285.981 409.909 cv
285.981 409.909 304.6 406.709 306.054 372.675 cv
307.358 342.156 279.675 340.384 279.675 340.384 cv
279.675 356.156 li
cp
f
279.675 356.156 mo
279.675 356.156 263.174 365.13 264.057 382.375 cv
264.93 399.419 270.165 407.873 273.365 409.909 cv
273.365 409.909 254.748 406.709 253.294 372.675 cv
251.99 342.156 279.675 340.384 279.675 340.384 cv
279.675 356.156 li
cp
f
138.584 418.041 mo
139.492 412.055 140.25 409.791 148.555 408.831 cv
151.697 408.467 160.251 407.586 163.433 405.768 cv
166.613 403.95 166.106 394.859 166.106 394.859 cv
174.796 394.859 li
183.484 394.859 li
183.484 394.859 182.979 403.95 186.159 405.768 cv
189.341 407.586 197.895 408.467 201.037 408.831 cv
209.341 409.791 210.1 412.055 211.008 418.041 cv
211.736 422.836 211.766 429.252 211.766 429.252 cv
174.796 429.252 li
137.825 429.252 li
137.825 429.252 137.855 422.836 138.584 418.041 cv
cp
1 1 1 rgb
f
185.397 405.121 mo
185.397 405.121 li
179.646 405.258 169.946 403.882 166.018 399.072 cv
166.018 399.065 166.018 399.058 166.02 399.051 cv
166.092 398.209 166.123 397.414 166.133 396.746 cv
166.133 396.744 166.133 396.742 166.133 396.74 cv
166.137 396.521 166.137 396.315 166.137 396.126 cv
166.137 396.119 166.137 396.111 166.137 396.104 cv
166.137 395.919 166.135 395.753 166.131 395.603 cv
166.131 395.596 166.131 395.588 166.131 395.581 cv
166.127 395.435 166.123 395.306 166.121 395.201 cv
166.121 395.198 166.121 395.196 166.121 395.194 cv
166.118 395.089 166.114 395.004 166.112 394.95 cv
166.112 394.939 166.112 394.94 166.11 394.932 cv
166.108 394.887 166.106 394.859 166.106 394.859 cv
174.796 394.859 li
183.484 394.859 li
183.484 394.859 183.065 402.403 185.397 405.121 cv
cp
f
155.231 372.16 mo
155.618 372.16 li
155.455 370.83 155.289 369.522 155.128 368.283 cv
154.29 361.867 152.407 343.113 174.796 343.113 cv
197.187 343.113 195.302 361.867 194.466 368.283 cv
194.303 369.522 194.137 370.83 193.974 372.16 cv
194.36 372.16 li
197.767 369.64 198.054 376.224 196.633 378.471 cv
195.455 380.335 195.429 380.537 194.721 382.586 cv
194.195 384.101 193.326 384.299 192.6 384.136 cv
192.507 385.029 192.429 385.812 192.374 386.435 cv
192.06 389.894 183.744 396.823 181.859 398.995 cv
180.093 401.024 177.146 400.234 176.203 400.189 cv
175.249 400.146 174.796 400.121 174.796 400.121 cv
174.796 400.121 174.343 400.146 173.389 400.189 cv
172.445 400.234 169.499 401.024 167.734 398.995 cv
165.85 396.823 157.534 389.894 157.22 386.435 cv
157.162 385.812 157.087 385.029 156.992 384.134 cv
156.268 384.299 155.396 384.101 154.871 382.586 cv
154.162 380.537 154.139 380.335 152.96 378.471 cv
151.538 376.224 151.826 369.64 155.231 372.16 cv
cp
f
155.993 370.035 mo
155.993 371.171 157.127 380.132 157.472 382.989 cv
158.124 388.419 162.018 390.942 163.153 392.192 cv
164.289 393.442 168.947 398.329 170.54 398.896 cv
172.131 399.465 174.796 397.874 174.796 397.874 cv
174.796 397.874 177.463 399.465 179.054 398.896 cv
180.644 398.329 185.303 393.442 186.438 392.192 cv
187.576 390.942 191.47 388.419 192.12 382.989 cv
192.464 380.132 193.598 371.171 193.598 370.035 cv
193.598 369.28 193.964 369.555 194.189 370.429 cv
194.118 371.001 194.046 371.576 193.974 372.16 cv
193.974 372.16 192.803 384.182 192.6 384.136 cv
192.507 385.029 192.429 385.812 192.374 386.435 cv
192.346 386.734 192.24 387.069 192.102 387.415 cv
191.679 388.075 191.021 389.146 190.188 390.426 cv
187.504 393.748 183.155 397.501 181.859 398.995 cv
180.093 401.024 177.146 400.234 176.203 400.189 cv
175.249 400.146 174.796 400.121 174.796 400.121 cv
174.796 400.121 174.343 400.146 173.389 400.189 cv
172.445 400.234 169.499 401.024 167.734 398.995 cv
166.436 397.501 162.088 393.748 159.404 390.426 cv
158.571 389.146 157.913 388.075 157.489 387.415 cv
157.353 387.069 157.245 386.734 157.22 386.435 cv
157.162 385.812 157.085 385.029 156.992 384.136 cv
156.789 384.182 155.618 372.16 155.618 372.16 cv
155.546 371.576 155.474 371.001 155.403 370.429 cv
155.627 369.555 155.993 369.28 155.993 370.035 cv
cp
.2 .2 .2 rgb
f
183.54 397.29 mo
184.067 396.78 184.662 396.21 185.293 395.6 cv
184.664 396.208 184.066 396.781 183.54 397.29 cv
cp
1 1 1 rgb
f
181.859 398.995 mo
181.966 398.873 182.1 398.729 182.244 398.578 cv
182.099 398.729 181.966 398.872 181.859 398.995 cv
cp
f
185.67 395.233 mo
185.793 395.113 185.916 394.993 186.04 394.871 cv
185.915 394.994 185.793 395.112 185.67 395.233 cv
cp
f
182.355 398.463 mo
182.496 398.318 182.647 398.165 182.814 397.999 cv
182.646 398.165 182.496 398.317 182.355 398.463 cv
cp
f
183.491 397.338 mo
183.263 397.559 183.048 397.768 182.85 397.963 cv
183.047 397.769 183.264 397.558 183.491 397.338 cv
cp
f
192.102 387.415 mo
192.163 387.263 192.214 387.113 192.259 386.967 cv
191.965 388.019 191.112 389.305 189.996 390.656 cv
190.06 390.579 190.126 390.502 190.188 390.426 cv
191.021 389.146 191.679 388.075 192.102 387.415 cv
cp
f
187.499 393.407 mo
187.611 393.293 187.722 393.179 187.833 393.063 cv
187.722 393.179 187.611 393.293 187.499 393.407 cv
cp
f
187.024 393.891 mo
186.925 393.991 186.826 394.092 186.726 394.192 cv
186.825 394.093 186.925 393.991 187.024 393.891 cv
cp
f
189.241 391.539 mo
189.342 391.426 189.439 391.313 189.537 391.2 cv
189.439 391.313 189.342 391.426 189.241 391.539 cv
cp
f
188.426 392.437 mo
188.539 392.315 188.65 392.193 188.761 392.072 cv
188.649 392.194 188.539 392.314 188.426 392.437 cv
cp
f
167.364 398.594 mo
167.503 398.739 167.631 398.877 167.734 398.995 cv
167.632 398.877 167.502 398.738 167.364 398.594 cv
cp
f
196.633 378.471 mo
195.455 380.335 195.429 380.537 194.721 382.586 cv
194.195 384.101 193.326 384.299 192.6 384.136 cv
192.803 384.182 193.974 372.16 193.974 372.16 cv
194.36 372.16 li
197.767 369.64 198.054 376.224 196.633 378.471 cv
cp
f
157.339 386.981 mo
157.379 387.114 157.426 387.249 157.479 387.387 cv
157.426 387.248 157.376 387.112 157.339 386.981 cv
cp
f
157.495 387.424 mo
157.919 388.084 158.573 389.149 159.401 390.422 cv
158.531 389.344 157.854 388.319 157.495 387.424 cv
cp
f
155.231 372.16 mo
155.618 372.16 li
155.618 372.16 156.784 384.137 156.991 384.134 cv
156.267 384.299 155.396 384.1 154.871 382.586 cv
154.162 380.537 154.139 380.335 152.96 378.471 cv
151.538 376.224 151.826 369.64 155.231 372.16 cv
cp
f
160.11 391.264 mo
160.168 391.33 160.226 391.396 160.284 391.464 cv
160.226 391.396 160.168 391.331 160.11 391.264 cv
cp
f
159.412 390.435 mo
159.426 390.452 159.441 390.47 159.455 390.487 cv
159.441 390.47 159.426 390.452 159.412 390.435 cv
cp
f
161.85 393.157 mo
161.883 393.191 161.917 393.226 161.95 393.261 cv
161.917 393.226 161.884 393.191 161.85 393.157 cv
cp
f
166.258 397.489 mo
166.271 397.502 166.284 397.515 166.298 397.528 cv
166.284 397.515 166.271 397.502 166.258 397.489 cv
cp
f
161.012 392.271 mo
161.015 392.274 161.018 392.277 161.021 392.28 cv
161.018 392.277 161.015 392.274 161.012 392.271 cv
cp
f
167.207 398.431 mo
167.108 398.329 167.001 398.221 166.889 398.109 cv
167.001 398.222 167.107 398.329 167.207 398.431 cv
cp
f
155.403 349.73 mo
160.804 339.126 174.796 340.034 174.796 340.034 cv
174.796 340.034 188.787 339.126 194.189 349.73 cv
197.985 357.183 195.416 364.688 193.974 372.16 cv
193.598 370.035 li
193.598 370.035 192.805 361.397 187.463 357.762 cv
182.122 354.125 182.699 357.762 174.796 357.762 cv
166.895 357.762 167.472 354.125 162.128 357.762 cv
156.787 361.397 155.993 370.035 155.993 370.035 cv
155.618 372.16 li
154.177 364.688 151.608 357.183 155.403 349.73 cv
cp
.2 .2 .2 rgb
f
174.796 392.192 mo
176.362 392.192 li
176.362 392.192 176.259 395.435 174.796 395.64 cv
173.333 395.435 173.229 392.192 173.229 392.192 cv
174.796 392.192 li
cp
f
138.582 418.041 mo
139.492 412.055 140.25 409.791 148.555 408.831 cv
151.697 408.467 160.249 407.586 163.433 405.768 cv
164.263 405.295 164.84 404.323 165.241 403.149 cv
174.779 405.13 li
184.347 403.144 li
184.347 403.144 li
184.75 404.319 185.327 405.293 186.159 405.768 cv
189.341 407.586 197.893 408.467 201.035 408.831 cv
209.34 409.791 210.098 412.055 211.008 418.041 cv
211.734 422.836 211.766 429.252 211.766 429.252 cv
174.796 429.252 li
137.825 429.252 li
137.825 429.252 137.855 422.836 138.582 418.041 cv
cp
f
165.213 403.144 mo
174.779 405.13 li
168.18 412.568 li
164.435 404.823 li
164.435 404.823 164.954 403.889 165.213 403.144 cv
cp
f
184.345 403.144 mo
184.345 403.144 li
184.347 403.144 li
184.347 403.144 li
184.605 403.889 185.123 404.823 185.123 404.823 cv
181.382 412.563 li
181.38 412.568 li
181.38 412.566 li
181.38 412.568 li
181.38 412.566 li
174.779 405.13 li
184.345 403.144 li
184.345 403.144 li
cp
f
174.779 405.13 mo
174.779 411.403 li
177.703 408.424 li
174.779 405.13 li
cp
1 1 1 rgb
f
175.708 410.458 mo
178.613 425.574 li
177.15 429.252 li
174.796 429.252 li
174.779 411.403 li
175.708 410.458 li
cp
f
174.779 405.13 mo
174.779 411.403 li
171.855 408.424 li
174.779 405.13 li
cp
f
173.851 410.458 mo
170.945 425.574 li
172.408 429.252 li
174.763 429.252 li
174.779 411.403 li
173.851 410.458 li
cp
f
342.991 417.128 mo
343.901 411.143 344.658 408.878 352.962 407.917 cv
356.106 407.553 364.659 406.674 367.84 404.855 cv
371.022 403.037 370.515 393.945 370.515 393.945 cv
379.203 393.945 li
387.893 393.945 li
387.893 393.945 387.386 403.037 390.567 404.855 cv
393.75 406.674 402.302 407.553 405.444 407.917 cv
413.749 408.878 414.507 411.143 415.415 417.128 cv
416.145 421.924 416.172 428.34 416.172 428.34 cv
379.203 428.34 li
342.233 428.34 li
342.233 428.34 342.263 421.924 342.991 417.128 cv
cp
f
389.805 404.208 mo
389.805 404.208 li
384.053 404.345 374.354 402.969 370.426 398.161 cv
370.426 398.152 370.426 398.146 370.428 398.138 cv
370.5 397.295 370.531 396.5 370.54 395.832 cv
370.54 395.83 370.54 395.829 370.54 395.828 cv
370.544 395.607 370.544 395.403 370.544 395.214 cv
370.544 395.206 370.544 395.199 370.544 395.19 cv
370.542 395.007 370.54 394.839 370.538 394.69 cv
370.538 394.683 370.538 394.677 370.538 394.669 cv
370.536 394.521 370.533 394.393 370.529 394.288 cv
370.529 394.285 370.529 394.283 370.529 394.28 cv
370.525 394.175 370.521 394.092 370.52 394.036 cv
370.52 394.026 370.52 394.028 370.518 394.019 cv
370.517 393.975 370.515 393.945 370.515 393.945 cv
379.203 393.945 li
387.893 393.945 li
387.893 393.945 387.473 401.491 389.805 404.208 cv
cp
f
359.639 371.246 mo
360.025 371.246 li
359.863 369.918 359.696 368.609 359.533 367.371 cv
358.697 360.954 356.814 342.201 379.203 342.201 cv
401.594 342.201 399.709 360.954 398.871 367.371 cv
398.71 368.609 398.546 369.918 398.381 371.246 cv
398.768 371.246 li
402.175 368.728 402.461 375.31 401.039 377.559 cv
399.862 379.423 399.837 379.624 399.127 381.673 cv
398.604 383.188 397.733 383.386 397.007 383.223 cv
396.914 384.116 396.837 384.898 396.779 385.521 cv
396.465 388.98 388.151 395.912 386.265 398.081 cv
384.5 400.112 381.554 399.321 380.611 399.277 cv
379.656 399.232 379.203 399.209 379.203 399.209 cv
379.203 399.209 378.748 399.232 377.796 399.277 cv
376.853 399.321 373.908 400.112 372.14 398.081 cv
370.257 395.912 361.939 388.98 361.627 385.521 cv
361.57 384.898 361.492 384.116 361.399 383.223 cv
360.675 383.386 359.804 383.188 359.278 381.673 cv
358.57 379.624 358.546 379.423 357.366 377.559 cv
355.945 375.31 356.234 368.728 359.639 371.246 cv
cp
f
396.63 379.238 mo
396.63 379.238 396.933 369.542 396.023 368.026 cv
395.115 366.512 387.236 360.603 386.478 357.27 cv
385.997 355.153 389.805 344.151 389.805 344.151 cv
389.805 344.151 400.222 344.151 400.209 360.711 cv
400.207 363.678 398.381 371.246 398.381 371.246 cv
398.381 371.246 397.083 375.905 396.63 379.238 cv
cp
.2 .2 .2 rgb
f
361.777 379.238 mo
361.777 379.238 361.476 369.542 362.384 368.026 cv
363.294 366.512 385.72 360.603 386.478 357.27 cv
386.96 355.153 389.805 344.151 389.805 344.151 cv
389.805 344.151 388.077 341.833 383.145 341.209 cv
372.388 339.846 358.94 342.976 358.196 360.711 cv
358.072 363.675 360.025 371.246 360.025 371.246 cv
360.025 371.246 361.322 375.905 361.777 379.238 cv
cp
f
405.444 407.917 mo
413.749 408.878 414.507 411.143 415.415 417.128 cv
416.145 421.924 416.172 428.34 416.172 428.34 cv
379.203 428.34 li
379.203 411.143 li
386.74 411.114 394.815 406.304 394.817 406.303 cv
398.585 407.174 403.288 407.667 405.444 407.917 cv
cp
f
342.989 417.128 mo
343.899 411.143 344.658 408.878 352.96 407.917 cv
355.117 407.667 359.822 407.174 363.59 406.303 cv
363.592 406.304 371.665 411.114 379.203 411.143 cv
379.201 428.34 li
342.233 428.34 li
342.233 428.34 342.261 421.924 342.989 417.128 cv
cp
f
45.377 418.485 mo
46.25 412.739 51.166 410.516 54.0752 409.643 cv
56.9844 408.77 61.8135 408.449 64.8691 406.704 cv
67.9229 404.958 67.4365 396.23 67.4365 396.23 cv
74.0313 396.23 li
80.627 396.23 li
80.627 396.23 80.1406 404.958 83.1963 406.704 cv
86.25 408.449 91.0771 408.77 93.9863 409.643 cv
96.8975 410.516 101.812 412.739 102.685 418.485 cv
103.386 423.089 103.413 429.249 103.413 429.249 cv
74.0313 429.249 li
44.6504 429.249 li
44.6504 429.249 44.6777 423.089 45.377 418.485 cv
cp
1 1 1 rgb
f
81.2041 403.335 mo
81.2041 403.336 81.2041 403.338 81.2041 403.338 cv
77.6582 402.674 70.7949 400.485 67.46 397.983 cv
67.4639 397.723 67.4639 397.484 67.4619 397.271 cv
67.4619 397.265 67.4619 397.26 67.4619 397.253 cv
67.46 397.158 67.46 397.069 67.458 396.986 cv
67.458 396.968 67.458 396.95 67.458 396.932 cv
67.458 396.86 67.457 396.795 67.4551 396.734 cv
67.4551 396.718 67.4531 396.703 67.4531 396.688 cv
67.4512 396.63 67.4492 396.578 67.4473 396.529 cv
67.4473 396.517 67.4473 396.505 67.4473 396.491 cv
67.4453 396.446 67.4434 396.407 67.4414 396.373 cv
67.4414 396.365 67.4414 396.357 67.4395 396.35 cv
67.4395 396.319 67.4385 396.298 67.4365 396.279 cv
67.4365 396.25 67.4365 396.23 67.4365 396.23 cv
74.0313 396.23 li
80.627 396.23 li
80.627 396.23 80.4072 400.212 81.2041 403.335 cv
cp
f
55.25 374.439 mo
55.25 374.439 52.4639 362.552 55.7031 355.939 cv
59.1943 348.813 64.4326 344.741 74.0313 344.741 cv
83.6309 344.741 88.8682 348.813 92.3584 355.939 cv
95.5977 362.552 92.8135 374.439 92.8135 374.439 cv
97.1768 373.566 96.3574 378.341 94.9941 380.5 cv
93.8643 382.288 93.8398 382.481 93.1572 384.449 cv
92.1758 387.285 89.9209 385.321 89.9209 385.321 cv
88.6133 388.959 87.6826 389.818 82.4678 394.632 cv
77.9209 398.825 76.3291 398.776 74.0313 398.776 cv
71.7344 398.776 70.1777 398.825 65.5938 394.632 cv
60.3604 389.839 59.4502 388.959 58.1406 385.321 cv
58.1406 385.321 55.8857 387.285 54.9043 384.449 cv
54.2236 382.481 54.1992 382.288 53.0693 380.5 cv
51.7041 378.341 50.8867 373.566 55.25 374.439 cv
cp
f
68.6074 357.492 mo
68.6074 357.492 68.6074 363.747 82.1348 368.101 cv
82.1348 368.101 79.9521 366.511 79.6621 365.057 cv
79.6621 365.057 99.5957 373.662 80.3906 396.184 cv
80.3906 396.184 90.1338 395.455 96.7646 382.914 cv
101.05 374.811 102.683 355.657 92.9023 346.143 cv
81.8418 335.382 68.6074 342.074 68.6074 342.074 cv
68.6074 357.492 li
cp
.2 .2 .2 rgb
f
68.6074 357.492 mo
68.6074 357.492 53.8291 373.871 61.5088 390.772 cv
61.5088 390.772 48.3838 384.023 48.2441 365.347 cv
48.123 349.354 56.6797 338.293 68.6074 342.074 cv
68.6074 357.492 li
cp
f
44.6504 429.249 mo
44.6504 429.249 44.6592 427.229 44.7979 424.642 cv
79.6338 423.757 91.7412 413.491 94.8984 409.944 cv
97.8242 410.989 101.896 413.302 102.685 418.485 cv
103.386 423.089 103.413 429.249 103.413 429.249 cv
74.0313 429.249 li
44.6504 429.249 li
cp
f
93.9863 409.643 mo
94.6387 409.839 95.3955 410.108 96.1836 410.464 cv
93.2666 413.979 81.2148 425.039 44.7373 425.946 cv
44.7686 425.147 44.8145 424.257 44.8779 423.323 cv
77.6553 422.462 89.9355 413.147 93.4902 409.514 cv
93.6553 409.557 93.833 409.597 93.9863 409.643 cv
cp
f
81.6982 406.619 mo
81.6982 407.081 82.0713 407.455 82.5342 407.455 cv
82.9961 407.455 83.3701 407.081 83.3701 406.619 cv
83.3701 406.156 82.9961 405.783 82.5342 405.783 cv
82.0713 405.783 81.6982 406.156 81.6982 406.619 cv
cp
f
80.3682 407.455 mo
80.3682 407.917 80.7432 408.291 81.2041 408.291 cv
81.668 408.291 82.042 407.917 82.042 407.455 cv
82.042 406.992 81.668 406.619 81.2041 406.619 cv
80.7432 406.619 80.3682 406.992 80.3682 407.455 cv
cp
f
79.04 408.291 mo
79.04 408.753 79.4141 409.128 79.876 409.128 cv
80.3389 409.128 80.7119 408.753 80.7119 408.291 cv
80.7119 407.828 80.3389 407.455 79.876 407.455 cv
79.4141 407.455 79.04 407.828 79.04 408.291 cv
cp
f
77.71 409.127 mo
77.71 409.589 78.0859 409.963 78.5479 409.963 cv
79.0107 409.963 79.3838 409.589 79.3838 409.127 cv
79.3838 408.664 79.0107 408.291 78.5479 408.291 cv
78.0859 408.291 77.71 408.664 77.71 409.127 cv
cp
f
76.3828 409.963 mo
76.3828 410.425 76.7559 410.8 77.2188 410.8 cv
77.6826 410.8 78.0566 410.425 78.0566 409.963 cv
78.0566 409.5 77.6826 409.127 77.2188 409.127 cv
76.7559 409.127 76.3828 409.5 76.3828 409.963 cv
cp
f
75.0547 410.799 mo
75.0547 411.261 75.4277 411.636 75.8906 411.636 cv
76.3525 411.636 76.7266 411.261 76.7266 410.799 cv
76.7266 410.336 76.3525 409.963 75.8906 409.963 cv
75.4277 409.963 75.0547 410.336 75.0547 410.799 cv
cp
f
66.3672 406.619 mo
66.3672 407.081 65.9922 407.455 65.5313 407.455 cv
65.0684 407.455 64.6934 407.081 64.6934 406.619 cv
64.6934 406.156 65.0684 405.783 65.5313 405.783 cv
65.9922 405.783 66.3672 406.156 66.3672 406.619 cv
cp
f
67.6953 407.455 mo
67.6953 407.917 67.3213 408.291 66.8594 408.291 cv
66.3965 408.291 66.0234 407.917 66.0234 407.455 cv
66.0234 406.992 66.3965 406.619 66.8594 406.619 cv
67.3213 406.619 67.6953 406.992 67.6953 407.455 cv
cp
f
69.0254 408.291 mo
69.0254 408.753 68.6494 409.128 68.1875 409.128 cv
67.7246 409.128 67.3516 408.753 67.3516 408.291 cv
67.3516 407.828 67.7246 407.455 68.1875 407.455 cv
68.6494 407.455 69.0254 407.828 69.0254 408.291 cv
cp
f
70.3525 409.127 mo
70.3525 409.589 69.9795 409.963 69.5166 409.963 cv
69.0547 409.963 68.6787 409.589 68.6787 409.127 cv
68.6787 408.664 69.0547 408.291 69.5166 408.291 cv
69.9795 408.291 70.3525 408.664 70.3525 409.127 cv
cp
f
71.6807 409.963 mo
71.6807 410.425 71.3076 410.8 70.8467 410.8 cv
70.3828 410.8 70.0088 410.425 70.0088 409.963 cv
70.0088 409.5 70.3828 409.127 70.8467 409.127 cv
71.3076 409.127 71.6807 409.5 71.6807 409.963 cv
cp
f
73.0107 410.799 mo
73.0107 411.261 72.6357 411.636 72.1748 411.636 cv
71.7119 411.636 71.3369 411.261 71.3369 410.799 cv
71.3369 410.336 71.7119 409.963 72.1748 409.963 cv
72.6357 409.963 73.0107 410.336 73.0107 410.799 cv
cp
f
72.5928 412.146 mo
72.5928 413.351 73.2363 414.327 74.0313 414.327 cv
74.8271 414.327 75.4707 413.351 75.4707 412.146 cv
75.4707 410.94 74.8271 409.963 74.0313 409.963 cv
73.2363 409.963 72.5928 410.94 72.5928 412.146 cv
cp
f
74.0313 413.805 mo
74.4648 413.805 74.9492 413.124 74.9492 412.146 cv
74.9492 411.168 74.4648 410.486 74.0313 410.486 cv
73.5986 410.486 73.1143 411.168 73.1143 412.146 cv
73.1143 413.124 73.5986 413.805 74.0313 413.805 cv
cp
f
138.2 209.749 mo
139.109 203.764 139.866 201.499 148.17 200.538 cv
151.313 200.175 159.866 199.294 163.048 197.477 cv
166.23 195.658 165.723 186.567 165.723 186.567 cv
174.411 186.567 li
183.1 186.567 li
183.1 186.567 182.593 195.658 185.775 197.477 cv
188.957 199.294 197.511 200.175 200.653 200.538 cv
208.956 201.499 209.714 203.764 210.622 209.749 cv
211.353 214.545 211.381 220.961 211.381 220.961 cv
174.411 220.961 li
137.442 220.961 li
137.442 220.961 137.471 214.545 138.2 209.749 cv
cp
1 1 1 rgb
f
185.012 196.829 mo
185.012 196.829 li
179.26 196.966 169.563 195.59 165.633 190.782 cv
165.634 190.773 165.634 190.767 165.634 190.759 cv
165.707 189.917 165.739 189.122 165.747 188.454 cv
165.747 188.452 165.747 188.45 165.747 188.448 cv
165.751 188.229 165.753 188.024 165.752 187.836 cv
165.751 187.827 165.751 187.82 165.751 187.813 cv
165.751 187.628 165.749 187.46 165.746 187.312 cv
165.745 187.304 165.745 187.298 165.745 187.29 cv
165.744 187.143 165.741 187.015 165.737 186.909 cv
165.737 186.906 165.737 186.904 165.737 186.902 cv
165.733 186.796 165.729 186.713 165.728 186.658 cv
165.727 186.647 165.727 186.649 165.727 186.64 cv
165.725 186.596 165.723 186.567 165.723 186.567 cv
174.411 186.567 li
183.1 186.567 li
183.1 186.567 182.681 194.113 185.012 196.829 cv
cp
f
154.848 163.867 mo
155.233 163.867 li
155.069 162.539 154.904 161.23 154.743 159.992 cv
153.906 153.575 152.022 134.822 174.411 134.822 cv
196.801 134.822 194.917 153.575 194.08 159.992 cv
193.919 161.23 193.753 162.539 193.589 163.867 cv
193.975 163.867 li
197.382 161.349 197.669 167.931 196.248 170.18 cv
195.07 172.044 195.045 172.245 194.336 174.295 cv
193.813 175.809 192.94 176.007 192.215 175.844 cv
192.122 176.738 192.045 177.52 191.988 178.143 cv
191.674 181.602 183.358 188.533 181.474 190.702 cv
179.708 192.733 176.763 191.942 175.819 191.898 cv
174.865 191.854 174.411 191.831 174.411 191.831 cv
174.411 191.831 173.957 191.854 173.004 191.898 cv
172.061 191.942 169.115 192.733 167.349 190.702 cv
165.465 188.533 157.149 181.602 156.836 178.143 cv
156.779 177.52 156.701 176.738 156.609 175.843 cv
155.883 176.007 155.011 175.809 154.487 174.295 cv
153.778 172.245 153.753 172.044 152.575 170.18 cv
151.153 167.931 151.44 161.349 154.848 163.867 cv
cp
f
174.411 149.914 mo
174.411 149.914 178.194 150.161 180.397 148.04 cv
182.604 145.918 189.216 146.971 191.11 151.827 cv
192.999 156.675 192.055 168.948 192.055 168.948 cv
192.055 168.948 199.054 149.739 192.055 143.355 cv
185.055 136.971 174.411 139.61 174.411 139.61 cv
174.411 149.914 li
cp
.2 .2 .2 rgb
f
174.411 149.914 mo
174.411 149.914 170.629 150.161 168.426 148.04 cv
166.22 145.918 159.607 146.971 157.713 151.827 cv
155.823 156.675 156.768 168.948 156.768 168.948 cv
156.768 168.948 149.77 149.739 156.768 143.355 cv
163.769 136.971 174.411 139.61 174.411 139.61 cv
174.411 149.914 li
cp
f
165.633 134.822 mo
165.633 134.822 168.082 129.858 178.083 131.222 cv
188.082 132.586 189.068 134.822 192.78 133.948 cv
192.78 133.948 194.408 136.789 195.166 140.426 cv
196.638 147.488 196.622 154.778 193.642 163.454 cv
192.055 143.355 li
180.59 143.798 li
167.022 143.646 li
165.633 134.822 li
cp
f
166.328 133.896 mo
166.328 133.896 164.035 132.736 159.295 134.822 cv
154.987 136.72 151.323 141.65 153.945 157.118 cv
164.035 142.357 li
170.205 141.448 li
166.328 133.896 li
cp
f
138.2 209.749 mo
139.109 203.764 139.866 201.499 148.17 200.538 cv
149.392 200.397 151.433 200.176 153.657 199.854 cv
153.657 199.854 155.2 208.254 171.682 208.146 cv
174.411 218.41 li
177.142 208.146 li
193.623 208.254 195.166 199.854 195.166 199.854 cv
197.39 200.176 199.432 200.397 200.653 200.538 cv
208.956 201.499 209.714 203.764 210.622 209.749 cv
211.353 214.545 211.381 220.961 211.381 220.961 cv
175.09 220.961 li
173.733 220.961 li
137.442 220.961 li
137.442 220.961 137.471 214.545 138.2 209.749 cv
cp
f
147.412 104.61 mo
148.284 98.8647 153.202 96.6406 156.111 95.7686 cv
159.021 94.896 163.85 94.5742 166.903 92.8291 cv
169.958 91.084 169.471 82.356 169.471 82.356 cv
176.066 82.356 li
182.662 82.356 li
182.662 82.356 182.177 91.084 185.229 92.8291 cv
188.285 94.5742 193.111 94.896 196.021 95.7686 cv
198.932 96.6406 203.849 98.8647 204.721 104.61 cv
205.421 109.215 205.448 115.374 205.448 115.374 cv
176.066 115.374 li
146.685 115.374 li
146.685 115.374 146.713 109.215 147.412 104.61 cv
cp
1 1 1 rgb
f
183.24 89.46 mo
183.24 89.4609 183.24 89.4629 183.24 89.4639 cv
179.692 88.7998 172.83 86.6108 169.496 84.1084 cv
169.5 83.8477 169.5 83.6089 169.498 83.3965 cv
169.498 83.3896 169.498 83.3853 169.498 83.3779 cv
169.497 83.2837 169.496 83.1948 169.494 83.1113 cv
169.494 83.0933 169.494 83.0757 169.494 83.0571 cv
169.493 82.9858 169.491 82.9199 169.489 82.8589 cv
169.489 82.8433 169.488 82.8296 169.487 82.814 cv
169.485 82.7544 169.484 82.7017 169.483 82.6548 cv
169.482 82.6416 169.482 82.6299 169.482 82.6167 cv
169.481 82.5723 169.479 82.5327 169.478 82.4985 cv
169.478 82.4902 169.478 82.4829 169.477 82.4751 cv
169.476 82.4448 169.474 82.4224 169.473 82.4043 cv
169.472 82.3755 169.471 82.356 169.471 82.356 cv
176.066 82.356 li
182.662 82.356 li
182.662 82.356 182.441 86.3369 183.24 89.46 cv
cp
f
157.286 60.5649 mo
157.286 60.5649 154.501 48.6777 157.739 42.0659 cv
161.231 34.9385 166.468 30.8662 176.066 30.8662 cv
185.667 30.8662 190.903 34.9385 194.395 42.0659 cv
197.633 48.6777 194.848 60.5649 194.848 60.5649 cv
199.211 59.6919 198.394 64.4653 197.03 66.625 cv
195.899 68.4141 195.876 68.6064 195.194 70.5747 cv
194.212 73.4106 191.958 71.4473 191.958 71.4473 cv
190.648 75.0845 189.72 75.9438 184.502 80.7563 cv
179.958 84.9502 178.363 84.9019 176.066 84.9019 cv
173.77 84.9019 172.212 84.9502 167.63 80.7563 cv
162.395 75.9639 161.484 75.0845 160.175 71.4473 cv
160.175 71.4473 157.923 73.4106 156.94 70.5747 cv
156.258 68.6064 156.234 68.4141 155.104 66.625 cv
153.739 64.4653 152.923 59.6919 157.286 60.5649 cv
cp
f
177.801 26.2007 mo
177.801 26.2007 179.265 8.94922 161.05 9.77783 cv
143.866 10.5601 154.351 30.6245 148.126 31.5605 cv
144.309 32.1348 144.181 28.3599 139.681 26.3086 cv
135.648 24.4702 130.557 27.8115 129.573 34.0649 cv
127.658 46.2031 129.939 54.7969 123.311 48.8813 cv
123.311 48.8813 123.925 53.6938 127.322 54.7368 cv
130.118 55.5952 133.385 54.5269 134.633 49.7656 cv
137.404 39.2148 143.807 42.667 145.749 46.5249 cv
148.797 52.5737 161.019 51.1699 161.675 42.0371 cv
162.665 28.2314 170.064 24.0698 173.059 28.4106 cv
177.801 26.2007 li
cp
.2 .2 .2 rgb
f
176.367 28.5439 mo
206.701 29.6592 194.848 60.5649 194.848 60.5649 cv
194.275 62.5898 193.432 65.1636 193.432 65.1636 cv
193.406 62.4551 191.224 59.748 188.977 57.6724 cv
187.72 56.9463 186.513 56.186 185.367 55.4111 cv
186.124 56.8926 186.747 57.8838 186.747 57.8838 cv
179.256 54.5547 175.395 49.4834 173.409 47.0522 cv
172.068 49.8301 167.66 53.9482 163.255 56.7095 cv
160.975 58.7969 158.729 62.416 158.703 65.1636 cv
158.703 65.1636 157.859 62.5898 157.288 60.5649 cv
157.288 60.5649 157.288 60.5649 157.288 60.564 cv
157.288 60.5649 157.286 60.5649 157.286 60.5649 cv
157.286 60.5649 146.034 29.6592 176.367 28.5439 cv
cp
f
170.004 27.9688 mo
170.004 29.1582 171.226 30.1206 172.73 30.1206 cv
176.318 30.1206 li
177.824 30.1206 179.045 29.1582 179.045 27.9688 cv
179.045 27.9688 li
179.045 26.7803 177.824 25.8169 176.318 25.8169 cv
172.73 25.8169 li
171.226 25.8169 170.004 26.7803 170.004 27.9688 cv
170.004 27.9688 li
cp
1 1 1 rgb
f
163.299 106.047 mo
188.954 106.047 li
185.59 107.758 181.358 109.03 176.187 109.03 cv
176.187 109.069 li
176.186 109.03 li
170.965 109.03 166.692 107.758 163.299 106.047 cv
cp
194.084 102.666 mo
193.224 103.381 192.254 104.104 191.163 104.792 cv
161.066 104.792 li
159.968 104.104 158.988 103.381 158.12 102.666 cv
194.084 102.666 li
cp
146.685 115.374 mo
176.066 115.374 li
205.448 115.374 li
205.448 115.374 205.421 109.215 204.721 104.61 cv
204.121 100.66 201.609 98.374 199.151 97.0479 cv
199.15 97.0488 198.36 98.3823 196.726 100.158 cv
155.453 100.158 li
153.802 98.3823 153.005 97.0479 153.005 97.0479 cv
153.005 97.0479 152.995 97.043 152.993 97.042 cv
150.533 98.3672 148.013 100.653 147.412 104.61 cv
146.713 109.215 146.685 115.374 146.685 115.374 cv
cp
.2 .2 .2 rgb
f
243.174 104.4 mo
244.082 98.4155 244.84 96.1509 253.145 95.1899 cv
256.287 94.8267 264.84 93.9463 268.021 92.1279 cv
271.204 90.3101 270.696 81.2192 270.696 81.2192 cv
279.386 81.2192 li
288.074 81.2192 li
288.074 81.2192 287.566 90.3101 290.749 92.1279 cv
293.931 93.9463 302.483 94.8267 305.627 95.1899 cv
313.931 96.1509 314.688 98.4155 315.598 104.4 cv
316.326 109.196 316.354 115.612 316.354 115.612 cv
279.386 115.612 li
242.416 115.612 li
242.416 115.612 242.444 109.196 243.174 104.4 cv
cp
1 1 1 rgb
f
289.987 91.4805 mo
289.987 91.4805 li
284.234 91.6177 274.536 90.2417 270.607 85.4336 cv
270.607 85.4253 270.607 85.418 270.608 85.4106 cv
270.682 84.5688 270.712 83.7734 270.722 83.106 cv
270.722 83.104 270.722 83.1021 270.722 83.1006 cv
270.726 82.8804 270.726 82.6758 270.726 82.4873 cv
270.726 82.479 270.726 82.4717 270.726 82.4644 cv
270.725 82.2793 270.723 82.1118 270.721 81.9629 cv
270.721 81.9556 270.721 81.9492 270.721 81.9419 cv
270.718 81.7944 270.714 81.666 270.71 81.5605 cv
270.71 81.5581 270.71 81.5562 270.71 81.5542 cv
270.706 81.4478 270.703 81.3647 270.701 81.3101 cv
270.701 81.2988 270.701 81.3008 270.7 81.2915 cv
270.697 81.2471 270.696 81.2192 270.696 81.2192 cv
279.386 81.2192 li
288.074 81.2192 li
288.074 81.2192 287.653 88.7646 289.987 91.4805 cv
cp
f
259.821 58.519 mo
260.208 58.519 li
260.044 57.1904 259.878 55.8818 259.717 54.6436 cv
258.88 48.2266 256.996 29.4741 279.386 29.4741 cv
301.774 29.4741 299.891 48.2266 299.054 54.6436 cv
298.893 55.8818 298.727 57.1904 298.563 58.519 cv
298.949 58.519 li
302.355 56 302.644 62.5825 301.222 64.8315 cv
300.044 66.6958 300.019 66.8965 299.31 68.9468 cv
298.785 70.46 297.915 70.6587 297.188 70.4961 cv
297.097 71.3901 297.019 72.1714 296.962 72.7939 cv
296.647 76.2534 288.332 83.1846 286.448 85.354 cv
284.682 87.3848 281.736 86.5942 280.793 86.5498 cv
279.84 86.5054 279.386 86.4824 279.386 86.4824 cv
279.386 86.4824 278.932 86.5054 277.978 86.5498 cv
277.034 86.5942 274.089 87.3848 272.323 85.354 cv
270.438 83.1846 262.123 76.2534 261.81 72.7939 cv
261.752 72.1714 261.675 71.3901 261.582 70.4951 cv
260.856 70.6587 259.985 70.4609 259.461 68.9468 cv
258.752 66.8965 258.727 66.6958 257.549 64.8315 cv
256.128 62.5825 256.415 56 259.821 58.519 cv
cp
f
260.583 56.394 mo
260.583 57.5308 262.626 66.4917 262.97 69.3491 cv
263.622 74.7793 267.515 77.3032 268.651 78.5532 cv
269.787 79.8027 273.537 81.0532 275.129 81.6216 cv
276.72 82.1895 282.052 82.1895 283.642 81.6216 cv
285.233 81.0532 288.983 79.8027 290.119 78.5532 cv
291.256 77.3032 295.148 74.7793 295.801 69.3491 cv
296.145 66.4917 298.188 57.5308 298.188 56.394 cv
298.188 55.6396 298.553 55.9141 298.778 56.7891 cv
298.706 57.3604 298.636 57.9365 298.563 58.519 cv
298.563 58.519 297.394 70.542 297.188 70.4961 cv
297.097 71.3901 297.019 72.1714 296.962 72.7939 cv
296.935 73.0942 296.829 73.4292 296.69 73.7759 cv
296.268 74.4355 295.61 75.5073 294.777 76.7852 cv
292.093 80.1079 287.745 83.8604 286.448 85.354 cv
284.682 87.3848 281.736 86.5942 280.793 86.5498 cv
279.84 86.5054 279.386 86.4824 279.386 86.4824 cv
279.386 86.4824 278.932 86.5054 277.978 86.5498 cv
277.034 86.5942 274.089 87.3848 272.323 85.354 cv
271.025 83.8604 266.678 80.1079 263.993 76.7852 cv
263.16 75.5073 262.503 74.4355 262.08 73.7759 cv
261.941 73.4292 261.836 73.0942 261.809 72.7939 cv
261.752 72.1714 261.674 71.3901 261.582 70.4961 cv
261.377 70.542 260.208 58.519 260.208 58.519 cv
260.136 57.9365 260.064 57.3604 259.992 56.7891 cv
260.218 55.9141 260.583 55.6396 260.583 56.394 cv
cp
.2 .2 .2 rgb
f
273.444 75.5703 mo
275.948 73.2979 279.386 72.6914 279.386 72.6914 cv
279.386 72.6914 282.822 73.2979 285.326 75.5703 cv
287.83 77.8433 285.326 81.9336 285.326 81.9336 cv
284.774 81.2192 li
287.476 75.7456 279.386 75.4185 279.386 75.4185 cv
279.386 75.4185 271.296 75.7456 273.996 81.2192 cv
273.444 81.9336 li
273.444 81.9336 270.94 77.8433 273.444 75.5703 cv
cp
f
277.564 81.6309 mo
278.348 80.8726 279.386 80.9966 279.386 80.9966 cv
279.386 80.9966 280.423 80.8726 281.206 81.6309 cv
281.989 82.3892 283.652 81.8296 283.652 81.8296 cv
280.297 84.5854 li
279.386 83.6768 li
278.474 84.5854 li
275.118 81.8296 li
275.118 81.8296 276.781 82.3892 277.564 81.6309 cv
cp
f
263.425 24.6616 mo
263.425 24.6616 262.521 27.1855 281.611 27.1855 cv
281.619 27.1855 281.627 27.1865 281.637 27.1865 cv
282.027 27.1865 282.459 27.1982 282.926 27.2241 cv
301.195 28.0259 300.196 45.4189 300.196 45.4189 cv
300.173 45.4063 li
300.313 49.7773 299.405 54.1543 298.563 58.519 cv
298.188 56.394 li
298.188 56.394 297.991 54.2847 297.152 51.7129 cv
297.107 51.5723 297.057 51.4438 297.012 51.3071 cv
296.763 50.5933 296.461 49.8535 296.104 49.1143 cv
291.137 39.2222 279.386 42.4478 279.386 42.4478 cv
279.386 42.4478 267.623 39.2192 262.662 49.1284 cv
262.313 49.8486 262.019 50.5708 261.774 51.27 cv
261.722 51.4224 261.665 51.5679 261.616 51.7251 cv
260.779 54.291 260.583 56.394 260.583 56.394 cv
260.208 58.519 li
259.681 55.7856 259.126 53.0464 258.817 50.3066 cv
258.815 50.2896 258.813 50.2759 258.811 50.2593 cv
256.743 35.7227 263.425 24.6616 263.425 24.6616 cv
cp
f
267.67 91.0181 mo
267.67 89.3193 268.449 87.9414 270.652 87.9414 cv
270.652 87.9414 273.681 88.7056 279.332 88.6807 cv
283.652 88.6602 288.119 87.9414 288.119 87.9414 cv
290.323 87.9414 291.103 89.3193 291.103 91.0181 cv
291.103 91.0181 li
291.103 92.7178 291.232 94.0957 289.028 94.0957 cv
289.028 94.0957 283.112 94.835 279.174 94.835 cv
275.118 94.835 269.744 94.0957 269.744 94.0957 cv
267.54 94.0957 267.67 92.7178 267.67 91.0181 cv
267.67 91.0181 li
cp
f
243.174 104.4 mo
244.082 98.4155 244.84 96.1509 253.145 95.1899 cv
256.236 94.832 264.557 93.9722 267.854 92.2119 cv
268.084 92.8105 268.596 94.0957 269.744 94.0957 cv
269.744 94.0957 275.118 95.7437 279.174 95.7437 cv
283.112 95.7437 289.028 94.0957 289.028 94.0957 cv
290.176 94.0957 290.688 92.8115 290.917 92.2129 cv
294.216 93.9722 302.534 94.832 305.627 95.1899 cv
313.931 96.1509 314.688 98.4155 315.598 104.4 cv
316.326 109.196 316.354 115.612 316.354 115.612 cv
279.386 115.612 li
242.416 115.612 li
242.416 115.612 242.444 109.196 243.174 104.4 cv
cp
f
261.586 94.0229 mo
261.586 94.0229 li
264.062 93.5649 266.429 92.9731 267.854 92.2119 cv
268.084 92.8105 268.596 93.187 269.744 93.187 cv
269.744 93.187 275.118 93.9258 279.174 93.9258 cv
283.112 93.9258 289.028 93.187 289.028 93.187 cv
290.176 93.187 290.688 92.8115 290.917 92.2129 cv
292.344 92.9741 294.711 93.5649 297.186 94.0229 cv
297.186 94.0229 li
279.386 113.358 li
261.586 94.0229 li
cp
1 1 1 rgb
f
350.548 103.815 mo
351.421 98.0688 356.338 95.8457 359.247 94.9727 cv
362.156 94.1006 366.984 93.7798 370.039 92.0337 cv
373.094 90.2876 372.607 81.5615 372.607 81.5615 cv
379.202 81.5615 li
385.799 81.5615 li
385.799 81.5615 385.312 90.2876 388.366 92.0337 cv
391.421 93.7798 396.249 94.1006 399.158 94.9727 cv
402.067 95.8457 406.984 98.0688 407.856 103.815 cv
408.557 108.418 408.584 114.579 408.584 114.579 cv
379.202 114.579 li
349.821 114.579 li
349.821 114.579 349.849 108.418 350.548 103.815 cv
cp
f
386.375 88.6646 mo
386.375 88.6655 386.375 88.6675 386.375 88.6675 cv
382.828 88.0034 375.967 85.8154 372.632 83.313 cv
372.635 83.0522 372.636 82.814 372.635 82.6011 cv
372.635 82.5957 372.634 82.5898 372.634 82.5825 cv
372.633 82.4883 372.632 82.3994 372.63 82.3164 cv
372.63 82.2979 372.629 82.2803 372.629 82.2617 cv
372.627 82.1904 372.627 82.1255 372.626 82.064 cv
372.625 82.0479 372.624 82.0332 372.624 82.0186 cv
372.622 81.9595 372.621 81.9077 372.619 81.8594 cv
372.618 81.8467 372.618 81.8345 372.618 81.8213 cv
372.616 81.7764 372.614 81.7373 372.613 81.7031 cv
372.613 81.6948 372.612 81.6875 372.612 81.6792 cv
372.61 81.6494 372.609 81.6274 372.609 81.6089 cv
372.607 81.5801 372.607 81.5615 372.607 81.5615 cv
379.202 81.5615 li
385.799 81.5615 li
385.799 81.5615 385.578 85.542 386.375 88.6646 cv
cp
f
360.421 59.7695 mo
360.421 59.7695 357.637 47.8828 360.876 41.271 cv
364.366 34.144 369.603 30.0708 379.202 30.0708 cv
388.803 30.0708 394.038 34.144 397.529 41.271 cv
400.769 47.8828 397.984 59.7695 397.984 59.7695 cv
402.347 58.8965 401.529 63.6704 400.165 65.8291 cv
399.034 67.6187 399.011 67.8115 398.33 69.7793 cv
397.349 72.6152 395.093 70.6523 395.093 70.6523 cv
393.784 74.2886 392.855 75.1484 387.639 79.9619 cv
383.094 84.1548 381.499 84.1064 379.202 84.1064 cv
376.905 84.1064 375.348 84.1548 370.767 79.9619 cv
365.53 75.1694 364.621 74.2886 363.312 70.6523 cv
363.312 70.6523 361.057 72.6152 360.074 69.7793 cv
359.394 67.8115 359.37 67.6187 358.24 65.8291 cv
356.875 63.6704 356.058 58.8965 360.421 59.7695 cv
cp
f
350.548 103.815 mo
351.421 98.0688 356.338 95.8457 359.247 94.9727 cv
361.123 94.4102 363.793 94.0718 366.274 93.4385 cv
366.281 93.4395 li
373.675 97.0513 li
379.202 105.343 li
384.729 97.0513 li
392.123 93.4395 li
392.13 93.4385 li
394.612 94.0718 397.282 94.4102 399.158 94.9727 cv
402.067 95.8457 406.984 98.0688 407.856 103.815 cv
408.557 108.418 408.584 114.579 408.584 114.579 cv
379.202 114.579 li
349.821 114.579 li
349.821 114.579 349.849 108.418 350.548 103.815 cv
cp
.2 .2 .2 rgb
f
371.061 45.2417 mo
371.061 45.2417 370.716 49.749 378.167 54.7749 cv
378.167 54.7749 376.088 52.6953 375.741 50.0083 cv
375.741 50.0083 377.259 53.6538 384.233 55.2944 cv
384.233 55.2944 380.768 53.9507 380.768 52.2617 cv
380.768 52.2617 390.516 53.4312 392.336 58.3701 cv
394.155 63.3101 395.585 66.1689 392.336 69.6787 cv
389.085 73.189 391.556 76.3091 392.466 80.5972 cv
393.375 84.8872 392.128 86.0234 391.036 87.6162 cv
389.433 89.9556 391.339 92.9028 391.339 92.9028 cv
391.339 92.9028 389.605 90.4771 392.866 88.353 cv
394.231 87.4644 396.364 86.1855 395.585 81.7671 cv
394.805 77.3486 395.716 73.7085 397.404 72.1484 cv
399.095 70.5884 403.254 67.9893 401.954 62.1401 cv
400.653 56.2905 400.653 55.1206 401.304 52.521 cv
401.954 49.9219 403.514 40.5625 396.625 34.8438 cv
389.736 29.1245 380.979 25.0947 371.059 29.3843 cv
371.061 45.2417 li
cp
f
371.059 45.9355 mo
371.059 45.9355 372.794 48.7075 370.021 51.4814 cv
367.249 54.2549 363.955 57.2002 364.475 63.2661 cv
364.996 69.3311 367.249 71.4116 365.342 74.5317 cv
363.436 77.6519 361.97 78.519 363.05 81.2905 cv
364.129 84.0649 363.76 85.1035 362.558 87.0112 cv
361.356 88.917 362.558 91.5156 362.558 91.5156 cv
362.558 91.5156 360.317 88.917 361.01 86.3169 cv
361.703 83.7173 358.236 82.6787 358.41 79.2109 cv
358.584 75.7446 360.836 71.7593 358.583 67.4263 cv
357.154 64.6758 354.541 57.374 355.116 51.6548 cv
355.613 46.7163 359.623 42.2959 359.969 39.1758 cv
360.317 36.0571 363.777 29.2979 371.059 29.3843 cv
371.059 45.9355 li
cp
f
37.8184 104.133 mo
38.7275 98.1484 39.4863 95.8843 47.791 94.9229 cv
50.9326 94.5581 59.4863 93.6797 62.668 91.8618 cv
65.8496 90.0435 65.3428 80.9512 65.3428 80.9512 cv
74.0313 80.9512 li
82.7197 80.9512 li
82.7197 80.9512 82.2129 90.0435 85.3955 91.8618 cv
88.5762 93.6797 97.1299 94.5581 100.271 94.9229 cv
108.576 95.8843 109.335 98.1484 110.243 104.133 cv
110.972 108.929 111.001 115.345 111.001 115.345 cv
74.0313 115.345 li
37.0625 115.345 li
37.0625 115.345 37.0898 108.929 37.8184 104.133 cv
cp
1 1 1 rgb
f
84.6328 91.2144 mo
84.6328 91.2144 li
78.8799 91.3511 69.1826 89.9751 65.2529 85.1665 cv
65.2529 85.1592 65.2529 85.1514 65.2549 85.144 cv
65.3281 84.3008 65.3574 83.5054 65.3682 82.8379 cv
65.3682 82.8359 65.3682 82.8359 65.3682 82.834 cv
65.3721 82.6138 65.3721 82.4087 65.3721 82.2202 cv
65.3721 82.2129 65.3721 82.2051 65.3721 82.1958 cv
65.3701 82.0127 65.3691 81.8447 65.3662 81.6968 cv
65.3662 81.6895 65.3662 81.6816 65.3662 81.6743 cv
65.3633 81.5264 65.3594 81.3989 65.3555 81.2935 cv
65.3555 81.2915 65.3555 81.2896 65.3555 81.2861 cv
65.3516 81.1807 65.3477 81.0972 65.3477 81.042 cv
65.3477 81.0327 65.3477 81.0347 65.3467 81.0254 cv
65.3438 80.981 65.3428 80.9512 65.3428 80.9512 cv
74.0313 80.9512 li
82.7197 80.9512 li
82.7197 80.9512 82.2998 88.4976 84.6328 91.2144 cv
cp
f
54.4678 58.2524 mo
54.8535 58.2524 li
54.6904 56.9233 54.5244 55.6152 54.3623 54.377 cv
53.5264 47.96 51.6416 29.2075 74.0313 29.2075 cv
96.4199 29.2075 94.5371 47.96 93.6992 54.377 cv
93.5391 55.6152 93.3721 56.9233 93.209 58.2524 cv
93.5947 58.2524 li
97.001 55.7334 97.2891 62.3159 95.8672 64.5649 cv
94.6895 66.4292 94.665 66.6299 93.9561 68.6792 cv
93.4316 70.1929 92.5605 70.3916 91.835 70.229 cv
91.7432 71.1226 91.6641 71.9048 91.6074 72.5269 cv
91.293 75.9873 82.9775 82.9175 81.0928 85.0869 cv
79.3281 87.1177 76.3828 86.3276 75.4385 86.2837 cv
74.4844 86.2393 74.0313 86.2148 74.0313 86.2148 cv
74.0313 86.2148 73.5771 86.2393 72.624 86.2837 cv
71.6807 86.3276 68.7344 87.1177 66.9688 85.0869 cv
65.084 82.9175 56.7686 75.9873 56.4561 72.5269 cv
56.3984 71.9048 56.3203 71.1226 56.2285 70.228 cv
55.5029 70.3916 54.6318 70.1938 54.1064 68.6792 cv
53.3975 66.6299 53.3721 66.4292 52.1943 64.5649 cv
50.7734 62.3159 51.0605 55.7334 54.4678 58.2524 cv
cp
f
53.4629 47.9619 mo
53.8438 43.8882 55.1943 39.3789 55.6602 38.1138 cv
56.3867 36.1411 54.8838 34.5313 54.8838 34.5313 cv
54.8838 34.5313 56.6055 33.71 59.4092 31.5293 cv
62.2119 29.3491 67.04 29.6606 67.04 29.6606 cv
65.4834 29.6606 64.2373 27.9478 64.2373 27.9478 cv
65.4834 28.5703 73.2705 26.6763 77.4756 26.8315 cv
81.6816 26.9878 84.9531 31.1929 84.9531 31.1929 cv
84.9531 31.1929 89.0684 30.5752 91.8828 35.1973 cv
96.4688 42.7295 93.9121 57.7437 93.9121 57.7437 cv
91.4482 60.0317 91.3438 64.1284 91.3438 64.1284 cv
91.3438 64.1284 91.5137 60.8521 90.4355 56.8691 cv
89.0684 51.8252 83.4766 49.0732 83.4766 49.0732 cv
83.9434 50.4751 87.9424 53.4087 87.9424 53.4087 cv
86.3018 53.292 80.29 50.2393 78.3115 49.1851 cv
77.6592 48.8364 77.2461 48.6064 77.2461 48.6064 cv
77.3701 48.8281 77.583 49.0537 77.8418 49.2778 cv
79.2139 50.4624 81.165 51.5645 81.165 51.5645 cv
80.0166 51.4971 77.7256 50.5796 75.498 49.5625 cv
72.5908 48.2344 70.7041 46.7363 70.7041 46.7363 cv
71.5195 48.1338 73.7266 49.3564 74.79 49.8862 cv
74.6641 49.9102 74.542 49.9341 74.418 49.96 cv
69.8164 48.8457 66.8115 46.1138 66.8115 46.1138 cv
67.123 47.6714 68.4717 48.709 68.4717 48.709 cv
67.4199 48.3223 65.2803 47.5825 63.6895 45.9917 cv
61.9902 44.292 61.1826 44.5576 60.3242 45.0664 cv
58.4814 46.1572 58.2148 49.397 57.8184 51.8252 cv
56.7871 58.1626 57.3086 64.1284 57.3086 64.1284 cv
55.3184 57.8389 54.1953 58.0044 54.1953 58.0044 cv
53.8223 55.7695 53.0078 52.8091 53.4629 47.9619 cv
cp
.2 .2 .2 rgb
f
37.8184 104.133 mo
38.7275 98.1484 39.4863 95.8843 47.791 94.9229 cv
50.9326 94.5581 59.4863 93.6797 62.668 91.8618 cv
63.498 91.3862 64.0752 90.4155 64.4766 89.2427 cv
74.0146 91.2236 li
83.583 89.2354 li
83.583 89.2354 li
83.9863 90.4116 84.5625 91.3862 85.3955 91.8618 cv
88.5762 93.6797 97.1299 94.5581 100.271 94.9229 cv
108.576 95.8843 109.335 98.1484 110.243 104.133 cv
110.972 108.929 111.001 115.345 111.001 115.345 cv
74.0313 115.345 li
37.0625 115.345 li
37.0625 115.345 37.0898 108.929 37.8184 104.133 cv
cp
f
64.4492 89.2354 mo
74.0146 91.2236 li
67.4141 98.6606 li
63.6709 90.9146 li
63.6709 90.9146 64.1904 89.9824 64.4492 89.2354 cv
cp
f
83.582 89.2354 mo
83.582 89.2354 li
83.583 89.2354 li
83.583 89.2373 li
83.8418 89.9824 84.3594 90.9146 84.3594 90.9146 cv
80.6182 98.6567 li
80.6172 98.6606 li
80.6162 98.6606 li
80.6162 98.6606 li
80.6162 98.6606 li
74.0146 91.2236 li
83.582 89.2354 li
83.582 89.2354 li
cp
f
110.243 104.133 mo
110.972 108.929 111.001 115.345 111.001 115.345 cv
96.0986 115.345 li
96.6104 103.757 100.271 94.9229 100.271 94.9229 cv
108.576 95.8843 109.335 98.1484 110.243 104.133 cv
cp
1 1 1 rgb
f
37.7861 104.133 mo
37.0576 108.929 37.0283 115.345 37.0283 115.345 cv
51.9307 115.345 li
51.4189 103.757 47.7578 94.9229 47.7578 94.9229 cv
39.4531 95.8843 38.6943 98.1484 37.7861 104.133 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.0
%%For: (\704\740\770\740) ()
%%Title: (1410.i029.019.S.m005.c13.people avatars black and white.eps)
%%CreationDate: 10/17/2014 3:12 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2KIfC8\5^978BACmcUpI.e#M^0Vr)E%D$&6^A((m`D,rp]jZpFK=pe^-QCPMCaWAlLb>G*Y0nSM'?c.CT,UHD>U\D#^o3
%1NG"+CZP!*pu=S_mQ>@Q7GY4#b3`C44DOP447-5$m?ZJNG,Ms@/,cQXE\FF?n4>M35&*"1J*)X5C@)H+'Xlf78u!8(g7@hM0B_F+
%!nrFZq/mL"_#X76^pdLTB"oDS6N=!uFUk$fknF)YhX!bG*\7h62/u'3:Q#!XE67n4_T0@RUs\RPWkCm6om%.=(:H>sF?d@8ncpic
%N!')3^k]I@FBn2lHb>ePg^7B](3;IR;JtY!+^OBp_*fXKB8HT_SJ`i+r,9Qms5R_/YOJrbZZ?W&Zb'G]3@o(++V3L@96;kC-:#WR
%/J;cB&=m/bX1a=VBN]60c)pIWrJbV%gnBHQSrrb0_h&]5R<RK6bIOJMR/oQ8_\@N.6&9tHU-D_#:SVYfl3MhT3kbL3It=diGQ`8p
%hi'V">E'\ccQcQ5%!g7'7nmTok[%t(Oi9ADkdP5F;!jc@4cn6<Z]G#dblrk"lt-3E]D=>KFQJ&3iQamA3bZ:%Ks%q_T=96lbLrb`
%[fah!+c;k`1CYkY\R?o^kM&"\Gc\D+B#*AE0KG,R/DC?]h!$Xj)QhPT!4_E!V@_K0SOPc.>2RI+r/2-/#MMs%J&JpL$GBcqP),LV
%@Hg3CP%!EYm"dY3:Aa3EX_Is;BEe#Ai2V[=$X2Y,YDQfI\3BEHY?^U1O7ne=s(iX(",l,F(uk!^8O@85s4TA[C>8N_D=aZj$?bNL
%SqkR@KHC-4AtFe&4KhYFK8(PX#t&MB_E[<,L=e$cYo19mhq5#0_IfVWFtK!KP>V_A<%@ZWV;cdM]i)ZNPmV`p7Iu[f76DrIMI#?,
%[LM'_%lQefn2E6m]Hjr`)'XdLYmhn2^Bo*U%do:#iGX+!8E"J,MM];>,?"<+E5rb#7_E\@VCA\KRiuPA)r"=A#a8Mf`A=?YQ:re+
%c!;367Y$iOX5j"inWHnX$3.nTLa2o=TpUt$3I`@mLG,kLi[?h3UuBUT,Q>],L`jkArYCD^&H9[]La2n2B!Sp#EHq^IVj%?g]Ta\`
%3aO#Z*h+nS,]+BF7Xu9#9B2FcCrnSQ,6)'j6r;#S,"UN-F8d"r`8B4+AK>c$\o;<[NGT4mkUr]:mNa,$cbYbs`E<P-PWN&2M[TuI
%ga&&l9RU4he"12aimHa3@jHN9Hu(.mkM^[drga"F`UcQ1a_'BcJTutXrF8]bG<bhQmW/'Aqb.VQh?PUrEY$*O8DRciOuknj[\S&i
%%:#)B-ZtJA,*sgH/8+*r\Z9E_oFLs/<G@>?QGjrbJ,,_snGDu6s+BaBbFnV`s7:Yf+91GP6,;rA5g:@+It[rR'`[9E`?N'Xs7/D<
%?7n#^rlb="2u.n"Qi@rgT@!2N6i>4,jnJ<ds$[nZVrY@Q8g1_B%pH6Qd;>nq=3B)@s)f?:iIAapWI+J3=oLa3^K_'BZCL`26i?Q/
%0@L)<;SohF^?&Dt$QUU>;0Mpcm:fpgDZ[\s#0ur:])T\$0@_)!;^=i\JmAa-:+8!\LG;U)WsL?ia$Wn;f&\kE]3f#RrU0aSPD$pi
%)[KL1+FR'8_->N3/X1UH-^5s9aTd_m2]MenAS`a+R\A@hpn)@Xkm)uo!FW@#`Q(3G`@Kl?%>S;s]Fuinr1l>]5/A1-0sfAdV)lL7
%;eH=BQpfPVV#Xg:j9A&/fK=`_Tacq)LiC]X0uIFYjMG3j^d;iU,DDH`'"L?qK&di7!ofDt'5=t;Q>RVBLo_L<FZP<s(O2W`jNkW-
%fKBd6_8#K/kEEgb86M)faU3Yn\4aDnh\&*WOfq16K5Qku_R6V[=R+h"KQA8H$ol(43gT6>\FKXj2aT9U%F%7u+15KGO`k&b8B8%K
%0q=VU-n\2?6pXGX,akGBD-3YsNQu>RdZtSIQ8g+_2FlCZ6$l+>)]i[s'iCPeO<E5Dekm%&AY`3TI7!44;hD(q;+?si0anL_Um!,k
%;L:qs/VT/0HVb?B\r2VSCs4leQ;qB]5=/`kX",-Y6oq:WLpf]&0h3ohHo8/PYn[Ze(?%)=7U(U.H+_=&:aZ-;O&2dt8^2tY&E2]!
%(pdeL/sBfYlk4YsT^!86-f%s_Bdt&0W>Fo!*!(AH<E;ZTEOns'orKd'PLZL)Yjo&$Upd%pMp7`gYSH8bSgu:3/72UJpG-#FqS_e(
%G"Xt_;80CZ%G==5RFX4^B:q?T3jDs?nIEXe?#2nP>A8C`'.hu^*9tCFQeqSer?8dJ6fP.KPq_0m0TiXR.Su>*Oae,'#8fBh@"cn(
%J"EZSEER)`n=OgV`e[=tMR=@L;BlXXLFYa$d&"4FA/W&RGm/"]KL6pt-DBI7g.!Gp#)Pu@'j8ET1#iD9)ua812VkDQfj._uR[&^h
%[_(t0Yp[`#VpcMXVNB.3)cC)gV$!gcQrpk[2-8O-g,&ocL<Z@;VDOfY'ni0H+?!qM)8?Dq=>;o+/B1dEFS$-M41g3`7#b9lYp**V
%9;pW4blE:g,)c`Z=lik@dThWRVBC%em#D?0<T4"J)NI]r0JMJ2NA*hfY$d\@d2H7%?[-Al`e6Zn^Bl254M+!3`AiRJE!Fd\b9-!+
%nV6/9MUJhCiC)ZrRRkH@+3h-dVP,'=nA5JaUWH=mVlgAi=QTi/c%MN2^QQ/C@uj:Z@9NfYcC'V+Q/oQ0rgn-<"%@KhIA"3M3Y+no
%fI^*PS[<-XJ>`E\j:('^7YH>4O=,O2h$Jb="E@6j5F"F@OEpY!b_&bC;8+B^G-kU(W6STMB8cf4^e'@,-k/8j-2CkG(J4QL2l?M8
%/5?+W\k\kT.A"FAK79B"&Nk!%acP:!TkT_E/F@)SSX/u;e2;*!J_@C/N1'W"J&QjIbfe8&9)38O4\i./?Rk!D?02gIk#;#!HUo)n
%NQb--0oip`A\5ro`;+JbM+#c@:2!AaF]'T!b>E%m6h5<CVr\bM9OON/3'A9/niN/E5HH>_o`:uF6JVg6^c45=Bh=l3+.;t_%Hgiu
%Tn16rEFMX(+_HTF4r$WoGV??-$!j`@e*QV12n;R)%M=[4N)PJ8UrQFZh*Rfs.kJJp.m$;^"c9euI*1J^9%%?CCimQF=![$mr$uJ*
%nhr$I*(:4_Gg`&Gh./Q?P"s^)d6H.";ffNAnOaN84ZbJa'dL=@O%BY?4$F(M2W_21X"Y8;DKa]CYE$N99pH$ObEW30=aB6q%2)NL
%:+"$.g6%"8hb1tKcu=m9Tm/HAB#mB_jI6R2'qXGr^7]L8C"l-)>6N5X4:*AS[7I-gV7D\<.UNt4llj'sN;9X>`?n"$)If<%/jZ6o
%d@)u68Y,Vg.2S7i9Zrq:kW1SM3(_^>PsH#ql*U)_(<a[mPFP_-<'b3OmtF$SQ-D^sph7cO_)c_#R[tVP3X[5k7Vj=U8!T=#$1;nD
%6F]]M<V.!Cp`i5)O'91m6XE+9j1QL+Z.0JKJrD2,.O/H[q'%(bk>LP/;I+6lmD\?uS-1;eBKp)icJpNsk#Au7(>?,Ab&aiH%/#GE
%MRKU9.4C'L8sljLLVt&d4-hILS'+KaO0aKcdLKM]ML-&(jVeIl*<*t3EQ#DH[a2X,i]Ib^nD]YS3&X\KAR;5V`]F@HJTI*J+%9C"
%=B@u#'#m<b<N5/spb1e:P4$0mAYo+-,K=p!pZ"\D3uo0i<;u)R3mO7SQ$&+%H&JnXN[IF^=G\nMS3bYq7iD44D5.Ro!@0ZJ]dIgL
%jGO&'Q;s/N>oc*,+bXrZ:8ag]"'*Jm<P%2fNPn%FP94k!*G[j,l=M4I75eo(YR-+K)sQ%t4dRAa\n&d'4Jof4O7_M#7uE`Kq.Um$
%;C%YV9)_B58@Um)GtLeF8*(XB$KH9"&B`Z$92D_2#O!<h)]qr!/9^q9(*C:3G(4":F"F*"+-_'4)CRJ>q0%T_=<'.D&oJ?+`=)N9
%U](VUA"';!+&#)!W!c1>0ds9S8K)jq'U)<;h5Hr&rrNoaY(R4*@V2V(2J#K6\YV9@JU_N`Jq^=kXhq$_7SDP`If=WenHS4oc`Yf%
%1$-Yh+lK+)@G;Cu')F&=.]H=-Objmf6P?9r*U=cb3bVJVBget"*pi):PA0E=-m'7VZ'RJ2.nhukG)Q+"34/AR'>5FkaVJNOKoo!)
%Op70Qk=sCW3+-0+I9!]W$:T5ceg$)^-N+Y<,H])eF%&/49)@:06CULtKt<Ts&%Y.]K4sq5.%!lB3,/9qrO^^<`UWBK'C^lMY)VJS
%'&&`8irqm4ZHA$QJ[>l]8\;"n)(]#k67[IWRGnlTW?@l'l&E4,Zm+fg8/7Je*LBW/ltaNiiFLscWT0V\Xt*h!#%](s5"Wp4e6/Kh
%P`@a`N%<aqMHb@lPs8f9>.Wou[+q5-b&PY+dQX+m(A1(GmP)aL%ULZp5oUW0I[j9bo;TB17H;INMlQ:fj[lI#p+[D\E=+3["]kF[
%knK00F.@Ce/oa09bsTO<nun]RS-%ZfMbL!%`Zm"i%-?:MN0s6S.S7BH3X-"VMGcL5EN,IK8n2ds6XH$iE8nQsi':_(Z5V<+ZjIPu
%NKndSRoHAKna`lH:3!9ih*'<M?Q?oWU:^&ge"pA]9ac";'p5,SR?LIhE[;<LLJ2"-#st3P$"ublNiBT^?&srOp*n\=;6J<"+uuX<
%AAYIaM](,KQ-^5`r_K"h<H&\\f;2S_"n&(I3a%mpfMN=cRoo'T2QW.B\;GEV8#7iU37U$_\_(CqDF*>5AO^FaO4^7^[$mb@,A^<*
%?<09]-WKF7Z&LG'`N!.4bK-D'W@IQp?`&83$K@FKUV09bDAjld)W(]i7O/"(C0GZT.PfD(J#*aG4G5[fSD7)78:&EmkF@fbbAnRQ
%@r_jbk0VYh16QV`)J"0\.m8@-r5=uRSVb>`TB'\rF;LIm0PaqZX%l,no;#";[-Xd!^!_\f6PE5h.2*TJGI3gebHlo&A4IcS]ZGh'
%icJRU(Z&7L6,JEU;H\u>dMfS*FQ]I<)cX;JH;#"<R+Moa8LJ5>,u/FpJt@.cLe=m26kZIo,q?3@H0!(t84SL.pE+CSP"[OJgNE!5
%EE5T$f,q;?@?d#(^9^=tlp#$7RliYI+,VeInQPsSQ&WpL,HUM_S=]Y:]m]S\ic>t_+"]9t7Yh4IY@:S$U\HZ"(6Nk%(eV)hO44>G
%4>"Z+ifj$4O?<)kWW7sRXs-ArV(PJNnq0a/85l%;BEO(OI3j]+QP<b/0W-4bjb[?M,VGK"9nCK,+:^%SJueEWnYlj!;KSI'Y`.%P
%ghMM>PnesdXod':AKPm*/t#bC,Yin[Li/(LC55D9>@M-krp#&J`q-]t8;G?),83q(N2u66r-(j.+Npc3S;@-PfbNp(IY@W'jM+HE
%1FYmq7qDiO@\3-aB_JSR\n@f6;"s<^3NJl`R5iSA>QdP\-WO%,'Bh?m&"ADt+Pju"!5%e6bE:#5-<f'3/E0M=O*M54"&b=XQ+.)Q
%(nV"'FI+#ff-7/D*Hn#t.O9X@oj1$c14Q.\/FC[6r>o%K:Cu7=b.5na.]50UFfFsK7LpH1a&NK+i$b"o@)#2I@k.@[iAIsInta0s
%EYIGW.@**]1fV[UTJ!&5P4@#r]TGfMkfFNS@VDLA9U48E]9BOr&fks#&]aA)Z6^-Qg;3;e6+X.iVhe20RtHE(Y&jcrCPa7IKeb9H
%,nf7=SJ#KqNcN@`-"#Z7EPYbSU(Qci<Z1/C.KNi?dQ0ubPEVJG<+RAP"A1b<d;)QF)=MN[),9mGiC$*\<spM=+-,+ig*XhG+G(-G
%m4j1qCE@Qr0)o[HRifDsE)5#d9#Kr_8*i47rWMZ*@%L9#CoHob*-+&tn?#SMA2k=PbE9g+%+X:rb;,:0VcR9Iph*M!/5Kj"]l!RK
%fFaIblAsZ!!t]&cX3)P^HH3?-eE\hETm>-&<H^=K`]<U?7<K\:$i;!VoP)F&8R3hr906&:iWKcF?e2RL<C[4(H)8rR]$?<.W+MRu
%3)_SeE="h@][J6d;M+JEJ7_OOLoQM\s6@X+g!2plK\Q8DEH!P:4!A678CpGB:X:3*ZX;,%<<K$ODFf\rPD!VB426d$]a&8D5(nBL
%)<aL\Ko,e7;VR-Qi/lX#ou\Kd^r6QDUc1J*'F)G5:\7NtQ;-=8a+l,7ERr:na2qoT,`\KWfeGN);)pF6krMu!'L+6,E]02pQb/?U
%c5Ad7**TX'IV)DI?(-9N\'UJ?0MPO*S4\9mQ)U],>EOH`'1&LST>fc,U5\:H]i7SI4AJk0g61M9&DD@V=2^;`Wno<u9+-Sd*Ace@
%(D`CS=@ObnVMD$c#0X7CUlUmK'ip.NLJURunA8]OUS8593MR?k_i6L8/0rpQ.cJHA>%2ZS6`Z>lDTG@31t!dJDK)Uc>#@<8$JdNP
%dm_P'1J&sR3d'V'Y'R<QDHmoBO8^#@;CErsCUcd/c^75J`'^)qTqA/k1-?ZC(2!HEA]Xnsdtnq_ZPi*NdpjTdrZ:`^($#8uZNDd1
%dHSqgX,`PCMO1153Sq`6=8MKA^Up%[Z[F#]NSi)qqbaPHnHWE39Rt$ID<T>[iN9tHr9#AU(*)a#qs`R.::l"\eN.UJnXkM%]mUUV
%%Q`,Y[*7nWI>_jR`S?%F`38n3NF%jQ2D,am$rq"B4&M#&L$nRKrZ:+W/H*c>EP$95&&?Q:erQc_^<d'bOD:hfHX#lBA/Td(=`%/#
%3Vl"#^"rGaT2^ADn`V\Ye$)]IHNAep:=Nl`MD5RIO"sF0m@EBsc)=Y2WmUY0^u?6!A]XhBk==oOUO0-Je04,Mpn90AgBX3pN<9Ds
%WR8rOIRG2(DrlM;\[R*,@B6d(U-,AtZq>3uWGUds)blRVXE/IK?T!,>e%XI!Xk)6VAmKq#rMp^<(EGG3OP6gSeeRCSIap2[7dX7-
%q5NbbReTJ(MT"?M)5l)4r3AajS(59&AmPJHr`,.`3n<gMleL:j=&$C(f1!%%]`d`_%_lfdTW#Gi7:3G$<KidG]lq/WF`Pn+QVH?#
%e=)dC03\CUac#O]4mHRK>dXKCP:KSaM`Ru2(>Hc&^O)D2BXaJ9e`@"pUY)@*oXN5s9VNH'9`Q81n)1$WZe7>&<%guc[C#I&5$&DW
%kaT\*W=d\0Ak[ZL-6)A-*V1DINuK\+'BEWCP\Zmui4&EQQZ.L`Cg#.h`oFXc&/"+Is2rL&=MQcg_u2Mi.ZJ$N^ZFR.HC\8oGOJjS
%^MMLHH<kEMP>LZESFFp0DW.ejAd^e-!BP<@8,Z`sNp8AV/9Er'_)A^M7^Ls.>1CF34kKfX>^_FCH9W!cpi+'ZZ^?*D%mtrlQ>#ia
%g?a_UIuS-i!_Z$8E,&_([%d%G!t%8r%L(>&K#F:@HLEZm,,3n8,BFb\:/6-RY`TBu$Cs'Yn(Lik9ucRf[QAna;[*@<Xfi)T_U`.h
%H#["N1af'MW+WmQ)_G],n[.Q!?GCR2LH*$a9r8*gRRdlFpluuOC@Cm8^"OmjTqTr3G5*Y%=X5rRqT@<;hJaheG#[iuPtptb%rBL"
%$jPEm'lql9bZau:SQ`5n,88,i``Ij-DQh/qFeWcgRDhA2L)H9$W&:()ei[*q7gG6BL:677PeRj.TU.eJan>n8FkWAp9So6FQ'C[F
%qjgp_K]A^62Jj0-$(KM7p0H-\NRAY84KL'j0,04b.5]5P?%16PaRbk5J-Y3"34CdVje`*5GpkUgaNR#^kmZ[DGpmmlWIhb:I+`CZ
%kJ>qI"EPIO%l5-IA_<%7=Df2'c"";0/2rXOroLE?MKKB&\SOf1HT^IrVg'g-1,BTi6)7G<IRHo5pmW@28P;Y6h_hX%8'V#]NW'I%
%b@qCc]"NDMqU(tqa\4FYhY`8EJ1&lr\(djiMPI^?h0sDLrm\9Ah"hc>gh^2,l?@^Spp_:9`^nN8h>d.!hGF16Q1+Adim1<dng=2a
%=Nso_2qsnR5>Oei/IBDoZ^E*u.,)qTs$&gP+5PW7O-6\Lh"qt:;ae4SXEI5'<ju.IA\i,kbE_%!A4LV1YD[QS\eKa9Q`EG,6]FsP
%h`7jjUA\7QS#T"9T@&1!`ANS_XIo2[KkY'aA'/j-.onPbrgNqJs'E6sZ.j0'HJ@+N&^.q-)>c`(D%"*e-Cp`DG9i:'6^W1,kE79`
%bFAl42eQai<:Fq+*7LbcWguWJoK;DM3C'&_9p!2t5-m%QJrQo?LC?*<CfL*NJV,c73/lis!XEeXALWN=5.a/[Hef1T04F+ChDR82
%4hCT&DB/ZgnYaX??7&m)RJh;o%"/_1:*QLp9R8eR2qmrca)>8&]ZTE(--u#'Id/I_8]d2Ec:i:cj>..4X"Nu=f0$E;C:B\O:)*Xc
%_f=a[Y@FRkRait0Z87cF\6d-W)/tt2e(H;M\AXE>)RZ3`E*5H(>&X&>-q2hYWkI84kMd3EABj$t9OScY/_/Kr:gUp$TquJBAZi].
%b3QOXe^X'Z$lT#sg$$3G!J`2J(X/pfVdOSl+,li"#NITWa;KC[5!s&GbWQf88QS^$ouuE[c&D>>JBY2lX8OZg1ZK8cN%2lq<HQe9
%C/mD[hr_[rB2!ep`DHiERN671!L]q]oa;WI#"tlE<\%qQ8,/&mR5/0f?*4OL]aUgJQcF$Sb8"6NEhe!/XO\TniiEsHMjZC^k>`?O
%_pRF:6ome4rg+RMBdR.]7[RLonZ$0<WRcl(De_(=5A%r*?,6\s^IuV4n6t5kj-7K(laKR#R/5X$+VQOk]-@D5;t%P6H#3;+E+R.u
%mC)&6ANIkkAi!Wp;Y00um#JCNH:C*APqLkWb+,17BH0GgR?X@X2oWDs\C3Xf,$EF^WplrFs/c4D^_Tbs]kSpi;Wj?I[TPA=&FD"L
%7/Q7gBJs$k28c0r[;*&AU7J.?>\eXc89H,6;(#jRXk+Ne[D3ZaMORoe<Z-jsNgcL9,p=u\^L[5B6F,-ZA`6jqej&VaWM`?rVDZ*9
%aJ.C'S7c$ro']bu27T%@3`Mj'Y#?W=(1a:+[TNq!PpfS8\`]5+ZW;p'NPBBbb;Elf=,W55>>Ms2]M>j_=cf&:bk[4LU1A3EAu$4(
%?aJ!iTGFAISSD$-+>`]Irk'"X?AgQb-Kf^,U6tt4>*M]!EU$9cFfImPK$:<@e?`J>P)0uR^H8Ss/P6dhVVZrpP$4)Q32N%^R[Qo*
%H3p]nQ+WXSbO[JhY0As]HWP(.%O6Gg.^!dqfBW@P_U`.`DR__)`>PCQZsVGUY+P$'R<4b%m.J)(B!0`<UY!/h?CU8g):3.:jE.QV
%k'Cn1E3fY.\\%R-Ka7u>f4n6de`P`B>cV-sX3I3C\Q51#XZ#q(k#s@#<msit%^4f<HeM#RJHZ"Q"2O^j])4JWkM%Be$0KuU^5Wa\
%o<7s&T&%Cn;003LrHWW.*cZ:]S=?5?P)6r?WUs)(4/;YU':lU&55mc^Qa`>bY!&31hX\ELjVm!%@ckllbK-)(r&/TbZNdVlmi$S8
%]1-r!NE/2'DR;l_NGX8q(K%SAcEt!d[TA/dpB%OHR>f_pd[)K!oOX1GT&9=+L=n-7pbH]hdIm?j_P9e3a?;=Jr7TGbqNtfbI[G!n
%0QLCDlM4;sI5C9Em*`p^e,PMWqu!2E"_W1[5>(tT6Toj_MP)6"Rn52.m50-ek><mjW6LPbaH4t7)c_*V@tK]C/6S,:LJ`h<#ooK"
%`aKRb&ic9-/PB6RnCc#6i>Jn`R3S)eZB;od#0CXh,\QWiif^sF5Nt+VdVjU6q`d1BrP_k1c-Lm;7@*-"^ZgQuc[Y-@^Z4qlScE!7
%>"5&<5P)Sb1Z/!EIE^#bk@_O/K:lk+juY0jTD=oD1r^^11Z.HJ!S?Cg[,*c+mUu>2OdXo&R5(.V'p(G$]q=i'rC#tP_Wkd`CpsA6
%N*<Q-EnZ-M.lFuo2$8#S*N#3@6:OW8(.>.(/A#Yqa-FWO)=189Et%"s<iJbNcY/ZBboBul%,(RUD<DeBs,eI,46].1CCT'uBW][^
%2br(B58rp$e6D6,osJt@g)>5`2,Bdf;eP^Og#$:>#2a0e5F^i^IZo6nA2k$trjQn(mu@01a95:LbH$d^0*=74'Ad<Ee7`^&3)*=h
%:q3ciqVk+_;p$*[C^\3>P@B#9;F]K#W!40Eo@lmaYG`on6XVDu^I6j@gu[gQ]'K]?rcJ7=o25k6?*;IQ)jSd^(0RJZian^+R3u>?
%kGVY'`/@0mE8j;s@4;.2:V=mb0D!-*4Rk1&]Z_$B1QcorNlar<dRjI$JY]`umomfHLf7qIK66K5R^c<LC$IKafBl/`hk')E9$K3-
%CgnkO6C(7Sk*Je972=S,?T+%#&(?!\`-(r,O6ku=dr-=tNS\Q\1%L]BDB.iZEIJSMFYo-MS!^(j3+c7-;f<I*)%"WJD4KM!FM2R"
%\ccC'[kH!E?b.^ArR]i=[!u8]\,ZBV?bJ7RRVDb#rY1]#B"/aqr]'ciDOq8D'NlNS6PF$DInfg+RJNK35!JC(4d;a;<6qMgAk!;A
%Og>JRLeE`1GgGgiTDjg)^u(:$lPU+))eXW[Bu0-iAKIPi6A2dV\p#JoBGR6#$=/[.87XGg5HbP'dkNU#nRnVgW@1TM]/!p`/BF>N
%fa?/,_^fd4s(-J7?[RS"/:(Ch4N8)U0A\gP1"?bQ0[F6&bKdlRH&O:p2U>l,\YYk[0r@s1cgr"F4N<?@1&a<J>-FBoU@Pn9B?-QX
%X]KARCcAYa0lt*doMEG4dIXsH]gf1`._V#ODQqq_URCA?s$Z1R6I*Yb\2r`Mg5RSQk^,O/e["se"7<9![k,!([JK&J+L"'cED1:u
%<CkYhEGaCZ+H[h22)EWT(1aS[g:pZ)%:,<IL9dcOj%fJ6$U^lG<FKnWY8K+d)8="af?W@q[BC'uq7T)cH\8L#hOlFfl298.1sBS%
%g7[>gpc7P^NquH]U"N*H?G"rf1:bra*pEOA92D]G<I;93]]P(!%0#1UR4n<WK#4l2HPtG7fIIUjo3s@)kqEiB$*b^q39n),Io0gW
%2p!Y@+"&U8drBtZIErQ^PdS`jE<:$]hiiu59)iuSb=u%hQVGWbdG3:=Q?b;GO65TPgcV$p7ruF(R`jV,?h\5O?62"?nQ^f1$"c#a
%bCJ8.S=>:To5JRgcHX8;Is!`[@U=\;/fPGP*n%UN.AY.?bWM\j[ZKoo]3RYc<3qtblQ4AX[kD.!Af!45HrtjO^B#rSUc,th@X^Q(
%r*G4qI]l.dggpoG9VMEs0$(PkA98J)3W?>CeY?`aG.*]H;#?tjC\3(YB$,RGHU"!&ZIGW)<Jau#mo5kr?'#Yj?gWCDY&.-(_4/PP
%FR?B'=XEAp\cO\Wh)X*@_s,T<O/;0=gLg?[nubPlOSPq'B4e>Xs0Bj_%gOk>%G6-3R`X/T[(\#kr]JHt>^01pkPWI^];m/8fO9ZJ
%-:G5jDKU<VOl+*DM!,%i>SVE"MNtdOc>g6-AJN?uo8GSAg8oj>B-9n@^Q%i6V@tB.nuC>9S*:_r?un2L%qiE=.;H`3N#?*,m1m6/
%jT_]9m;0gnbJ/*AUmnfHrgeCW<u<;ijpP%!`hU^b;'k4g0WDrqXpi&R3_HPuo<4'q/%QFHEL45Z2g:/A:=2:IMWR+MgaAQ'OF<gL
%BA+fGFt*>^IUE#;4+"`I:3l]H1Mb;db]^;(g1g1Sc_F08REq*eaC#>#7btMI@tK];)2D&m$OIfCW=JID7^YhG?qrX&Z7+\</(DDe
%X`-5r@F4Z$a(D*U>A]<-rTD1?DB/]N8pP:oVZV]g2i_$OC"ePVFp1#$G4C`XnD#qI^29CZ%.a>>#,g#9q)u<.G51T3=##mO0u(V=
%[dNXqc<%;XbHH0&?Jf`ena`7hp=X'U@\WHD%%#qAL7-EIB$LtfV7fcgak5%b/@n/+S;!LkokNImo^7_gR[IS96'(WM(q8+o>>8?U
%HZVuS*1PiJ1#8=4jZ6Y0nbWqU=+\`CFafQs,t$0@^LUe[>PB'W[;2`AB&JaRNtN#'K55`On8&mQ>`LaA^OpWM1-A#c1Y1%!o&]+W
%L\_?:dWMi_\;T2a8"E8IF+sFNC#a09HBa,q1Qe68EZ%V%#iR^FduT@:=0,+GrDmcR-Ip1['!f0B1NM)Qbb!%tm&J%K]`-'TGbrA&
%']S&Gg]sBbX*^AuRhV_rk-&(Uj)T%ke9daQIKj=0&g*(_eU#[8e41F$W8t)-CsF8q^FQMZ'$K02@elKoE60b!\l76:NPj"A?%!S'
%_-@*`^219%@2-9VAOXCmd7L+0J+CX0?=*Qs4s>DVkk+T=Wp22Bb4A[2cPF2]Bj(3:$a%9pq[>HtK_:N_m5N<DRZV>qjEBH_hLL)6
%pkbbQn:0o,fOYT*po\&akFNcAJP@d+bC[Mi*u_$>L]X/l"md?>Hf"_>GL,3t2h:jp1QC1JgrI`1Y5SZR\;)&W3U3hB.Ukjsa58m7
%LtsH9oKW/SQi#ij2S="u%K+"W%mFq@GjW?Yr:Rbh5m(RXLl04EajRM"D+;3FKX2T-h4s?&?MM#8rO]`QV*KT`Lr?q*,41R9r:-E8
%)Z1<0eYkJ]-cFanBL6\<#+p[M`2!=VD$F4752?0`Iai8p;#a>Kq?,)A1C-+dm99N0ie2?[#=<Oqn::_8(uj;'+Tm7,j\e8`D)7ii
%Z5WbD@=HTTUQkYH_m.5WcJcXr<ql)R[F8ENBUPPKIP<M)<NG@2hp+?`=qIiKTi/4&4,YHBRm\ch9p_aZ_4sI-^Xd4Ar@##VRG!XI
%0+"*VM!E67V,7)2U5\bpmMog`70?IMR<D%8:1(OS>[Ak\rlD5XYjHN<4Q9N0GC/`K.8YN/<CBp#<HR-FL;H-u/uel/IBu/Km-0#5
%T'NeL]>oCrJUGdo-LWi3[HjU-NSK0"W7i63n8-=?&p:nI\<BdY=RAZfpc0WKA\feD2uV/CipZ`7%Eu,+m4U%Xqr6M6`si_WZ/$IV
%fho?d:;qBugtV'M:*ukqBedMrVT+*.`Q21eqXW\2E$2s!9uT0=UL(><T%,Jr9_aYbF/pqA,FN(;CX(["^52'6rcrB7lF*11Oi('!
%'t-dlVt)M!..o66PpV;ue;?;th+lIZH9!S";`^T(N1r@jp)@kNL>5:QXY=rr]mq9;NUqTTXr`P4K2&A:hGLo=WTW7kZ;\3HmE%pQ
%WqH5H<9Mg"g#+dV?F5'3mAeEcggmj%LdffH)L8=>":1=AM9/oQaqacdG&FM;m7!ScJ!J%Cm(cYh8-5*WXWQ*]Ib`.g?/$BVE6cZJ
%`PcgL`sP;F[Igm@a6c8^KHaGil,Y_I)QLIV#)t$$0Y[3_X'If&pNsH7::l!!Bb4JO>f2JuH`H9t*7n^rVgR92Vr,+:5ppcC8=15s
%95E+r15(R##9WYpFZ8S.MuV$qm#t2?p@(Ibl]'-l"_e3aIRL`!kc\<1ZejnGNuH84mq5=41$nBngoe(\qULcX\(eVn7!BsUSi#1l
%e`L1[d;O2<=s`q+*no7t%B=i(d(U@q@?HM8rqWc_S2=:D;=eM0#=nha;.lrbV2s(7RqfRkY#Usi?kTU7('b\niRB:Z2KHi1=k/t#
%$fD:[`IEG0SA7bYLA,3G-+\1hn5b!+[3"fLaB>A&P/g==+Z\9U&To][_;.i=4.b#ug?LP9TRNos!EFcX,a9l1j&c1/8k*\[q@PS`
%`me&jHa27;7CaIqeV"+LVVPRVIARtn2c/ktNB2=E<j2$<H32j^&@MAs?bP*HN+kotQ>!p=\p5O(f34^[[OV5f;bHd'(]npaT.4Hj
%i3da+*n=0l/be17]9iHNe2PY7mXB%d4=a6b,7b.&K61D^d5YjBFL#(0e;g3bIY+02W+H8@%`rj7PB"b]Qjo*3M)nP24G]QO#N+6*
%Gu.P?nH[W#fS\6YD)Naul^fsdNaTIidi3@TBL'pPTSZI=`UV.;JCJeS&L,ZF\43HQ]+Yu(>NuT!;^r[r(n\3s[T^`=S>KsH]2$;`
%EUK!h4%-2oX>=mV(?m;G(m?Rd-.HTSU!`R'C,B\K2Y=g)<b97G.anha2h08Tef/:;Wi`k:ggb1YpY&)6/9JB<=gXl/k)]k0_.'oo
%qW?52j`]\2c/S<R(h4GM+;qZ'1sNO7#,;'e/U_Wda`FJ/b\k6dFZr9\\ib*+[Nu_MfN(d-"HJl\8%)+0mgJ7@(pL+)Ndg-5*O$!!
%!Qe`q<_>3B\#BfhA9=lj,1;98XiM*EW$7DJ)BPm2ae-'.j&b*:kM)Pkr:ku(7e4dA1e'Bu-\^&`'-$of[sVq5dB*9d,;%]Lf'88A
%.5^=@$`fcE@C\H[5Kh)S*^?OL&c.r[)V$n9M_XN]DY<SnAs,6TNOo'5Kq"Vk=Z>6fS?LE_e]f0nE2/FtF#W!6:9*M'NGhg4[sE-#
%4g%Z26pji=%BGkILA3pU;('eVCMGZt$sQSQ8@Rm/rjp/]H,F?Ud,uIVH>(^?W3n"\k`2D<[A`i+l1T[g'D=9X"$hlqX#=!=:oe?3
%V,@Y1RS?c&[<#W3/A09skAtR:,I!6eRalJO(A?YRm!`-^rNJb!"Tr"Og;aZ1Z`Ne%^rM6L=r'Z0JkI+"SAU/!:ss\.)S4[=8rH#r
%N,mLta2R28S]6UCD(k0FT4TVN.PC!"7qK-I/^9DiX`4j=.O]jXjg.$oB7/a2dS4UeO0PhB\t`E0_".*bK_Cp'Snp(7ijO\8(3?]c
%We4T<\rDo>T!_4T1?FB8M%&t-0r_!%\76IY]17k;H$,Wt_7&-t1[%Vo1>ngD_)LUeH>qY[Z)R<D+j-dTNGD5]*<!b>U_Q/<@o/Pj
%mEU4ACee_$M@3=f3^XRu.\"tH$m(1;36k#:;]E+uh(jFPYt_)YV=AV#>@:I7d>L#W\(jr^a0r4S0`i22!7MaBZ"4$3[RojI>+t(H
%?NY@q8(C@Y*(aYl"nn._/i'eoogOVTSYUm"WHgg7GU(t8=$('NJX'k]*NqRm@t!GVRO;.-l?FTdm<>=G]1.Y"EBBRO_i)f[]/=cP
%P:q*>MPN="7)7')H35d!I%E%MIrpE%'?-5N9i!Mn0m's.L\6DN9'HdFm5N,p8oFN*f9*`m&MnXOl;.%L3(qunSW6G-BME:*5GarG
%VIg1@\Xo>=;e9j:3T"]O'fC31c>cf&1if!_m*aI%=1c.t8/uK31PY0&+1I]`4t2tE-hhhtY11^JMr-*f%f,[f8uI(I/,Q[/3SW+i
%Pna((jp(_1FcIc2#aFi7G-dl/5poYZjbtkHX`h8RB8c*#[a6HP*4:9l,YF65ZQ0<W_Om/&MDOCb[RlX",T_O=C6Ll#[-D-[V<j"^
%G/OMS96d:Uc$1uu&lmp0T8s$-lJrCjeNn3p`soGO/gi,qRRS@'l;UB4Es]B=X>Hh$SQJ8-i_0ojg*nR3)Sr7)IH<1fU"3p"<I<KN
%T91neQQsq0Z>nn:,pJ>b1^dg`S?18qj`#*(ga.<)em#6pBUQ]-S3[q>:P18iUZ*P'X\6Q&5oPm,aF5a(IbP>d.-nSf&B/ko9bPqB
%rOC-?Z_qD@/pB?:;FEt[=$fe9GFYg(^>Tk.BU'"g=If-_7joS>AaLYI15\O^EQ@Va'4HmM'D)\gYPClPnL*!-,X?NUe$'][ZsCt8
%]DrcC+KZh9NORo0Z_&,C760Z,)B?gGfKXftXk1`f8Xg<hC-n^D8T<$jS0S#OUL^`n<MO(]%o6"1WkIWS["!PSW]$=+][m0Kj$5+>
%);gA9n@BPN?OucCq1uF=6u3ITA/H8OEcEh5AV.'pK36f/Q#^FIW;U&1<<n"5o=13*L#a`9)!Mt\S:Xbe!U4Y:7H?kN0*d@=T.0-h
%r]H0D\Sh'Fb%.oF6bdu1qFU,p2.*N?`=E@Lp(;QFjbg'Pb3+:T3&(9uEkfQ.5MQ.l"fU2rR%=S;)J6fsn=V/Z7P!)(EPJ%+nh906
%@PpCY.$3c&EM-L"CXB>)2:npM^RnV*"Y>@eaX41FYFX[)[p!@c^r:rrb[NaY35iSBp2Ra<7Q8q;S`-okq9eW:gt];4j'k?J.CfNV
%k&PLL2rR/"m4L)1Dkj'dNTe\>WY2tFX[Jmr_D2V@*Z-1L^X5*ccrLlsA6:J;K4:?<b2U!I1:50_<iTJFYujBhBb2+K+-(\?.X73T
%,o1N=JU+^_EOn56\+$JIPhY/XoODgs:DO`0bqrZ"GL!7?b0=fW?YfBN$"]L=eN1n4e&-KZs.J#+_\`#>>?cY_L+2E[kkZ=_n]osO
%9C$L<hHR%p>CL2Ah,u1EFIo"pY+E"<4KI7>?FX'O<:er#hWq)/hQ>=ff2!I$E#u3#J%GA`UXQFBPtgR5E6!'j>DCNWIk.-B)n.cW
%^?"a$X=mq&2nI>;#;FEBg@gMdD"Xl24F-d<HXklgp.LC#O)!d(rnbcD>herG0VMjVgfa;74R&-GI4dQ&<gF-VmHne"CVP))oZ4Yp
%YEYU4Di<MApYNbDj^[?(;<hi(rUAHhoBPA6_EfXNB(W0N]@G4HlXuL/)lqfmq,2M6:;=+(Uj`a$&A9Q#_,?V\5JQlLc&Lkte`5Y'
%YB9&Z0G>/rHFI-8\%cj_5JHlX#D,Bg94(H.[,KQkn)^\JerAZ]nEkC-J)s^h(\+Y3n&%!@[tU[4B$Gb3:c`_/f@C=Rm(5p0Qcia&
%2G3^M=%Z?irhDEuDOmr\C=P+feQCNfhEL&#:#eOimkep3?#=t7<\HB"4MJ;Q=o-W$D"$9[NX.1RX?AYQ@2a(Oc0('QX*3rZl/@Q.
%#QFOsLCN-jconfFS_BC?FLGqa+`$1Ph)@SZs'Fd$[>k#tU\(2d9K$6?>Zb-hMG8TpS8iegI:o=^[=7H/k&T\F]`R;tO5@!/I]<9W
%C&Ld)j/R6DlSFOtW-&>AHK<nsKl$SK^%G^>OAq9uB8bW(&C<B/D8Z:!lUCV8Fo?4>`mTVP:?1:<?YC-g!n.uV2n'cQZh13%/mbZp
%h0dN89?Wf3Gr4j#[073@c<,DbBQMiV5<a?@#($/cIBEM9jVQpR=ttuF;fq+Xd&Qk7/`Cc`"EWP\*k$qGK"3gtj[14N=Gt4[pVH`-
%.iaeg/X;A=4TE,uXkpZqoT!7m$?tsOHX58Q'mIjAqi1%`h`n<9^beLCrP9WjoRg6FY^'n7]dZ#2$9OOD\$q-h`]*A&g@>!0P=k*7
%^'QWDo[W^1lKri5@/p-"o>8fHrTBI:@f8;c8(*j8!/a&1,6)EBnXJff7d6$O<&`A<H8c3:c[,Ouj9CF@;*m%u?0?q^C*.WG:'ki4
%f_eR\F(0Q'Ip=l]T/LMKKCuG6PqpG%rT0kb48^kTY9\+1k"96ipcLb-p5)P#ND?KdgJ803cV0LkoqdSSYEah%kP9_7Idk0W]_uE4
%=-BA8fA?t2b/2tm`R:`pGIG&hSZg!&$N&b0S!;1sAfV%t"*W;l>sRi/@d2rqZg4gF?LJX,&(]K$53tIM^.A`^o?$.;nkkdoQLHGO
%?@lku#;>@8TPP['jl6"2ZaBC';m"l>p\lm`Sk[D4SiABX`M^1L=kmks<Qa_7C['61YBZs5N#LVS40ECc?,,U*m(=LtP;f,J=f,?F
%&&)B*07N6;c\p'!Rs*cKo\F@$j8"iVi*pc<rR._$?1C,pp5Vr;6+>0aMr)nUWDK.Djl:\`4]lY"PZ?`*Rs.Z)7Y_kQIm1(e)^c0R
%Tt^P15&sEU(1,mtFd)4\(A85%2M5qmQ$(MmZ!G.ZiWed_`d7/kiM'1PIpt$DWrBomrMiU.YUu=/2N=L2k/,%)De$sHn0n_:6I.lI
%"\/AV%>(cVCKoV)d,268DUIf058Nt-4tDIc_nt#bor"WK2#6tPoYL7WUA:L4=P3'a3:Wor(j-`^c8Rele[s$\IA8uN^]&JUeFNS$
%eQ^&"hT$)cq82qSr2LQmk@VECYF`FW(rE=tNrW5:csc'.Oa>qBHIJnXq0_.s,^Xum=,Z#iG7r`n$p5)^G#<g6O8%S_[k]lSNA&4,
%C4Y#0+,HdS0+X):/RS0qG#g8Sjm\^XFYjFVJu2sMBh2L[@WA#K@Pkr[VSV\Q<)SVqS990a:^>!MCd(&6\j,NJX@'&?O5\^2Jkf%/
%J)SS*,inePN<i5+&,0DQ;8*`Rio2ddDPct!ZHO0D6p-HOj,'QJ/60(WpdgPt5nRuN^La)^n\M2[(GQ8d/8QILplugsI%#;<Z9c,@
%+Wb-(j26jn*NrROL?V,KcnoJ/@W[GDOs1gqfJo/!,Tn#VJqc#-"qcVc@R;qAE]MikAV<939$E1QnZ;1#n\0i_Q=MS2%u96>5`E'%
%,BbDW_gS29.a@W\n-0h:QJ<.-L8b*3OjbRMEBim0qsgKS[tKmr+qS@\d@SA2(VLjbMGQW-(tX,,P!7k'_SM`)XieYskQ'Um@nX9Q
%@A*kUo45K(ou6gYb)Q:D1i#R&Zl2IG@-'<A1Zbs&\$o\9PT!m=2`>Gahs[jfdsMS5[lZY+d=%.R[hS7<[$HYqBW:*WQ,Uf1'CK`i
%IYs+k+s&OXD7mEg&=-)gHQUDVT78NZ-l!8f_Hs:UZa'P,F+hhUF5u%L::!?^`Tg*kH+:TZ[F-,ooYJekNtA8(\_*u8+$:rtbLVOd
%>+3F*PB(bpo4dQ3OTY9X+3(Z"hV"f77uQeWcN<*-%"Q6-V1$R*gX#rh*9aiZIdgh8;ZR\h%M\^/mY?9)]OZh'aFX2C_+TO(7Cn+D
%:fe2g%]g<Uns?[BJdInAc;VQ7f6>Mng[so:OZ_Ed<:Nf:0(>NY>=Mjn5F%iW]mDHNi_f6r`lItq=*Hk&aAk-i4YcmL;X'k^8cL%(
%H+prac*,-O_nZA2-Wj2Y4n[\h[grg-YFgI"__u'DNE7kbk$X?9o"=j7+$:u1]p"Kk)o+:MGVHe[BW(dhlqR]\m+".o5AK\&\bG1E
%k"usJXZ8%uj)0p6@FjlRAb2_%hqV=cmO-o:g>:j1CZG)I:kZ.[pEQ?_R56!H@!t#H<BC)#@hi$lGUQ#=Eukn<UD>8L]i]kOAbXhS
%)eBcEL+gM%lf!iu""!QYCAkeZ+KM([,&+5_=l9.A=/5PU0;%^jWbf-?\36rUiH`60[=%kfa2"lq5:aJ%h:T+Nhk.Xt9C9L/;g@tU
%rsa_Dnq4F/CdI4W?,Jnm+71!$(]!3WmS;7LQs+CRJ_>PGe1clFbfWDQF8FTnII["cc*1eB?MfT\@*(A<93^-.3u>l67AjKLbiRI4
%)[S]Ur)*gPT!,('%\3"`7Y.>Bc/jr1c"Bg&pD9/::gIu_!*ZP7^g-8,.Yip@:(^QSA,YUaCZFf_V7We+9D]1&L>b'(G>2-LV)k3N
%Pb3*dIhe,)/2oLG+)t5eP7s^&gW#O\\4\02E]0,)Z5r*Wa)>I)-+JpX>&5:I)Vp-<l%bObi)FNA0+A>X+WI)6qs"A&F1I9Io1A1l
%PFASA_2Xe["W$"ap'T.'Rs!lT_ri]=jna84/4FO:-A:uONH4:J/N-?Sm2M,WS1rl;gY7MOC@q1:,Y7TMpHc'Ph_S]fr>,2Q0FcA(
%noaGIoC0qoO0JPG)]R[m?P\k44&s]63nV&m#D`t0Taa'94F6LjOn<H\It+7*?^U?M'6KoF[kBB-PP1N9qWmie[/":rkR]kB2:Oe0
%Mjq+#j&<cs#[`-4HlK;>+Qg.OD6,sNICHk3hY:2phn7,K?JXL%.I8'+<H-jNH1KWASsf83m_H&XH2+&Fol9jmH6@Ra"Ea>5IbO@F
%K=eVe.u1V%^+UQ1abn@$p2]u^_VtX-4L#YEpYt8Z)+[5AF7&brrb9NV%[be[mcMrGmo[&CaKLN>ig5W`[sL7qoes&MjG):@Y$b(.
%F:[pmM9kVG0Xa//=VkQrP=p2W(Z176<u^m?]`;DX\PO`iIsO<g\O8N'$)Ul&h#@(_>cTgXrKjq"SUi,'d?hg.b.Fdi4BZH90"4'4
%TI*sNYjYUV5<82g^PD3j.:k:\9=MK?>@*i*Hh5m:pS@Geo]G[oJ;COmcAdnC;LdR+:2bO3gdX#_OTu6.`LC2ur$6t,H.](A4muh@
%qpY4YF5)ZpAAQ>?[r.FkpV4.0NLRC_ODed0d!E(L:(no4%EdO&]64e#3.>6NG#gPoDla[,FLPMVD1,ifZP)t/6Z3\:ch3Xdj7)Ae
%bn!\?mJohrDk24[i!XpX?YH)"gde(b77MQ"o_)4rHs"t[/PT1c4nS(t.1+<-Rg0*]g`q=>Y^HAKMaj/CL03on>Er+Fo1>dcEO,?2
%p-Wo%&3`'(Uc0aXs0hI[@&mI60DDj8J6os4F(=l[FKuK`F:KabR53$a[<S>="gYL^RMAots,s.Y5A@hk?[CctH&D=XqhMTRMH_uP
%c-7l<pg8T2I(R#\k4kUQ%K=Fqeh?4\l73gS0>F&lSicj2n8;91-#n%%p?hU+Kgu`oF0LE+(>N[h3/tY"Q/mrFSK^jRqW4V^]%urJ
%;.Xfsnb/O*+Hc--(XI:H\\gc*l6_n)ZOc+^XdKQioUJ#$_]:if+!5SI*]/o'[B6shrVZ?1S]ZrT)kC2?HKF11-_DTl+kY2+76DQ9
%=",.S[c;3Miu@V-Hq`G'lW(LomT[T5gp>K#P=Kg@n2ist1UjbN+1c4B[E??er@J5HT28b).nAo40TbKO`A+)J-F3(n/-^!)m4C:j
%:VIQebb>QopuA]?og]h-oM$dJ,C!4<TFoW9/q<@3]ll:Am`P-&W%uS]BrDauoh37b82X:(/).2NRbNFn=7V7uoX\,npKpmM&+=]M
%mDAD1LhVD9c\#))/:^Z1S?0G,ZGEsjgqAhab9j#ln7L/S:jID_#M]'I<A:MpPuf)3?]E=aqi4n;G^Amc2I:9rUZ\m=4aFfiUuOu0
%E\'A$p>ME/+>?0TMbS]]2FSPD5h*]8$3,Gr<QEt]b40dJiMu&j?9DLMMTt;&f7>ngP;LOK+)N&:lh>N$?4?)g#DHbI_D@0UGh?L?
%p=e97o((*#\oaUjqJ+[iHUH9;h5oH)5!u,eUJohSp7;b?+Q&gZD,WF-G'nc5/k#Hk]\#YFnHrTQrnbj4_f;,"NlKf-c)$tX90gBJ
%/*#>HH3*p5q/)M1P#%PcVGX\7h,nSr(3Kk1E4#Sk)\Dc7pX770n1,BDV+9>P@B:kSFWsis(LA]-`sChhK>t%DFlDZ/<gCSb!tQ*C
%fA,lQSST'n-f#gbUp!`5SuoXSRBOrKCXMG'F23*?;4m^4pN(@.8OG_F77l%_0*Fc]-^o`3p&!]JodMkOD.DtC+*@c&EVk4\J_!2Z
%0pC[+QK,RpmXm=0?`@k3J?\M:&*f@tfV?NT."P74$]q'k(-!c/0+.U")o.r,qlRdn,bpj:rlr>IY`cbXY+ditA72$5;:.D)f=a,H
%5JIO&a/,]1duX0k(kUT!=FXn3.6i<rIT)e!%sC<)X\ujE\Ztl(20bqrX!PYera#]'s5=C1nF8qUYN`bqW9!6UNUGf<S)rhZClnX#
%`JZS?.Z4:M5PPJ=r>)9tp2?3;Q;:cSk5',u;o<tSrVe-s8b]u$egiU$PY,"+2'pe:ctQbtF6qahHFVqk/5n8)XQ4HEhljN@d8drk
%rFI;#Lp#=p[=_J[H@NEV>VQb\]_h3$"ha(7j89uXH26R#?hsQ/Iu4s\pF(8iBe:Dd`!i3q#$oL"*'&JPneSb8HD/\H3pA+WQPf:O
%F\Yt7X4p1(qZcuP07BMPq`CJ1?M3>SKquC6*5(tU@e,4c)rJ()q=D(P1ac2tlW^Sr(IklAXM;Ep&ue:&ik>#;o)6R\gA:C;kJ]cl
%]S5D%D'1aDCR(MKMY`K%_Y)Xd+0/Kolo]cTkH63$OV1](9s8GdXb]0D<St7"@>Oego@ohYB%V!;IX-/6)Ka<Jqipe]^"5=f^BnJX
%?26<tnB,3YXh@m/(>[u.`PmShg3U.p!W-7Cq\Al-0.Q]]Wc*C>>^7E]'V2`,MC&Ca0?Y_sK6$_#p\fC1nO&,*(EiQX2j4oT;=6Ze
%I<2cAp9=J*nc"h$DJC:$s1no1NuGob<BAs7YEZMbV7-PEJ76.fFK;_:]GMc0G!@Oe2%h/ikap37%?+0?c(fnc2cc-!WB[%3n[)&Z
%DOF2o&5r@Y,&,f1-hB-pS(4_"Q4'h82g-]Y(Hu'5.6a#hh)I=P"j4Xl^T;;>4PfU0hn;2TCncgV*C8V:hKWX?Jf+I$7@<%tT',iK
%Dgfo1[H*'t9:IT#6J-]ZbHR<C\sp)t:LU3RG;!ihY;\]&%Stqj,RnO9ME1Y5QbpRQXbWtT^IN9P?*\j]9_V["5!-5\r=Qa,2g^OB
%AlKVW:.a9e1O/09I]GM3?&;?o$p7a<;/PRLQr13+OUC`$[ol^t@'$2h'5HG#1@X*CGOX?WE4/!<D_Rl_J+ssn9_!fmptH=#VA8/C
%f7c.96FW$Tps0#LcC'U$m2"4m!Ys/OI=Ak0cE66=oc^\S&fZVQr3^i1&/TYK?SOq*Fn>#s>X[O;ICG7$5Qm1$^SYkq(XAC[i#7p\
%*BSfm>,IYWK"l4Oo@N0`1OXAYni8V(=53Z/2r"8(H6GL7ro64k=urfFmtFMe$hJ0j^d".LRR"?p)q^a=+2gCR1=H>9>gL]t=Flf_
%*A>?f:"R^HSe30rah(kmk7H]9[Y5hCL37N$Y[*X*nNKDB>0nMdF3W2hS$YjF#kO&cCeRS>R]tN,A,lZ4HcaArH70pseaSB(.O'Z4
%Rs@5;ERD4e%g"hc$%3Z3o!+D=j:1!s$%42i"Z28"!TsLq\H&Skq$79,8]T0-E'>rD3MD)P&=*UfTsY)UcQF$Y"H]0u*$ToCkA;1J
%qh@j0$k/I="7q&%"%p9.0*#PGI2c#g)Yj)h$\5<@J0!q@#=*]m)F>6F]]m>\^-NkTfSbh7ChlFtoZaXKi$*R'ek1mZ`Bk%-l!?Gk
%-\BtkRZq+?bGIt+W9GE\D:?[`7VEAI*'\A/[Z=6@DgHpQ88:>q63J/l5.![Ba`[0*@g!2q4J/U(ZKNLVcN@0uBV(K5rP1f4Yg5gq
%$USE%7lP?i5-r$4JB]-X"mQ9\3J&fd(dKq9O6=AnmucJB"V<Eu\rGK(o6+enK2DL&.G*,U"fVqoD/L'F!"jB:D2fr(NZ%&:^pq*o
%%\Od;+GltpdD[jP@GfS5B>NX=.]&NVd+:#me6X9%[KTQ\"=K<",FL,#fXJ^C`X7U53H!\.;=913!7h?K@Iar6kCKU=5Y-KO\cH`c
%,h+VXKE71rkMEH$4-gU:e-H/;`8#J;iW>4Z!-Le*ZlB-mH!#fl.l"Lb.rZ@5.s,hnaG%@Bm-Ap*nrO5:fiLIl^`@5.=Pb1ApO_A<
%m_J[LFJ19PQ7kLT>tLt8)W!_H)an-8ie#l&l3aOjc='8*)$k6&(BcL5EO'KkF\FMAr":+diW5-T`KW+u!JPs[k6=2EUDRHsr=li/
%)0[q`e1h)D0us_"6')soCGI=-9eh84#`((qAE=^:fp3XgBFkS0%+$%@6,(^_"Ec!>O_cl88pnhS#=59s<F6%9[JO`=%r?^P%!a@J
%[QCjUE50*FNTb[TiEEs\%m8TY95fHF+eo0@42gTe_hJY\@"J$Z4d\j/qU!3L5]MF)@23R4d`Sg!O4Q!MA2I_^OH$;W#^..f&Eq#_
%d53FFS!?sF#Ho^`?QQRa?*EaBcT73l#bXG5&?(I/PIgT3kS"35\kE\9J`]5*,4)UjndRbcfN+57!ZC?*#j%)q;@i=_:jl8D9?nHk
%cpgPASLk7r/j:3Lp["d05#:-1'*4!8$-Ae@0`W4a<We:ENWt[bY&HCKZruIlK]k<Z=!&tb87!*!:kEe_&Kp@RJ[,Rqm/S0TghJMR
%.;TDflC!5A\2`!WkgWb4SNt"[p$:6KXsKAicR$.qR^f"0]hfpoaV/tf^9*S96(X?L"Gg\ugB.k*!A2V.FO#L(i42GQ&'K<V2Ss6Q
%Vsuhu^"gJ6mbM+/k?lqg"qN<82o%Ee4nM,#k.(M-,./du_tV#)>GMkHSpI8n6AE\i8[^q-SM4I)#,iJ#''ce8#%8!hU+4HE2@i*.
%BaU)1Yb>dC"aL6t+<UslJI&@(,\P%*8BZTgZ<]9f^hCcrZ*/oe?RS4u2>Fkp)YCUWZnjFc+;-U%OVJbD0Fi=#d>uiMSHmG.-j9X_
%!;6[%V;M[2JNn'.2[r/7SXV#^6t$O5O;OTAN?Sbp3(KlR8SC;rQ]fqSm$9t.j;s*kbrEpYl.HJ)H0>3&-gupTH'`_=5n0/;'PrT@
%UIe=FOD6Q[-Y,Jm9!0H#2t1tR2FDm[lO3/q?YJI1nsb949*RbnmJt/gK\-8]A.HQ1^uB2XKYiJ=l3'#Zn:-1sq.2OSTZ/F8-"n\@
%K+XK&8`Xca3=?hh''Nlu'St<G[077&.dsWec'FX8PR9_(^`04+&oA:Y)L%YcYNOSq"aCNii$_:#EgY@>A!ba;@(+95TTN(4KgO1f
%c%P_r+WeFXK^WnS!kSL0)mIYXS2Xh%LC6!\S(eF6/$]ta+77GKZ:tV3#cOjhTdTe"Se.tn1NhJ@\ce8!bpEU!2A;Cu/tripPR'SW
%$Pa>DGSBEuV2'a"O<CgA6^ta>\07et5=ga16YP&>0FIph_@4.q:*7_%T%;JiNRt'H`^m&eL9P7b5jKhM'qGa>-nQFO5Lr+TFo[\b
%1brHnMfcS^cl<tK*1U#NPu,#/D)?Ta>)`sEqG]h/Gdno5CXPucV17"pgY![l"]rtrO42%[SP/K;)HY9XBP'R%>HlPG"mg2&ns`Ie
%6aV"JF#[]"fN0gWS3XQ9oat@p0\,A]R$=QPTa&7K`hEk`fldXQ+TC;Z@-9*`>u!2oZsf%`(BLohjl&mcg_S6M+At1hJqD!.`c:Qe
%&F+p^b12<@n]7&QB*K#`Ke^/ZM3t5L@2;suQqO7]<^RYsWJ)!6U6)@MjFX0I)-!*<7S.(S)/r%WTK]8R$04rj$VZ*d,k7/8D<;`j
%1)pMPVESGrGM,!NF=\_Pd'3mN5k'.<$5=?\\`B]^F;h%<1DF(OjHV*_*(m$d<9+DG+=el*Nb=PIA8'mT'\HgTF:c$`i!V<]'-Q2o
%[))eW1Tgg&3s^R+B&&XfK*gq\cQtk&((@JPaRPcCm]3"J3Z\:[/msbe6)LX+/"s=)(h<o6j\'\)-8TBNp>qK70L]F`_il3.EtIF.
%EEC0s5U-ul)R]V`XsXL9VOTr,+/:?Z@,>l*%=eLA*!Cgk0Dg@LQ;@uu)'nrr&@fFSGnPdUHIZ(_*SVWO#kgN6*!lZINVc>H*sQal
%><mR3Fu9F+]SX.r"JSWi'l(e`9V8eG#;Q##2?JOlm=TZtcQG6"n10/eUjfQX/KJ.8((-po/G!i]f[C\AT\]aJMR==h"UK]R<43rp
%<>_3nG0!6BD<V[dBS.W?",moRL9Oi^bOKPU=q90F[%t8Ac4Og7$NnuM&rZLc)dV4&)$oNXa\g@,`.XLLH[q?P!I>J*+nVBn]I*ka
%(ZLl;LL=!i!?>qZ5mN02+Zdk-X3576ndbbZ5-.o2)doPs_nIbi1I;k55uNV'`LN'G#ugJsaZNskKtM_*MHM@7Qqdr=Mai=&+H($:
%!6'K8"X\l8"Hu^6R6[)(3]c@KL]e4DEu$I[d"Nd8[QY\-K$a<eb_o4PV/@_tLH6*&5\t4m"ZVjclq)"jmt([FNa_0__5%Yhg_B]`
%Wkb]W>T4=p5qWgSZGVrqrrh4U+BZo8K@+ZMo1C_S(A_C/qEb,5YV6bg;!ji?*]hF^`VSe33rtcu9^]MZ!^be=L`)\MY^R#gDR^,k
%e9-VnGcV5Z+6+-k,r@;C"TB9#'*29)jJ@jVUa/<BpY4WW6*QsXRC^D80[=Bj`tY"]PK3dh60]KIm)T4gUZ8X5j.Y```K-#r->F.R
%"K%90'2s<-%'9(tAdgk85Ygih-fL&_0<cQ]2?hd2D%(85eB0C33]>!h@.D&FnC>`j7S';)g+s1]$92=$>!N/8FOOo#)b5f0pZMIH
%\j-5=\HQh=7M"<AMVO>Y^_W8&T&ZRY#'\+#rt`'h#Uh\sd#au=Mdg8'Tcp$c`(M9B$BKs:eIXG9GLR"r46d_,#&dVmH$kd9;hltU
%@b7Ac,VCc-bj"\'0:e4k*kIju2'!qqDr^m6:N!fFDMrWtKT_0p/ao#ce<]:9!tI!Hc/2/s&5PjP1$O=9Hbp-W&K/7^<NosFmjPNS
%_HBH3W#.XD1I@+;?stZ:17qA$$mV(+J58%1@+-g_;8V>o?T97f5_BW2.rAJ<TsAL+"(N]:(D%:E^J)\ETsU-j;!DU2.UqSPQn]&5
%-sA5?=@>hM&_ac=]1*]rY_>VI2&(&*fb@O='N*t:FQ03n8;ZU7MI8>.Ws8_TH?`=^:k^*D*-Q1@'SfN4dkV]1T9uDs0k2#GN$oaM
%&5g8?;ku\D<S21*@ge'2%u;*j`,hSe8[sE`Kd?^V_#5QfKTuk!5&f.k5oR$%5`gg[3gB4H>[@cYTZmQK!k0$qS:nZjXpuZ%Fom(0
%#=B6UGO10LdpTL/6^Fu=!.>:qT\F9HkX_5:FInOmE%TN<=;?L\nh@IDBdDIT<uJ=Gq_A<CbK=!,K,_gM*&51hGg)oo:GU$i,Q2#r
%ZD2)g!Yg4qj@k*?<,q_AYJa>b8%TuFlECTsEq+[%+qp'YCU;?<PsZ,!&.$LY&?!>8Lo)WJD2,Wd,:<ORJPQb3p_j3%-WHlfKRa+g
%b^bP-2C%i?n'DJ]o=h)#+_J$89EmPfV!"toN@F$)JsB6U30m@UVB>kKPa+rF.4s9\fM'^j(7f931Xu!j'J88,fg`f#0Y*.RN#Z.C
%5I9VP1:5[tUZoW/3!p*+)Od>U*$Z.9#u<E-s+DNR+F"B/K;#JYK!)A,;/p1b5]4Ur7=l@l]O:bjaU&BAU_ndV@`FU-EE,BqS8=+`
%_&SMQ:C=fL$H*?`<qr-l`,$6b">id0T`MlX#-u(a,A9csiis+n+0bsS;$&l@8CGL6B\*p<Au+CI*2q%CfA_E/#>?tYd,X+,5&8":
%$6-Z_7iX)%$65P@%X_"T/e@._K\2O.+gZuj!eX8WBM;RT5u??3YUt,^%71NIE4%DD3+ej\F(8Gd.[8I%YtW:4F[X"GUYVET(a[/!
%GYsS-fF&PF!M1R0A"Z&?W$k8:?PI`93Q.+F3b'=0-r'n4QOg0-PSFmp_l?3>q&u^&l!pTpR<+)?/AXMnpe\ic;tL)-&0_D\'#27`
%QiWin;F;F2gHHB^\PsO\ngq^Ep.n7in];Y9*M9#8Cs6,sV"M,`.8u$2W6)b.eF3\^@Ua6e'_aEeN6\\l+Q)q3XIS:IRP`JjI:F[s
%dggoT<G.C@6)[UZ?O:lFpm".>'[?kHScL_O*'CT.*@9'qBIO4e3/3OT6re$*el+kO="`)9+:J)m#$HK[iA&%4)ac4L[?D`^#R<V,
%a@/)todg,d-&F3DK(+_O6'adR^fXV0NM4p"6dHA`_(m9,eBA=dYsa1D#6db"#U_W%\RX&!JVJ(OFo>[CFY#-M`]?]\LBfc#.A@1h
%]j-Ig8\iMl>aH2006[M1Fteo.%5FnT2-M%^@&UIq/>?`DK3sNAH4De_E*cLk_&.>j>Iak[hKW:7;MCi[(h,'/*T!dSYZAk@bY)]o
%!0'O';/1LrYEI%,LqLc_(,Le>67?,il;C`&9U;AHYsDXu5'7>1(mXHuWk/a/VOBas`U-cULQu!JiiF1A[(.gL(1O;dV1u5Q6PO^F
%9dJbNB5Ii:97T^TEq.L%%ft\j%$eYUT[PnN^nRQD)riEj@q$(5p2Z-MTGUO<-".sB;=s+Z]<+_c!0PKV1,N,t<'s_4J`G.*Ub\:>
%C=@L3j9QcNJaB'ILs;m&n8)P-'Y5TV2A%br]"",,FtAW'-s-JGO@u?*J.+(*;>e4.@4nA))2AM7Wq06g`INfCPu<\fpV/abB]GLD
%Z,a8^C(>HRDt=VN/!TeH"Gi%+boYt/d!#MI+pu+X%>1Z50u\mfKj$i;+GjhoiY&!Jg$Eac]0hu*c_D+6g8R8tRC8FEE5e4T&m[pn
%PABrTdB:a\%4r2W&'_c'*Xhb*<8gH'A@+-)'KWt,kFsF^"IZ\G9!'KX<+Gl9H=XWMn_cg!R;OaKglRSfCjO6W2A17]5!%ak3]N_9
%jJ+0X)I8P@o.u@0**a^)Hr9/4]?LWbDd5K(>/>/65kiDJ\YAKOU@/gp2U]SIFDcml.UX09Ukbp%#)VTUjK?NGjTElI,00ed=<sH]
%8K\G:+e[fA6-sHuJHPoAkTNFUVP'9t.0al3AV$r/eY>/rPYR'iJRJlaq7'jgQ/rNUQF=50h\!D5BIeZ@(Jd[ke?tl=X'jA5Wb$[!
%!#540k(,b"M&+q]Vkp?Pa`[KK9)[o0aPJ5fMLfD?kDTP00j49GkcRb9Ak2qBm1bneU(Jnrh?YXSg1]N_ZG=RYZ6l/5;@NZfEV5tA
%&2cJ6X"rqibejg9s7]E;88r8$#b;_6SC7l-aUY.s6cUK=@C)nL<,tro-?M'FWjp15c),-bHkC$MGoi*tp-i+db1+:N`s`alYJ)>Z
%Uh@%lNDq!k)-@!AMYF`s/D=[Z6Fj2Vfu:79]i9!1d>)3n*8'9UU/N4SdpO_r;_"/Un3R^rOn60/o]!b"KR/[?&J=fR$pgZnaRC,g
%O9SZ<>tUZXP8GQ6F9WmmT/0Z%n*#B*;2i9uor16J:e>Q;`f`$mFG?4!a"p0_[6FQYgtU!EUB=g;]Uau#>dJ2(J\PpAJ_>S-B#p6[
%V#DC;:_e7di[P_U;=n]0Ht%a%M6"=p+XfT?Valpp'jK\-0;(9NDMZ7A'EY>_a>^$\=\`12\f5O-ICR)qbL$lHY:HqI`0qb'%aeoN
%XZ5U/9$>%U-/!6iNlGq]4(2`!Suc&("2Xp??K+6oAu$kuDn?dc2T&Aa'^4nNI,#$'XG?TsS'282TV9-c&[Qj;E*+hdP.C2fr<`2F
%9Rb9BGi_g41KH)Z&b7pP#e?6JL/Ns2A("j9K2=>1nX(JYl1&c%R/7+M^+;H_Om&iMU:`jdia@MZTna4:S/kO^$'I-*l,YPL'$r?f
%6m_k$;O[Gk.1r/Ij!fle0678*isL.T_3=-edL*S1m%XeALS:<uCP/MR=_9c_@>p<gPT)h_Kb?+K1d4=#Otd1^&ob6a9CRn#_oVr?
%ln1IKl\)>_#+uZK-U9RN!X*NiaRVdp/gR&1?3sj[)!JoA?sTrT)?GIY4bKpZckqESiF##/FG<'NZn?!P`A7Q%L_C+8'SM>]#!6"Q
%E(W@s5pZtLg-Zm?d$*Lr9N)fj09m'N_)V:"&>L+1.5R%cH/nrN5d&tq&_dU+PGBLkPlRRVD)'!mYnYP]Np<Z2h4]#c&4E&1&sSGM
%4O3cmD@aYq2R0uL6(S3^^?QU=9h?Z@jSOQP6X+N2;(r%HCQscFc5Sq,!g,f%AHTVCQBs)lW5O4<=CHLbMp=L4<*DnTb7Q:+2q4D2
%7kB;ne'8Q+9<JpDCH2*j4=T8T6s]S0M;_jtKY[spTjuIOeN@PJ8ruS$\<Q9<)hJE-%+T$Yr2%j;`3cI+NDNt'%d#$U#\?0,6FJ.c
%nkl8R!`[%rlj:?=E+VWo;s'WDaMX*;."$2Vic1nA=H-Gt3f'HLFBS>?Ll<!2T8o1l#SC':2QD14,2lD+&"8$p8^L;?-]0%epIkYY
%1E?b,Z-H(R>Tp(l/0D/+$q'Q(RV2:q$'S`>om5OJdV5BD)Q4(.NiVA!!)-!^`B<BF_lu*kZ`'*,<@#th`i>G,Ub"@Agl"/%PU2cC
%@,mZ0-l03R:Mcq*fk6N?MjdaUM.S0!6hKGhOD*gX8jkDl&'j<VL_A$m_)=Fh&[0O$83@m1"3[NH4p7)UK<n(om:^#ra-(P":-MIN
%,@W^o@2Z(ZN>ZuH:9G%Ic#dM@8/s95p:?s!q'7*h37+B98SN0U)+lG[Y*=2XH'lFDUQU:d\h6(fYq2XPA[.n"JPT,\S/]&sa)h(I
%h[/5fQZS)#kTOG1K?urfcpHa>&H[Yk@YJ5&SNn*fjM7OgVg.rFc).:q&c2J<Tt(Sr3FWD;6r\=Rhs_V3"Fi.'/.QaciGQg,pmsO#
%[lMbN(aN*`e,]IYY7>^kk'G\LEInBf/SlSZi1t<U99;=O:Mu&;GSlUk%+1IMF1Qa//HRC^D'M<@:o<4%L*=Sd\Zm."[Cf<'5hSug
%Wa\4c`Pd+,cA\[iL?a]?")DGQ/F.!-6b^;!lhKJ[VIA^g_;fNI[n]+JDin]#9P=#TFNf`,8hH^!Z'`.;.Pb:r@WZ--Ul+fKDemcK
%_C36C-)CkSfFgbY`Xn(M,#pr_-4q!:&B)/R`@%4HC8ZJ4St)Z_7R5*!1YihXTn,>J`LAe/cpWttb'p=mQP7X===R5\BL@h2,):l]
%"!C4nC!n.j,XjmuP3WQ?5(V7=_eWaMafmZVBdBF)=s.G:\CsKI6-le*VMq.=VL;458PGL[[3:FE:^`t[pOZ4@^pp7UW@Xpi<?]`D
%E"[C""s:4ck:ELTgIa?A3YG:Z,Y!1![a(e+dg=1O"]$9D;)..B!Af>`"O)3r_UlcL&lJ6GMT??>E'+CK9MZn>$qF:*"JJY2F9djU
%H3SWjJKW^Q7G4's(_!,p4eC2i7sUdfIcS?_,=qqA+'fDQ,*4*\WhDEO<Wi>/`F8t,M,=:6QDH7\pVl1b#s<TE>c=?S(6=l`BS'g@
%Pi,.F&"aT@=PZRn,Knct;lgh%!b&3;F.S2/Ii)c"r[]6!p%[J[!Mt06TH6`mRnQ"u$A'Qp,cF(-Jgq^oij,>(6uffW<N1h#n46>;
%_Ec4ZQX%arr<Dn@_'l+5rZuY^#=ItP0\s\q6KrfJ"EYc9ZHXEkGtdbPBFHmiT[oGr`mUdjjXs^9,,0A;6oUa+"6!smSq=sQOI\(O
%oFo\M<"LZ38uT`@o,<2$4sSFmgM!god-'S10foC;Jlu'94";Naq'ad7e?(^i[*c5A`DlVO!3.JU,sH#mme%2X+<D;D)3fbJ!fau)
%[/of3!q?8lQktD]6[Uuf[,mu?cHism'JKuLfC't=2%=P<L8'H[AQIk]8Wk6M0/4,^`I9-t7Dfig<%UW@H?]F3)],.3LajMnGk/"U
%%0K$k=cPJ_:!WOl@1h&-@oWk!"E^4>KFuUjo?eKt8:sn$AI2W3"iR2E)=XSb'HWjf@d+(&@KK$uG7kMg4p9ie#b,[6NB<<g^lgSG
%+HZC7'u5N.`K(!oGgWj([O_4=5gUATL]RM0+G=N-#Y8EX[BbIZ%O%U7J5GLh?q3ls-NSGt494?(D?A8b%s3MqV(^$Mo43H?6Ae.R
%NTX5*/>*i1=G%V'IX7:ca=#cY=>:s7Yn4^W`.XkB+QS](d4Y\B+CYEaIgG%eWZr6A@Bp@R>Wh6_&]>6n&0%'5FCdB3E`cf1pC8k)
%&7\hNX,(JGktRD3J$(7p;6T*O6g_eGK)H]P-fj#L7%)Ob_>&<V"l(FI].+S%$388bXrcJ@A95U%c[tCQG^<76i#Eq))Icomb3<qg
%N+HfK4XgF/RU#+p1C8Vm<#e\-O[)TW#?2*WLSBAs5<0mXe=#$rYjR/0)s#H;a];?2a!-6alGp':N]'?3>\jP<JNN%i2AI.G'=s8T
%UA1<"Mj#^%$6'7H-\gQ2R$^*)#Tm7Hi`ZMuSV`sLnaTHlh\43-kWTQZPVqrm/h6PW'?,JXXRZZnJs[llg_.b6*O'.n^cX$1bnIe[
%OYX"f^]tqVKG?XK<38%C#ektn.)E6#O<6+0TuU/aUHZ\bL8^;U!$1DRkN654ghu=!o>N]]$me^OOloB0k_^t+h@,Ib=W9FR]J9F@
%C^^#/$.C@ii9JQ\m/f!\$k.]*aGX`mS=Zpe!#+\8-OKQ;")[l/@$Jns>%!3=WUMp[,QutXj)T!69J?$haJVpH7>P?R+?eSj`TQh\
%-&XbDg@?s?a[k"r?7.NJ8;ASRHuZ&2'3KN'==ZcE+A(g<%Gq$i+`mc_9Whn@+CRgH,is;B"8qG)*Ag!80,@@O+e%Zjg*2<=M[;]p
%'I=\8n$"I_Vo)WG6KO&+Tu7Id+g^Z`m(a0nYZjL/deT,^TOVgdj;LM9J#%ki)G_mrr<XtV-IFX%$A]5A;YC3J%kWuG5sWjZ=P<`f
%3NPD`0ML_n++S'MHo6jBq^qRc*oD4?&VMtZh#iH9_%UJu`L(S$;?W]bHI(.JJe8mX=?;HbJLDe45S/>(J0+PVPtSiM0->[p4dJSA
%Mi5@X(l$^KjGW[]oX#doA)<Spd1]S$#st@')tI$2U819pA&-Ul,l1X0Db*J1;bVFdK;b@T9K4@O]CT.Wj02N=n@;%bBFSZJnBj_G
%-fs?D$i9'9@;KLI(BCMiE#00d9Hgle.hr]8P*bn$#mM0E@YTr9_/k%D4&auHk$gV0(hMTe[sg?3XRp-4:/-!SZ"F#Q][_Rl2$U$<
%),mX-_ioHVH!LGiq4^.s_e+2eYE(s\*m>RF#YnNIgLmc7j[9>Lr,en[E#B8<+-OU^KT2[CU;M%H*oE-I%>T0>lJ(<$!JFj?!a_tO
%f<#3-7lA.R?:aFE98o=_o*)qK1='Bnq;I3Q;OI#p9191T4R9&q_S[!F1Xp)h3RoB,n.nL>9p3AgZU[e9"[*&a3_UoT+j(!u>+"m?
%@S$rkWu_IYiMaqnM&*OE/7TkUIUQZ]/$9N#0T4.5LWsX;0F"?5$el?h*FbO0L=q\j[a;>t(_*b?iICoZj9jo\BR&N+Td^_[j2lft
%,?W"HUMe;DqcoADq%21gG[$\VMHF%K^ljSL=usI7E"*>WGq<EiDi"]`$0#oe"mn&#&4f(9D>=$nkDPd7+.oD1mpd3E9gCmdjE6"G
%`)L*V<7!CF"bFHM`X!iE/$]oLkZ:qCX['gU!SEsoBo"K(qcJa,#R]eX:W3m(b5"pfaYsftF3u/^plIFe+O?;2[_*RpWC.I,$HOq]
%5FaS:o_DN=1#fFUr:h37LZf/6>V/DUhpZHI,AW1Kq^`M,Q/85sTi#liTU@*$hWWWt]'bl%mW/IW,Me;n\GRU&hp[<+![[2ja#1.J
%$sdMiPjn9.QGFA&@-Ynqa*7_u8gA$5j"5t,GFn&-ma2do,R^UT&;A#bqh/k](o@Q8A?Mrmdc^f\</Q=$PN.QKdM/8#pSYY27ZkeI
%`(>TWOr^jWRii>-<+)]Z4sUaL05Ar]OT7_/9Oo9/c)*k+&S6g[HW1olASL3C-:;OnnFFnLdmN9af\f\9!C(O\V`c@A[+jSt%P4=7
%,7=(,9RQ,eSkSjfBU-4Qnf,ZNi>R(dAJ!8ld5G>W:$&Gd*q%VSnR9fV.p=Z2,p+QMpRBTJhW1]@2+BN2G"'`>/,IY7TkRg&8.'Va
%Qr(4>66RWDiBD83/mYKm2]9t@`.>FH5s3F0Lg-&sC_8V!H<^JWis1@YD70r3b`+UOj(WTi"?uNQO$q"@#uoP7IYq:`WDD,6\KP6;
%(>,dIctnmfrtZ+h$$'K^%/79M=[F]d7`Z?H5#]`A\Nr+9I/ULPAP;"N:[Pk'qS4i=-Cj[m00\8p?mEpX3rct-DsPe%\#t':0`RhQ
%"P?1iI!@^uP:+!/!!*EtONRXsA-cP^ML[<.(eYUf^X$%um7m/AmqZXeh6I1ZAMCN]*tPQEjM%_'e6lY(VdPom_@>%-bY6?l>`OJA
%%[%6.UK)fLQ%COG:u+;i]:P&(/DRj2/O<]cPR8`e1?@r6q^C)So@P9K:mng:;>(urAkh6&E>Pl1%VM@5.U#?H)rP#?pTq/BOH8-:
%k%AcP-4PtC@?1*<B-h\/V)/P^+fYR-'^e_fiL>SD)Jq0eh<*JQIS,(e*$>U(bLUA#C??OHAjK:&=IZrY5gT]Tk8'KITBt6]TqYK+
%<kV=O1"$di=@2i9D]LtG*aQr`%E*"r#t`(lF#ZKoDd\$LhWM,2p(cm;[mg.f_;)%kq'rK^"$.rdN@242m<8Y,17^QNS>,$%Al$ct
%48icP0lHth)k$mHNTLeYaM/+%X6t*JAc?`EOC2<0)"%G;IHWWlBKeY'GY$5iN*#`P5fbpK;<NQ\2Rklf]gPZVTOICcRT>h]/preC
%Z!bcafldE]F9ggXZRI>6<!fTIW@1'0Icdg><"mA4gU:&\RXNHrblce>>o3]t^D)?V6>s8/h'$68_YLeL>O)^-*=YEtR<VIr2[CuK
%bL59\rRUPOQ;QT%[!2p@;o?%WSo^u>GR)UT-pL0Y)`@MtajEdU/C*m"Df(AHh$f6>#$(j.6j"#fRs";L\XWt5-K&3$GkOL8[QkNn
%7/sTTFLGN"R`SA]MY('J^2kY97,R[q,Be[Q\dS1$kb0sZ>8s!<;0HHL7[]nH@)5Xt12`R-1c%Q5'e?P?l+9&ng*Re$V>0<n0^OM9
%hQ<o`l[lb_])gM@7qJ4pWrTbDNUI'EVJMIdAXH#E<&WKTImVjdRUnl,4XP\P>"42G->bsXhB'nX5/rsc[bTH%5VSFCT%5@.K<OWe
%SQh0u[%*Hdi*i#9Kn;EEft;`!5pDYW00=cUk_c_u:Yf%9>f@6[S_I6B"(h$#R4(@B7U_L'ONqjU(4/2cFm6L$=#+OUB_]sX&&csQ
%K>"Te5iWW7?6,lRGQ;W52e`BC5/U8ig_&YC*^`NBEEmR*4jSbYLRF9b+Tg.WOH5*.LfIkbQuSCAZ-aQIKF-#j!k^p<#/AT2rP<W"
%.fq8:H;OK=pnj7)hl*-0!V/IhV;73tKGq0i-VTOh:fA5!>r2POqOM#BDE)OF]YE3hXD8a&SU&?6a%[HOa-kZ%m:L:JMVBbfgD=Z`
%\<CoB&28\pA`@BP@P&\u9^9[%Bt/'u5Srn+R<NgK'TpVK!V^2mYMCj=Ab\=e^Q6PmqIkou+-i<:-j'(Z4gi/jroq85%-klSS0f%S
%QFGI`L2XYE/&%2SHb\dR*Isp8TkM]o0a[uE8(iu1j*-6XVM3lq6@+rL=?LQ^o*Q@`s$Arf6+;4[FuDH^?e%V=V4@c[B@[u`?7#Wu
%q"0!<?Y@k*.1_Y3N%8!e=AW2p`::+UKt9/NklHAZ_#GcK6I(0J)j%Iq8>X"79T&:=>gs'-fc2se$@^1qH/Qq"qJ<jS;^<m.*mOE:
%Lk4-'f97*Jo]L=mh>r=;beQ_a6)8d-/$%EmJ<]<^<]_\7ihjuN$M"D,%N0_"U(;H*%O`t9(fm&H]gbb)f+(tJc+jS'$@)`WfCRb3
%fB^!:N-C6a=W$!hWoQE9Ynueq,Ch,"b=-I]d<Fc_P>1#Z^X3a5K9F/P-LD;>(m#606kB.lCl#q<fm=VG8E3`(K)t;e<qGJa`e/tp
%^I)=]aEP+Y*c/?A)m`^[nf3YF^r_qj\F9(]$IOX%o1alP=a>jBB5+%CMEZ69"q^MX&o`2XLPbBoc-q"gG[(rkIEtQ'Mo<>UdtM7'
%RJO>BQM$=)B2)p/p%FAsCY,Z!]ADC.a5F4%;e;5B]1Nr7ZF6cI6*/<id:Lh?i%c3Wh+>QR?A<;u"TMZ]/g&C8>n^LuD%rMr(tII8
%p\)/lp0!Tm8BrFr2C/\]%1Amd>rlAVo=0(N3?"ZqAUsVB/ilXL6q+2peoabjLWr5R@2fC%Slp2[Sc-FU((:H+m4&j$j>(==a8J&4
%-G#/)(L2^>X#l/]$_BIRq93-F$d,;O^DfXgmFo?QE:&B[GLt_*?Z!W,BQ$sd6+#h/YbKXR[0J%iN1:\h#/mQ(M>5oMaCRB6f'5#3
%H.UA7EZ$eh2Z#2n]'J^LY-t@Zp+g5sK'.KUR[e//j%XV51G?6HKiba>m(8T=X*VmkeQ$lJfC,0l12<TBg,Z5%Y.n>Xg*/hBhQAWG
%pQ&oT$e8T;IjR4;gF,%:@oRXbR8uPo[`]HRb.Cg^bs[ma)[4hWD!)g"^A0&_/_\\Qm4-B"FI3S@;Y&@!?m`GnQks!s_Q,bT*'\A,
%7`@ZqeO:c3Y2;+aH-Bm:fo8kb?%6c'4fY-pLQ9u^V;`Xd[9&8jnru9;FDd%l&t^gUooWa=?q2C$_K]#pP7Q`RYSONWcVb@:&UR`r
%G@QG,2rnM"Y8s0V:(R>c#bK)5G6jtY`*O:Qct)j%HOWu9Q9iB,1BlrEJqb'dgoA/nXgV:8EuITXJ+nZ2EKQiQk1u*Pqr"=NK2se@
%o5$OnE3"AUGo,lFERi9@:-tG'+s.!_<jH1q8\(':OrMNa!j:Dte-=qel#\$RWQ$;JghGh:3`#$Mn_"AjJd;Fb\g+\Hi;j%jift1h
%),u4p?PL#kN1mT%o<#,Y`d<uXHksPnY]f]9EK&7\@CDfr9:CHE-g@Vcb;'b;$Lou^_hAX8UUKn_A`-/NpJufmXWbn6H"8VeKMjsU
%e7F.8aNh2>Q73<dX1Oin$RdTs9sPYV&JZMM1,pI&''k?jc4,m$0r>$2!ZI`[54aL_i/APtN:[Sd)m%)X3A3"q1!N0rLI6klU8dme
%LuD$hH2jV5qIPR%%I8X^akO"IW.:F(YWRi2.a#U4`'e7BY%!fOLPdVM^'Pi#)WoCo&1E)>U!e_]@b?*CQFS#6o;hu3hi^tCNWq]F
%Q2_2hP0A\O0,6bf(fFQM]d'C>mUcGm[lA??G@ga0R"8e5Fb4^'"B$]h+=J0V/HbC'RmKphc8pl#`^2_d@TG#NC6pRT"Q#:gJ`q5-
%F-r\]S47?#,mdKZ7Lu-%Qs(02Nsu49GQiBNj7TPt?"VuQ@4`7O5"6Rn)[9e+k6I]tRkg.D)As:&f4CtclWI8>].NUI;n'j2BffF"
%\X?mC^b?SNUEc$i7:]:Pc9/1Q0r;_1+U8h#Q$T(/b+g.2JJ2?FAMR@:JcqouWTuX#P\[PW#EeBt]JjcWT=G1'S@e(b8A'BE87]VG
%JrEZP,eK*qd;4n+;^lEP-lVisQaP:n+P?WDo\"ZgWNuuOICFgbGg)bGg&46bZs9;dpU]u3eojcDpD)@.8Vt$bYP5muW3:F2rOu(b
%h;'B>c_A<+b&RF#Z*7.i,t6JgO\7MH/pZPN.#Wb0!<fq&WnnK1alIrG..eNm;7!SW$Eh(s+eq/"#V0cu]4-U-6'E0)pil?@+qQ\G
%>9'I=!7+GZa1Vo\=U"MLQ)BHS)LhRrHW=(i];/o_PSb>RM*eU<Ruj?E/#2#^82anP5j0>,54X6"l(V$0C[6nAD3ArRd5Q^l9DN*`
%5"(2ZI;7#Ua9[</V:l'u4L_t@=P`(-Kl(Z?_aeeI2>!Nmf5]a-[hcd[fWXY#JcPlQ_#;u30U!6T8.U$,+$#/Y=%6^Yd=!`]Rk??$
%;dG&kLg]F3X[VM"MpUT(ZlA@fL"m"O@4,mDNr6>!85-Mu!l/7q-D:?bAe'qWF*UXI[P+(\325Ig?,<h))5fj\er\3kS0LFd,&[?a
%b:^>F6RC,WY/LPDEK]f/i0%_:T'XT&AV&Hb,&%c!_Ie=f68?QDiLFX%Z<s)kq<DeKR/`gHPiED\\:LtfpE@>),N/BOR6PkigC6Q&
%dCK<YZ5J;P$!qQ_N@crGJ(o8Ek[`^G\@&i<_Zi/frcaZJ9n2Vd6i._*4h/**]NT:*J&co:6P'I\I)#.a_&$]>bY_bP1GEOD"I^H)
%@kg,3qDIF8B[>:]V#guDnstnk$UgL<\n9\%(e_[s9qQ%%mDWoBQauZr\SD`u%7;],PgBT$.@tf6;;Cll;0Q46rQuiPnj5use.*rC
%*?'#7(C#<J;,kfe8H`L[33Vf5V,k`%DUb5+Qt"CH;'UYm(k9`II[>XgNY+T34>8r`LU.P[.9I]7jZZ9WM+dpFBSI,D^fV'ji(?J@
%BZ^OU$J^aQ.#8rep@RD.4b:R$LH3Jl3t5fK+fAS>1c!p9;Tb+]#&.26PXA+H(hR57T+:[[Yq!TT5t$[JQjh)+6OQZfN=pjn\U@t@
%aZ(t1:_o,tmF7uNH/>r7ABpmHc)'RDlm-qh8ep2IX)+B;2824%PM'A_,N1;b](TVfc`J3'o@u)R,+`Rkm,T0j7[Ur2f!u2n;]PFI
%R-J0\O(FI-\[t4T,'^_`&tO;IqI"d002/K5JmnSY;meA8R]+BRGfmsU$/cHm8dAEJL(Q7,Uf%b*.hbEnAe+5a<@4EecC%j+0o"Q4
%AiJun7'5LE(//F],,9;+e2hnqU2!CrU0rdBn-U$cQn@Zp/o<rOi,2rm?3YIE5US>0\LdeCPK`0QWg/+6Al9n4!HY]<AO_KTPnlt;
%]bS@WM5aM4!"<@BWEK=F6eDi:poldf&CS")h\]?DCEu)62l9U[*'b.F\.600DVm!=X\1t#o,b<%W"g,&doT,j8gTAW+k:9>[E_O/
%WATI-\'GBd'+*>3Q@4kdf^PGf>3@RMU=M=BK;eH"CF!YkRe5j87'0r24BV3I*Qf3M//mI8dEUTESI'6Y7X[&RSBHq;6QY;gZ`.m&
%htI]dc#$3Hr91t)*>#kV\\U3c.^WS;*jtUWXX`j]2"4dT:Is`<e=#5uCX/IPFU5CorQ-`X8;]R)+OtT@XA/e`,&!NfTHN7[@-pB'
%k_WDPZ(HnjL2Ah!gE#nboMl#tPeJsaGl]Y'*OqSqgRlkb(i9VK?5&,N'YYQJ)-EcgnQbE3,QZ/r3\J=]Up3$f7+el=(pjOCHTqTC
%-gJO,5+;4A/J(>Qc/qk;qUu759"X^2."r(eS\p&;R8'^mhI"_$q\?Z8n(Zil_F.q[LdFIg&8<r>j0r;;Hplr;C@S_O7Co!C&ck-5
%b\pAWg(\W.r6<)SM_?c@pWJ?]EiBkK0O8mY<Z[BB]*HV)*Bj6ZgN@N^V43\)OZB\>P7.kqm/m">>)#UbhAWYp\s)^TY1RSq!JCSA
%20rj:+E'4!.H>/VGR*k%>IQFKj2%7S7h&h:0k7R4oFCpI_GM9N"/^[ej-CaLjeABY#SZu>Q6$*6J/P;$&'9'eg[$'CUQl_/F:cTU
%Ysb5?_(Qub#jJj#1u#R\e/+3k98FI%DoU,>X$R9"FlELVit=r=$EB,P'Nb>ZDIo&0U#7q'SoHn'.d3Au'.L`u$M=F%J6^7l.Ehcc
%2(-i\?KO)[Dn:WCB6fW3%L.EG%o2AoV?sTO1len!$8Q1l'J[q1a5uV@fsRgQ]UA9.p0<otciQgW_R7i8!gkI$JbWXe<n\P.A$_XP
%grC;I$uW(q)W51\,2t`GfElA;lEUfF2ZTa0JG(HDG]\ubmj;/JOVG0.#A9/SH@%&/X]Tjrb!X<5-.%tn^l"7#o/NU?a\UP<,hdUr
%]Im)!_Cd%f-me/t70X&(.A=?J!oLSTKWGDY.5[9>&;^SpRU,<IX7S]o)"0l(_+Vr6::K9T/5!`>0h!8RpHRb2F;5f7rZ^&19"diT
%T]m`]Ne`b+6l0_6>\EKIpoR3RN4Xo8,.WTJ*3*\E,o=NUa@2C>8Jkdk/LOs(d\S5^\Vg*&-PDpjV5+DAo1S]3'&&9g**X%EH_#0V
%No(<q+XkV[(qCsHZBko>L;]Da4TWU\f2+9F9YA<nLRItS7Zni;^l1d*5m"Ltg>kt+YpKqEMkjK!g_E+La1[R!(Q9a[erKQ]ka4W,
%eB#8L<Dd@<a=QifAj,+sJ<bkf*_RS\KO<0,6$qB8aG%Eh33"4D&htuhY7f<AX(aDO#huX+GUMu;(QsRJp=XmfQgnbu#dD05)7a?u
%d1EA//df3Q>7AKt:9I;2&o>f05<oXT_N*gl6.fl7E\b_Z0[c[p^NDq!*I']q^5c6PKG5WaS,pL19+4Ii;UpmX=8W<."S]idrn[-^
%_cm\H`%_%"*&'>M<.M>$^4<>Xr:'p;-3Q<fjPa#"g7qtb>S2G>/2@#(GoRB["NS*g71H.i:uNio7'oJ^(2oPp9aFb6S2h-LJ`8sF
%rnF7lS@3a1=bSh3O`s1rQhb4*1\IL4jrjdjj_I)BAsbR_UVfLYT[dfd$e!=R;R2<i)4;CQS7/f:pXY]@-:l2@e!B4JJ5l;>F++F\
%`N:gp!Rp$p\1Eu0a*2r;6'QbrEUaoAnS*gmT9:P#Z'NL%a)s:@r4UPR9UcB(;Uc%sj727QlGoaBTu9N\Oc7gB5WIYXjq2F)3;s/q
%?Nf@20YU;a30&2m;8e`\XM(poGC`Nm5g;le!Hga5S#+/fg]Wpt@*Cdp8[5p&7Wd9SeckWKlKcU275!1A&>Z_(B=!X+hmIZOjbAc`
%6A%prNRi*G&\*)Q#!`_*]f5frkGS[M`i.f3GhJ]ZYBtTP*+n./FsaDO\QD6XC&I@[!e1;kE`B-?%dKAsG:54U!K.Vk<S+X%r)TZ=
%OS(k,m,6S_Im0^+UG;=Y:V\=R5Ri2:`G/4kJVhL)ckZ1=o9faEmV]E]X-pmlMC63d$c-/&lm6[1[MXn/#PB7r_Fd_l`g$.41V(Vc
%Q2#M1c<\Un"^'p%FPVjHOOMMO9BsC*NX6,6S*k"6fR^'!atE.8$j\#f8`s&<LGYEukELPH7JPSHC5]VmQNcl6.K&`uoXu9oAJY@(
%ZB4OY@B\+>jg$a_1UF2lqZd`<(nC:;5p6+e`;MYqmF\i@3r(SVX+<6_R_7;GTL7!@pD9D\r#??12.SscOJX8>W#cIYZrJQiG/ULG
%WN(AGKpU$ZHT-:ShX-C`8\=DK,eV!TUV2g^=VYq9LJudl3`o/%2AZ_/F2;p7nP^CU?Fmbi4%VpqO#8p9][OIQ_G2BfO%"5TS':?t
%`j_gC`CjbOhbmBP9p[MZ;\5-rbgjt%ktTT"AfMjULmilc!$S/Kh).$T^^,H'5q]+gIOV_V<E7Z4UYZn:.47DTWn*V\>_@.d<OkEj
%^<+pN<n^7"*4r"$I_a[$Pl>M'mC*5+[-FYZQg\+1mM,Me$$U*GWg<0+0Lo:=(J5CoM#:Ta'ggn$69nBMJL(LEHRTRr*Es/M[Ph`e
%5VDlec*-+4FJ[@mVabb7N(K(kO[nTZK2_$Nl1H\jKQ9#"b6QdkKZ*DYPWFf<VdS*i_HoLWP*I3gNnmGOPe4-cr6<u0Mm=;k&&\W\
%A&+cdZNPmJJp*%-=\5rQHOLTId=;ke;LVd&c"a),;$HEg]DJ`i#VbsU3^GSTDf37PSLA.i+;2=F\[)n1";,S7'[^!-dr-<BHr/Y\
%]AB2m6(YS!15t<h;AQ!+p*'XV'kn?:*KrmW7Y>>\'fn>_jus.7oQ72fQ_t)G[0?XrB$YXQ/mY%U8<3pi?>2H3+PQ2m%2E&2GpTC)
%CVQ/KTa0muWpB4QhpHZ:o!^j.]DVAZS*SlFp[sSUM>.n!jTnif$Q]e?2j;fN<*@f.a/0UZ06_bgFh8cm[TC6?XQB(@96L!?U?]=;
%FLK1C3O/=R/JI!n<*U"r]%3_A\u]PVs!\:g':?&^s,u:>a:<mW)Y&kc)rhGNI.m@lb[S3)^biALl%U#*(]ARWU>J36U?D40cg+$G
%aA+Nq#+_9&-J_B@-/-`(=#'@de0Tu//pr/+&EFK.QeI%+]6r/\8[nJA::AQQ;ek"kr_?_5R,0Pu"WkDmBq%J#aISqQpn54iG?qt;
%EUgj!bg+7[DGDW'F!9gtmVr4T0u]C\[rg(pn&s*[HEQW*<H$1N5rRPj2K'qE@6C;q)#(S?U<071qlPb&[.XQJ<:IW1o2k,=#g*e#
%6ED@WOu2V[c0CB0BoK9I,!fos#^f9/4HBh5Wp]N8GoTD4j6i=/s!(RlN::_%fdi[lPV>iAI2#pNn$ZHHIMsg"Jki'`4Hd+Xo1*_+
%3?DRRmH$q=`!BmBCSf=GibDoZKWk6P,Q>3/Kr*S3dWg3/3cQ^.&'s%NK#M\I^]ojqVGC?/mS$)'IKF,q7t^^Q]_]`<<fFia>n7<q
%.>Q?0H<?8aGa;Ppk9=-GnsdpVqlh&dD$nt0rfi;2j"d'Is#,?)oXU&8BRC:",E(8i"Ri86QKhpF2!Z4FZoUM9OM48#c]-m@>CKnS
%jDb==6Bfis*7RYhNJObK5H[Nd\SpLMf0>o):[l\CHPY$7%$m&AS?1Q]-q4V/k0WXi%(@po$d[Ba5*=q8;`m/.$-H+B=eU@p>$<MR
%:)AcLiSeNHHK<_nq:"8Q@pf0r3VH*ni7PO<Xc@gaL]%@rIa7rtNr<O#N!+"CJd"Qr(qtE=(A:,+eo"b;5L>=#4'PNlQ4M!2U5k>a
%+)f9u:RRi=o9ej?%JS;s=:%YG>1u6Kd'U1Q<VE;CYQX8n.f)"n9kXf<H[CnC&#I%Im-e'8O*c5=rpJh2%l+4C\)faL+\2W_r.Y]E
%C)6'2qtS3e21.4qM,]n?5X6TQYi=er44-S.XCA%+q',h5BXrWjFMf_<qD`Wi:[VHV/b@HfQ9<H6mG):VY34*HQ/:MK5GTEOJ*3u,
%H5O_WGVD9qEi;#O6&:[i!RG_r@,NDhafit>(LX#WM&K'kpL"Eq*pGq$LmW+PPbp<^U%'K3J@\qI#i<LM]Z"R]N_rV4Oc/#tPD8>P
%R9NTlU]>UVY&pkq)3Csm@9TGBH@5ZsN3foCNC9Fn+qd@H`%7D,WQR<;C!i90aT)\%'YA,?QU@GIDN6N&\Kg4!)E0)0QD,9KS<?C[
%WP_+"U<+&^bFR,uM,jC[QDM[elJA<a1+i!6O+]/1Eo'DF+a"0%n&7H.&GG->oH_2)gWYNNK*]r4'M+`1&KFLX<POJ3XVVehP?IoO
%a+D&Xd:*&U^FGg,PiDJ[&8gB2#+,(jTS<3B1npS_T"BliZd'a5M!of9`9=O`Vu]t^\7HuZ+=/S-ffI"V<M0*B-NW/r_^WR<o-12@
%fb=IBG5QMBBn7F1U1@;'P'9c6?5pE%Q[r>9-/KA1pEI<C,k]G;-XS(lG0m=k:#B6@pA*Mn783>Re80a'/X^11+2?W;2)&h0X(W8H
%O3loYDo;P)d7r`49,VPb+pm!F`&i\*DN9HE?W:)$*jF^E4Rd-lY9=C5k]RNjCr%`=Nh]RD%5F!Lq7&m[+.H%2H=7c:h!CeoTSngo
%d&OYk"F;Ds\"bjMB5,Ci578EI=Bc"<Xh:(Y"h^<n]]3:G[N?t=Af1S^PFs%/J5IQ_Jh_0fAHqc=nqZI@QGL/$%uF$F:1at%Dr_^3
%,VgCYR)Vfkn73dkP$04aV[*cXEWa)q/#FiD^#0HQBX<5A,b-ge@lHN"RKgSl`4.">(!t0TV4pU]?9C!N#9A-3:E9?YEBth_Vg&[s
%d2WdEgTpW&2iF_)e`Qe-.2Mk2(3n7Bl45\F4(A%oc/_EOWZ"bX0s<+B1D'7[jRnsu=fdWRUt,2lVYVY6qY2`e;KRI-c!s:=^NKZM
%Uh+I[Ddb;__dn]4'--:Km!ul)Ie,;8T_Y")GYSDaqE83J$oqk`gR)744NiEL,leS#8k,_$XjCOjV.E5`Z/Wg8K3`l&7<Vt00K+`1
%bZ?R.W;'Z=H@MS@4u4%6\^I`e_h\HqAdapnD[$Y]X]H`6-f"*\FXJY2i&daH.$Ed"8A"+'7L(_OJrnaN1C;aF3+5j]?9n-26F3P8
%`-%59r($,Jbm67_PTn^A"=AW-E\t<MKc]LV&%'K?BQOu`"\+l`4q@k6mQZB2YN[f'=@9KtUP!)jR;:F%fgi?e*$'f]pq<H/bH1`U
%a%!4:%Uoq?]Q.^u.J1DAir2=BW`]LnL5$El]J\RFclIp/pSm2Wg1&p'0$eOVR='K<rMX-Z7_^[^pZ"1`"S[-%[m/t[GtS#k0:E('
%UJM<L(iN\GJ^t$,02W`6=8K.\=Gfl#K-BKF6kSp-+2/Qj`L^@0Dmo8DX&2amrb'jEd=lF@j8<j7A07RhR,-2:]CZ0Q*no=RTPlWb
%ClHL7i'$t!nl>2n+!o[tUZ=NAT2)At4Bm=4=]Pn8c@Rc$2du7oE#&j6FBL\E(1,7@@bl`+jEXh=Tn<t*OL@)[b4RN@!bhp*hDKic
%H[)jOXF(3Z`;L5e[K@n=+],BW48>&TE@>q!^j7@A]U;hkQp@LlfLHAtE,?Ii!^4MYXXCK?IPs8ZPc\,TYn5&Y=N=&_>I<DcW59gk
%V3*6p/G3In0H8^u"A^j8lEV.9lQRR&bGaiH/r_J$.abAR8RTeE)9Lc;8QB![fP+1e!&,gFO.,-"0O#TZe-6h[7G$P-Ls*b/_FtG3
%Jk>0<]@d^M&9kam"MB*uM35j(7M+X!q3uqppq'YF&SKXC1Lra%3!nO33sdI%AX/CCLB:\4*#]0A7I\\Em6;Q,i*T,0_6,mlG!jQM
%:_>C)?peBG#.oK[.&m4FO*u+g$F,0.P0KFV,^c`i%uUgXCdq"%#XlZ];%cQclMTS%+YWF<!C@4(G.4TEEZ[Y0Ku'Y0!kuo^He&LG
%G&[l4QR`OllL7[d_VLe3No)1V6J-V:D?o%JXX>1a>+i#Y4;`"G8KkqQGS=I-e;Z<[o?s&5aGOVW?#haZ9j[*i8Dm4Rik-`BDp%6T
%?b@9GVLm@#@0GF\C\o,sPOAsD^`7PYT.pOQd$<XBQ\s!pjZqXDlk#cZh&pYcabY:`^HLHq>dlYEh&IRp0UE>oF0fZp5*d13PHTEt
%H(^t5N&o*O+jO4)s-ZP@8RU5)h&IS=YR(tdZ^^u`N:Y5u0Ze0_h42G(G&pVOfZeO6idfiq_dK-H&;K3,eb0$U3I:I:YaZ!0[t,[g
%AkpNoXg":)=9n3T)#Afq3MpG>DN6.cTUTG[YA<t0.spVsri"rbjs0M8(%+Yh([uc!2fCC_m%%6p^!IYBVo3RR_TPin6,tN1BDa.^
%RM+VQU/Uu&KF*c7Obo[FBmh?u*WqX;\:cI]mU*D"V6.U2"HA9C81"@OW'&D$]hEUNAfsrg]_:N:i1hM0>4INMa9aadRLs7Y]UF:s
%1aI*/4<1AaN!Tl_UR;GWqlO#J:'L+<4'C2&/I%\$hQ2LN6FqBY,ZHM;hu]AVB'KH05+cGD=;VQPI/A#Dn#dskbppb'XE(g<@klgE
%=:.-a.)+`s$F(/OQO6Xr8:fm>%Mkttc$lAYr[^*EEo?&X)]8%d]Rb32cBGmSs#)ei^$4tRM/S&pPcZ-JV@Sd28`2OZGp##^f;?2X
%3'Ej9RmQ;bQ]Buk*(#4$#-l7\LB/]j/gSXFIqAd#pe;o7k!6m#oJk(#-:(Ne'1m`WcZ[>ZQ42*/'m+FF2P-uWiQ9#15^,gkeXC5;
%gl+4Qg><'aH[^3pre,_4rQjY@);(X/F)RM`gFU2kb8M!3Qn&7F<<+3RRG^%M2^1aA/q"KsL'p9=93"o"?dpMfKg^f#W[`TQ?+stb
%IF0"r`RZ*0Wk1H0/>;G([W^Ws,/fBV`2$f-iVNfdA\$PPLDDYNcWTCD<aI:Zra#fPA<uR</$W\=?Wr2![`=<N-@8I24]@E(8sj6A
%hbFf]lbhQroZ=7K1cSSDhVnUE5s`(LLfT5VQ^U[4385M0a%Kdm;NnM1IW%,mC"4cBje\PAc`FbOgH)s`mS6?)(9>\.#cK-`<E<OS
%XfFkI(Q%3(f'V+W<NVE,b*GKIPao,1Um<Xj)bj[CAVIeM?H]lhf%]5^em_i%q6gX(.M6`M84\2'8aRX5W8_Z^'&<\5EmJ4>^h.1Y
%6aDa&.P+B%*c(-?g+lEu9jVN#96n,;RWZ.hVTBb0k]'p^`_fotq19dC&R9fV6lJ36C5&tiB!L.tF(\KO@UHM)%j>ckZ`:9<`Y[73
%)@]o.boWja]0<7`4._?&U:D)6WEX>8.e:locL0V>lOLh7E,U"RQ::\^<&Gt#*M%j_[nB_uP*[gsc+PsXMlf-?<Hiku^)r95QaI3>
%(Eo"qS;IBHZ>G7[:F=jKHOZUo'keAGlXEi"$H@<bU$:@/,&?N8\RiEcUV,5q[o[_(4mR8M6i*Om:GOEVh:$@uElQ:qeT07"j@[Xs
%@Rnm>f[m-(8XpeTRH`S)-=8k+K?KA$G'U@GG-C2b6egeYZCP6cY;0j#G__]/13O<N0&`h'n-oa^ojZ0dh.BZf`0Aaq1GuhpA8>h,
%DiWFcPpu=XE*)5SmTH`G&Z;68q@F,g*"34"C?eMU@V:D//LQ)cgU;8d)hqm';QI#ac$EVrO0:,BIC.*(XaMWopKb*X-U/YRKg(3n
%Kqn;3U8ctlIo>LHY8a5RdRX#F<])1]6=5Gp_P=-)WQ,h,Yo4&j`RZ*0Wk1GuhkT[=Bb"bee([H=>`fVMLM1KiE.tBLiq_k[ac0*$
%VJtQmX=31CWG5&lMfpFID]X=UZ`;EPn\qp)ULD=WH/lT<]0>)1&/n?3V'AS"b;TbCd4g52)\t#4=Y[+3V&rVQQoq`T[#'?Xq4:/q
%`kL!s[9,2OVbtnW/Dlp`CXoM"2Z2"<k=8sFT*:'aN95rnQ8nt#pImmc#m)lX+DM</&.Er!e9t`a2q]QV)c?@OpeQk8,S^8m5bpkF
%$G0B&2$29a/UFaF+C\P!o7K4<KNsF1(a8@,Q*aBY@mIpUF^usK6Ct$fDJ#a7NKZGQI/R?-.Ur)hX^k<B$/iKMpn+,8/o.@N+$jl*
%0fU.HAo3S@6p1Ec'Fu,HRtBh"^EY`ZZ\%?T90dZe>lcXcb<p$,njI9(QZ=1.9(/[',3(,=.1h!-%qN>2e<'4a%&/uB"G#36\2ae\
%:0l)2E^GmB:2JWs7Hr"f6n.We0-]%U/u$c&)%Tbr/qM;P'a;NZKnQEe'P3EW!HpL7FJW"6T\pThU>4c'D)!1O8L5OJ"bIm#/4,IY
%e!R(QrahAg]1@HFEKUGp[TeE3,`5l)P_(ZWm-ibf&8$30dsjp?q,p*uc;c]NR8$/7W^O]"Zj$IZD-otD2os=GFAI)ao=`69^+%#A
%R$mQZ=S%n06rAamW[?`Vp##>^6n'Zu=&I:F;)4dT8tGb(YQMXpL=(uK84*TbES3U;LmJQl)(La+Ec7N\bi*N?+lXB=(YhP86AFHt
%#fJu`SXdd%j<=V?$/PY]_b!et!WQ4(7h[JQ4f#0HN2;jn_Jdi_%J^:9+N^/==rW&s)pE2tcbfCsSEeck7^J!S`d<8a]r"]Yh.QV%
%jkQqi!7ZrSP+!M8I>A_)/34<;4JKqc<=![eomqq.0fTY'%#"8M.!%`V7if3mq<ru3a(R06gH&fN06hn`9u'QE)gOQn)1*fK%Xf-Q
%DMG:E4eE8hKc'm7"8ct9Ui7.^eOV00DhbJPVu^>T"(VTOS[%\s)Sn,tKZHMD\OC3o0U6\4HIVBBpZZ_[f8/"3L5HuV7%_J)MQW0&
%6;fclQF5+md_oIWc!cCg.$k?cGuSI]9O_V%?TuaBL%*@\iB^#OKMt+NOi#l(lnB%jq#Hr&Jp:ao[q5JpLUPKZL5=5CF#r61iVc7;
%(7X>#.Be%m0X`*B!-9"tqi0jrkOil^$Z`a/$`f5?5F133"cLZaFe'`+VhhLtf/*29[+<6s^XjH4gMOGoH1(7J=jE3C=-cR['S3t^
%.csDQFN^CYf^a$_rDoR>h$CKM6fcnRgo%tdmfaAtpBGgW/s;_@?5^@d*.AGi?DA#aFGI11b[r_71b4rWOFQ-SrZZ(I0/'?.Mlu?c
%LHV6>=-&(;K1O6CL15@CP%?%\Ntp32%gBg`2t:s8K8L>*S;%)\0M7i3=CD(_2Z5HJ(kJ6ujVWnYE#f=2Hg.=%m'2p:3^4/3PY9,s
%lD"lF-3/DtD9l<3.4C5-DUg5&$uZ3j6:S]NG_q%<,2$5q)]2CQmC.gV#5q7@#uZ:6m-igKmL"/-7[t.bm;@,b*fhRJK]alk4'oo9
%nUCEZB+<.67OUSq5:WI"a4C?\P;&^q4rbRb[_Y"nP5(s3PZFgN>7:c<Z*?9e7qN5!\g`GHOhD92=s7U"j<2bsc[!M>;+1](,)qXo
%,DQ/qeJjL62X$b0nR44<Nb%L[qD*a$]8OC=o7ZjGJN.s`iC*cf`DZ*.a:lQmZaZcfHn//DW=`KF.7ulJc_Os-1bY/fR87C$FN3bn
%](A&(o($_6q@06m)@:r=FR%#@n6oEe2KsTOemoT`YPMN%@VZ'(.$777V'F6;7>7rP_LNcaB.%X@#^0%)[*tM)HNK(S!'9o3m'Q3c
%5/sOTSTY0&QQVb+JJ;5Ci^-$=QJ#7EkRO/C!7YV:OW4D=a6aesh%0Q\ju7^C_OP1pipt6B0Z]$.J'lc=W$Y$P&>Q'3=kfA>^s4Jo
%"?7,tRL]N-cZs0o_#ePH^n\oBEp:D+K[g]#DA$Wq.*bF)$@t`DrH'2DQ$3Vt\-VK?nerUoVqVrL+d`=OC`cc+;Zs&NZR"C!'V.NX
%IXjh6!0dbjcaZe+U%/<BG%#0@q2()#UoYmk#$<5_8^bRlrjcs#m_qs?"j+#m=.'iR.OaO4W3srY_17'u[oCuA+:^GZ"1(Qc8FqT`
%gj2TU@TtGW+t5Cn+6"Og^2EK;K1S>*6OCZa!FJs_D!DRDs!$>DNQ]lKb`bONN:V6^]:g!1=_6eW,[7L=+rD2\]bo!KL!bS#_.Q=Z
%/TjW=`%MIMKOds00#bh>3(L>/18BOoODW;%'[je'8m8STP0jPu>3;J5gBPO]PK%e^,Vcm-Lsct?L)iJeVEQK6C;3T=."E*Bj)?;L
%2j9^D&A3fV"tJ$VcKC@IAG[N/"fh0_BtQjLmI.V""pa2j><ik"J;&)_3mD;Y?#oh^i'ls0$7O7*0OlspBibmCqVY(\W%LZ:?/;,/
%hYL;Zn0>5i4ttA@FFqep"a26rJ)]d$eArb00uFmWVjX`?gGkTVS2ls6FF2Tdc;tG&D/6;'_dq!]LPgnp9o,3")/<!02Hp?tCg:(f
%e7O7Y._,o^7tc@Z![MCaG"VqfXEM`CUN=3S3AI3COq$6:CVh>U41fdGT>dP4F&W<-0,)IY%jF#m6]YjH['L"lUnd1d=gCO.T='oJ
%%5Pp(M'[P"qJa.6E@iH=0rcI.E""iaJG9OXV?\b_Y/)iL80-[pa$egek-+frX_-.A_"]d//lE5?TPJZF7%ns)_foXU.?P#TIWJqj
%Fdjq%FG+'Qlk(Jc3)9e]MQ#\\UtgdgCU(=0Lb]</8HmfYD_Ob+'ugb_Yr)clXbmu\^;G31&$[&HF6jB<#d@bo7)Y3N@ee\+VArW!
%Kf\i4!YGMp`'BPuB@.k:1+@,!Lp]]P9!cDGe#p_lg'gZgOF.3@F!>tpSr!5Ap>+SZ"*CkRVBK[NjT1r(]"B8q$=:oua[8CKod;[U
%q?(R^4BmHdks$jjWb[kMK,,paq%4L04EcZ>FWI&<A08^NDEG$6abWJte$?_O=seP*rTp0VmdGZ#bs23up7#FgqH#o]iQ%kr#h`Pe
%+^lmJs-oq$q]ETKiKq=U`RA2o_a"(tmIo;Ds8M?Ar#B;Jk35+'jF>$r^+kEq]Ph6m#Qsk42E+LPY!Ci>W5h82d;K1].\//I&`rZs
%]O#s55snm]fRAlj%$lEE;^d"W#5*ErGFj<)[Q@ZV*>)U]NLPD6b`kXiEVh)uEO"'s==a_XK4%Y<]j[$*2usK`FJo0Rdn&6S4bC?W
%bChQUa?.sE@2B/B8D`QT"oG1-NbD$q:f')C'du<)TRA5#/\o%a(+^IEq\2q(SoYg7Mle/\G#l+n3&3<72G4nWnM>$\i0uIF<).:-
%:>bmC]*ba)hc4FAFK`8['/=F.J@gMEa1`a@s$2eoVoFWppaC&.@9<FDT%&Ld$1):E"/&;a8(K!4[Y.#k;eSsCKo"(4G-cJ?qM3"X
%@CQ-?nDtp;+SS`_KE6GOfr8Sn`"n7LlpB:crL1JAI38,hLZnQ]\1%FVDh%(]#N=nh5NaH+HX=C6iZWLFA:+-je*cW5#eE0>RaS!%
%o0fcMJ!9+92_-#J"+u1B&%G`X-i^9+Qk6AJ,g()4A/hDW8(lOJH&]t-<BWkQPYX660=h0@+rH;H,BF(BE9"9X3fJZ"QI,%+I-4<;
%[A+]`L.q_4'.g=d;o,Ri%j%UW:V:)=;t4U"-3#BI90bqC2XG%l,BPE+02-3g%`hBe#W_78gcIiCLT'o[.Ok-4]C\O(%'_b;T-J&V
%hP'HOP0_M8k,ioXe3npe,U>WbSH/Am29$I<qKlNEU0G=!42K?K?nDQQS"*4mCb.\#GGE;!,#\](FR3@*b?FU.gIV\DZVoQkq6lof
%^2LQbJq*[4^>&]'ZSQ$!W:M><<6SK7C9gq`c%\J4FiY@J`b29PIlo!F-jds#9ajf;f5\"RYgs>KcHo+PL*1Q!#>g"^=Q0(rgZ#`#
%"n<-[@@F/CrPD7s_ADb%1.UOZX@b(6'uH`cr=qgt4))Q'61:oXfra,thLe1@.SFjIB+![C2B9bk9$+AKaAVN'a"amtj_f>)QuZel
%;aaN!m'n(8;5^Q,.Ctde:>ZG9AMECs0Wdf:O,st-14U"n"C6@-j9T@Eb.n1-*&gY9eJ:&C#Ae&bc*Z7c%03<;/t@X93k5q47P`4o
%8qAU`'[hMk[j*d@,`39=%2r\d-m9c@X@Df*MsRTC$s1RI4#:f^2L]>&*JWsF`'LKN_V-Z>WX[1:m)m&.0MBLR@7e[hEnh`7K:>oO
%7g#?:a.qfq%&%q_8XM_1RQ#o-BBpbdmECZsRKEN]8(oFB/Y%]_4eD]!K+Y_5]7e3Tg,d*?,W$mnZBPLZ;f9_I6PEA@SVuIc+j&kX
%_J#_V[33ELqC?4f3@r7q!.OgWD4qn],_QCRe\Dq-HEdHA(QTgT]gsF*FEjO1%EBPGoo5Pc9K1fM6t7lQ*+[Qn!#-U!-mGcI8OU(d
%gB;],*#<j?QU&)t!.D\L*Q?sG;6#:N213F0(WhDd\,'bTa`d#:UrEL:KqWA7`Fo-EJYBF)d%Fj<!O*"C@8a/rklB)$c$Z3,GVU+@
%eE0-;j6tWFPjhOC7-WOKaaqV,JR2]']WdfG,64KX-atu?HE\/WX!6;q?:KJu\0_J?A-Tp5P<'50C7euaElb%H(PX8Scs:UBZ!2b/
%#=:[C+bAF!G%]`2ERF,r6,h;L.A'G5VV.tC"0jl^0>jrQV&3XMl6aRZ1WLd,n:Ya2H'ri'V?oFI<qhHp@`L1D^h^@:YcH<G<9'GR
%U1N--BG]TakYYVhO-(Xs_WW3F][JVC!*S:9XFgZ^,#4+.kqGbh@7M5UZe<5ZpK?7JiNYB*&D'5%g,[9fI$ht8Zkc9_pVr(>^4q&9
%78QS8p:`.CCbEPdq\k0A0LsKsf?O<&c#Dl"Y'G8k+0U/q-5(n*&fM=iS#D?X`193@aYC:-i`]YNYaWaRlG0`G2\prTQ#VnJ\$)@+
%)^NTAV%:P?&j`^2_#]#kUunDp3>Un7@^,tg\(SS0K,pZJM<F[<#lBEO9E71+&s"hNJ(Qm!Dq%QF3ClUYO=QBfSl8Qr\Y7PaoEb1H
%=ei[^Y]\E([15rUPc?Hmh(rid0MdPf_DI4n%+q,.OFXAs\-UTic%;LV<R,]]N^Ub/R0HY\"3erF3pi&)X_-NNr6]j+p>$ObYYK.U
%)#L684<g!/marg/Qmj;9)R4HG6RkqOn0gR"3.mQX[8FAiOjAbCL4oZAbTB<L7g(6gLAMSlCQ,o[/!<9k(T93DV-f3G644CE@uS<s
%lnuNf([+b2bT!;a]gVjs1%OC:gqn>gG$b+;1658T$jdnp9h!leP+k^D<7H)K+qbFBnTB/g!kh3gL%C2Zh<6tEKnmjC2@o*4`HCOP
%TbDhn?M*ASG;Jl^D]t&\JmG'Gl'5`LP@D;iMEmI>87'YH3dc4UGqjoHluCVMY)B$Em4cAmANYn0m[[m2`q%YkluL449=6PMHs^*p
%[o(Q,`'p"+2i8on!IAV?Xe#.R^?E'b:R*m-DG9CKLknmQ"Z/#cIGV=_;RTTZNoP3:4WE*_^"W[e3K#W0hHJ"S3**kgjP\@$=Hb]S
%!&T[EFK\ncO\Q?JrG^9$S?D9OONB.jSp@!\P/Vf&?K[6;9s>;U:Z(is`W>UJo^i,%A.Q;ti+(5u&1:MHDU91#[^sC<aNW+S0q8a$
%R+*Q-#J*QG>&2/%Qe#Vb:<9d\!3lMiB-\cX9]d's'PJ(jPbU?Yb(_HK`&@On$[&D$ZRbTp]L\CmL"E/uEMq*4Mo9*JPajp_b<I#*
%004Rc>Rj`+QL1QoM$;lLN/I'R-@R!I@j,N:`t[?Q%-^L2%PGC"$8W^CENMcK=>pfu&dcU:4(#Eu1`knNonW?PG!Rh%q$osK\?'&k
%8SXH$Wo"`"Mma;&=H#@-APl=Z&1Vr5haEP<26WNen,r9"k)Z[?q9%?c-sDZK-:*UuUEG;"Vs;=6J]bcA`F9Xnc%<>XW'/r#\C\b3
%c/K43^jS)P[*nVN8BI9F'c'X.dHn7-o:8H<bl[;ekgX&i?BjAQO^p7>&`O\ra%EU-Q7I!jKjGSY$jW9lO.EGrTFL$MYdB'9bFgQN
%%P>edN)+aK$^3\Gl`%L@W,Jh+H2KT!$TI4p1JQ.Lgb<lCoZAkX0G!I4p2=C@!?QEmCIl,6caM+o_O$H?b4*:F.c?^Z&4?CuKs3$<
%&:I*@eQNQK&mE#R9/>Fni-eUH?3p:KAh/.,[^+*Q]fGlEVRu);IPaOs>=b?V5D#`!=#ot#dSMK=51<iBDa?fX]4eZe%lRA9KT%4q
%\qE>a>I26!;0b?b*DTR%REcC&anocn]\)%^fr>X+h"W:,@]1O)YYZ`VM@`u69p924!:Wb#5U%Hp)i)0ZF7WIB[F+X\LEkITU7'f>
%65nYkb<YM_Ou"!-DR#*DX.lK\LG(2FNj%b@K(H9?3inZZAWlYjnmZZCWNu,qZ7l3q7288%W=JJ^RKXlu#GKo>A;lee1sa%*o0P\D
%5db$K0\-cpT+fL=AMPJa2^f(fnK;A#R[dj&<[Y[5(:rI6G8YGkNF$al!\ff,,nSLF%i@Jrr$%9+G-Or$Du_Q9P`22e&Yr.H$A?+o
%MVGcT3.sYeR+*iaiJR]a#psU+1;S'5#hpGRT_uD)Afj2/jtR[U00SO]s'IhpCg1neqfi[h6liZi,IBt'\(&E`^MKc-")rq`KV4.H
%8d)BM[\(/mUr7b+qpq<;M.g5YK8F`N)M#",4(oA`I$PLUX\V75f^le1:_;:>O%8mWiQI)4eV^LVS2:ii,JI9!Q',_#(_r5=<eNp*
%/k%JYc=a?e\[<_T->?^X-V5l\LU!6`W26n);%s5!-iaj'`]]A)\r\R;8X`3^BQ9=T)5;dr=+_g],`!`-0p<_$''n-`e]S4"#o$dZ
%V%h7-_8$].C.RMcpSrj;[VFiuX&DhCOT0:4\q!t)QD@b<Or2XFTfna!D^pT,A=4Gi8MUTIKCM;B_TZc6lnq@7H'Zr$k79LgIATA)
%)0D(\HBi;Aa0Y&i7`qGYefmLT`X4)E_0,Jh0?q5!)C_!(7P.g2-(1eh1JpgODg6U3E?A_(\&c('4csoTQdW5as0k/9k.9V#63AIR
%p1!+X+[_CB7&jDk_gcG.H@RG&a@C.^0t@$%ZDPB/]nt&G%glG%8Sc5d88bYg>9`!f[$QoC!aR8H)t'U`'IdGtl>CU6,b(Gm"t-dO
%18>RVV<-Kb$OOAhZpX\jimkQXQtfPkU]g')NB+/1@2Z#R_U1aOo.JX0C4<lR5+NWQ??2AAK1'LuW\DOhKIgYI=Gdj&\9L`un/kCI
%,kBP6.o+a%L4L/\I6-)r-Te*9MpGjfd#370"H7<lJ,4]/MquGubC*V=+d1n'qpI%bI[q[93FW0h4@69;]$Iq$?d6oh8Xf4XD\qA:
%Is!J)N_mOI0)HCU8>KV$gBP?!*)VC"KOhs&SR%5MK:uEoUe,HtYUdq<*0b;lG$'ZGF/l?b;V(aC3ec6Dgh7rekQ*4iqsg"q`OKq5
%_R@a#qHO_jng:f>b-tAOL*#i]__+H'[?Ni@^9(C(:D4Ns<JU;s`9&i+UhU=Qbe=3-#,>VbSgl#$(!R0"%s3XNm^?s)Bp%%Vc7>Tn
%1n[rGjR7t\Yu$mtfXp9'&B^<N(hX:4AE:$'!-jmGK2)Z%)Dt@s`$MP:JV=Z%6&RMXkJ=1M&VO'CJN4d.3YQkGKBIK([]2g=&)%GR
%%lKL1%E9!Of_.>eW$4>*_'gLjDmD(hj&I=QS8M<.TQ%)7X\d:Cm`d&'T9XXg4I7TOY!b8DAg)5*'Q=`<WuVT$3-hO'H'HbL_^0p)
%+NX]fm,?R;!d<MddBe*M>0Go[@B:Zg#%4LOaeYRp4?i<oc8gT6^iFF.n>A]Q']Frl&oEB.q9aZSPp(uH*kE=5,^T!9N-K!R7!,8[
%i1)*,L(1J:?&07c4pBM<Y>(_'li[!5iq;hTbBCM/D@XYOcbdc>:Q!t%mKQ"*8DU;u"r3^7V2DlAmhAbt(t^,H<Xq:GaWuGqm>[PJ
%Go?*%mKAU%1k@HM?42!e!LYZW6FKSo33o1nEKb!VR9b<a6Hq;'5rkWsG`3.$._B=;@TIC_'XSVTSiNc%",%#P(er9GE'uugj]4KM
%#13s57(!7Y2!CZ'.I8BthB-kh9=1FR;W*$_=(=Q>ot+(&.Inq(i0JJ$b&80*D'>UI`X*_'^8GFS<QC6.lZOZU*B\FL2:3NTP)6+g
%-^'t:G)r:#7]h5TSP'GV2I(+@6=e)J:IHIc]Vp29`.qn0G3#UG3-q20j)B_C0$D1M*JCdMs,pkcY:i_ooud*[_E9EcHfEe<UAr-4
%6t"+Hc!lM3LtDG8297&KR?Ho489?rsdBm.Mn'.%O.cB_S$:MacjCEqZQ1:UpW-WatPiLPB@p^XUC<^.`o!I/.:VRe";cZkAQb<sC
%g4C_J1,3QkA^-@lrJU,TVDslTS?7B/8(Ro[2r_SDCU<^EkH4^.L*2TEHl8^k&E-2k"WpD8&C?'RlU2I.0'5D'oO-)+\XY`AKY.X4
%4#3+KT`nV(L%gdEr'?o@eVQ[ij7Ai.KojE6S\q.#!c^UqoAchXZ^6>.e-L$94EKqf%+ut?_4_#]a<iT!SROhri:KLO#m=ch3As&G
%$6UI736W#WY[UD6A!d-8_>%!;[+Jm;l;K;pY%%&LLrUP&qCA_GP@2jA$pj*RNF-P=N!*!Xn,E(e^G#ibIc(#dIPkYlq`,#o9n*dT
%klf/q6!ln6a!%f[q!kLcPPH,lRSUnP2.`JO$c.sJ(@5K-b2SMMEO_'Rf<L'M.ln"-(r@Fgna`GcK>E=[Z[`Sd<O/1Q_A@!>c6K20
%WIB?.>P5u@PV$;]LJ<W\+Fm!4k00[gKegX@+K"e@dQTBY1$`Gpk92T@G>!!6Z=fi#7<4/.mg!*6$L*/Za/rcl`W\<,Pi^9hPX-`Q
%VG*7?BotMiIKnqL)KNM?]VAqaH=N(QZLunEBDmWF\ttT9K2k'&rSRdWlUI5$%1XQj6:TqX/=%bXZK?$:@aIR)AbO@(UF.bP'>0"f
%`C;'4$&8Mb3]%[E=Vs[=!T@=?(8ejkn4o,YLAg'+)-MXN`=O#16Q-RTR/lf8'[dqM7<8cOUkhW4G^q13+.!R[FBG%JEgq8CgG^,V
%1n;.M_;iNJX+4t#h73ooi?k's5oII2f,&O1#`pD*.WAIPeVun5>dTCF(PHB")L,5L<8d.p24ms/V9sXP/&jY?*2g6kXs6,o'<qrV
%?0&X]fbd$eBeQ_g`l1)!T8@1(7i#6=P?!Q98^hs$iF5iVFj<W8ZnGc'`L!R-S.[EaIT^!rE'D;\/:LIj<I2-.5LW5VBBILtO"0a`
%;><s6+j%57[2%$f:U'D?/#l\aBnDs^Y7QYdW1"8\H(:bY.&-LY_P)Hj+hdL\m^p+^0kWA3JaZ\G]BAKMMoZ$CPiC2RDpie/O?:I3
%\noF9cm!#3Kl,%#`q,*ZXi`%4"P3Z^fE8574sGCQ"G5uB5OF<+!Mi-lg9dOKEYL.ePp77Yqj';i@AH;hbSZSA`+iIpM!l1'eY^+V
%PoE`.N%hTs7>%WHa'R)UCk_KeA@V5.".mV+@Ip4kHsbSq6o5I>-%kGA*g7O@h-\:ud`IDK2F2O@P(EGL8U#eg1/3pq#Vmr-#$`UU
%K3PgQh%7CUc%n]dF!rmWAnSDD&8O-Bg4?aONGPI0Gt?Hf-!Qf=K@#4O19oDB8guM#"YGJO^kk1J@knM5%IsH>-3Pk;n8p@ZL4M9h
%MQ<f;@_`>(`860I_;$>KNpuSPlS\W5SKqrri"NoV"+rnH600=&J]&=:e994QAQ-rDK%nA-=%G:Q/:gLME:7@N(=Wh/31cL3[PgOM
%CP[1OY?0``du]oYFH0"+1Y`\Y`k)u5.11)I"=N1Q8nb_>je.4YQ,aZ3<Q7+Yf<V?<18c(7:,.N74_sSD'7j.\![]gP1Op@M&<LBu
%6R$r1Bt->A^RP+@P_N#u33k9tOM[KN&Z3`\0?#]1;$2+.Z:2$LicrWrPUuYDl4>j_B#IRf7V!<s>je]FDJ%Sse%Y^Beff2sQHS^/
%[+Nb3c(JWYf*gXVo4eYj:r4:oM;X(,R9Kp8Os1heMo95Hl3$L->lUQ"G>H34^TXQpDoneaO^p@hDi][D]8IgQ9o%"%kB!hrT&(JP
%G[Z#B_t"Cr!:m`4kRu2:3e-iQq?[g@PDQ(qrL8%DnnmFsPF@_c'ce]LF]qX_:+r04D#ZWN-eIX9?CaMl0*:@R.XV'WWshO>U^pQD
%<8YqJ$tf[as6dA3lPF@<Br4L5Mj%bQjrIYBZ=8C92O@f+?Yc-N(^a$lgC,Z'#bn0;:j'G-G`*)D\FZj^Pi5ocDKiP!Q[eemYC?3>
%s/#Yb5Q0ks^\n#Mmsk-%i=PqR^]"'HhuD"EIf@NOhuE2j?iAtkJ,]HGe'EO:.q#u:s*p)ZHMYSkhuE"\If71Y:]L9@If99h_2lSH
%IeL*tqQKqpS%nh"HJ-u<~>
%AI9_PrivateDataEnd
